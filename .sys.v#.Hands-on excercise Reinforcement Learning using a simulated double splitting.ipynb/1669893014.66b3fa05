{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4dd5661c",
   "metadata": {},
   "source": [
    "# Loading venv and importing packages\n",
    "\n",
    "We will be using a well-known RL library called Stable Baselines 3 during this excercise for their implementations of advanced RL algorithms. The library is based on PyTorch. To save you all some setting up time a virtual environment has been prepared for you. Running the code below will activate it in this notebook and allow you to access all necessary packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d15b5c2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import site\n",
    "import sys\n",
    "# venv_location = '/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl' #'./hansOn-venv' #/eos/project/s/sy-rf-br/Training/hansOn-venv'\n",
    "# venv_site_packages = os.path.join(\n",
    "#         venv_location, 'lib', 'python{}.{}'.format(*sys.version_info), 'site-packages')\n",
    "    \n",
    "# # If the venv site-packages doesn't exist on the path already, insert it right\n",
    "# # before the underlying Python's site-packages.\n",
    "# if venv_site_packages not in sys.path:\n",
    "#     posn = -1\n",
    "#     site_package_dirs = [\n",
    "#         index for index, path in enumerate(sys.path) if path.endswith('site-packages')]\n",
    "#     print\n",
    "#     if site_package_dirs:\n",
    "#         posn = site_package_dirs[0]\n",
    "        \n",
    "#     sys.path.insert(posn, venv_site_packages)\n",
    "#     print(venv_site_packages)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b5543aa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data dictionary compiled.\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import datetime\n",
    "from utils import transform_profile, isolate_bunches_from_dm_profile\n",
    "from datamatrix_lookup_class_quad import Datamatrix_lookup_class_quad\n",
    "from datamatrix_lookup_class_double import Datamatrix_lookup_class_double\n",
    "\n",
    "import copy\n",
    "import random\n",
    "import gym\n",
    "\n",
    "\n",
    "\n",
    "### Initialize the data provider class to use for illustrative plots in the introduction\n",
    "### This class can provide you with simulated tomoscope acquisitions for phase offsets in \n",
    "### the range [-30,30] degrees in the h=42 harmonic.\n",
    "\n",
    "data_class = Datamatrix_lookup_class_double()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eea58ab1",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "In this notebook we will attempt to train an agent to optimize an RF double splitting (the first part of the quadruple splitting in nominal LHC-type beams in the PS). The optimization problem is one-dimensional, with only one free variable in the phase offset of the $h=42$ cavity. Depending on the phase setting, the splitting will be biased towards one direction and one bunch will contain more particles than the other. The end goal of the optimization is to minimize the differences between the final bunches.\n",
    "\n",
    "## The double splitting: some background\n",
    "\n",
    "As an example problem we will be using an RF-manipulation that is done in the PS during creation of LHC-type beams: a double-splitting. In short, it constitutes taking one bunch placed in a single RF-bucket, and splitting it into two perfectly equal new bunches in their own respective buckets. By equal, we mean that they have the same characteristics; same bunch length, intensity, emmitance etc. In practice this splitting is done by lowering the voltage of the initial RF-cavity (in this case the cavity with harmonic h=21) while raising the voltage of the next one (of double harmonic number, h=42). In so doing we double the amounts of buckets that are available in the accelerator and if done correctly, split the initial bunch into two. \n",
    "\n",
    "However, if the timing between the two RF-cavities is not properly aligned the two end bunches will look very different; you end up with more particles and different characteristics in one bucket compared to the other. This misalignment can be considered a phase offset between the phases of the two RF cavities, and when optimized the phase offset should be zero. This offset will be the parameter that we train our networks to predict, given certain characteristics of the current splitting, so that one would be able to correct it easily.\n",
    "\n",
    "## The dataset\n",
    "\n",
    "In order to facilitate the optimization we have our simulated dataset of observations. It is from these observations we need to define some form of metric to determine whether a splitting is good or bad, which could then be used either to guide an optimization algorithm or, as in this notebook, to define a reward to our agents.\n",
    "\n",
    "Due to the time-consuming nature of performing tracking simulations over 10s of thousands turns and the large amounts of training steps generally required in RL, it is not feasible to simulate each function evaluation during training. Because of this a pre-simulated dataset is provided, from which we will sample our datapoints. This does however introduce a few additional challenges that must be considered, e.g.:\n",
    "\n",
    "- **Handling of points outside the dataset** - handled in the environment\n",
    "- **Interpolation between simulated datapoints** - handled by the data class\n",
    "\n",
    "The dataset was created by simulating 361 different phase offsets linearly spaced between -45 and 45 degrees and saving the final bunch lengths, the bunch profile, and the full datamatrix of profiles. To begin with, we will be using primarily the final bunch profiles and their extracted characteristics (such as relative bunch length/intensity).\n",
    "\n",
    "### Using the data_class and some example profiles\n",
    "\n",
    "The data_class most important functions are:\n",
    "- <code>get_interpolated_profile(phase)</code> - Returns the final profile after a splitting with the phase offset <code>phase</code>\n",
    "- <code>get_interpolated_matrix(phase)</code> - Returns the entire bunch evolution over the course of the splitting with the phase offset <code>phase</code>\n",
    "\n",
    "Run the code below to see some plots of bunch evolutions and profiles for different phase offsets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f213ae7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Examples of using the dataclass and observing the dataset\n",
    "\n",
    "example_phase_offsets = [-45, -30, -15,-5.82, 0, 5.41, 15, 30, 45] # some example offsets, and some phases requiring interpolation.\n",
    "\n",
    "for phase in example_phase_offsets:\n",
    "    # Load interpolated datamatrix or profile\n",
    "    datamatrix = data_class.get_interpolated_matrix(phase)\n",
    "    profile = data_class.get_interpolated_profile(phase)\n",
    "    noisy_profile = transform_profile(profile)\n",
    "    plt.figure()\n",
    "    plt.suptitle(f'Phase offset: {phase} degrees')\n",
    "    plt.subplot(121)\n",
    "    plt.imshow(datamatrix,aspect='auto')\n",
    "    plt.subplot(122)\n",
    "    plt.plot(profile)\n",
    "    plt.subplot(133)\n",
    "    plt.plot(noisy_profile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0d8373d",
   "metadata": {},
   "source": [
    "The profiles generated by our simulations are much less noisy than real data from the machine. To make our data more similar to a real datapoint, we also have a <code>transform_profile(profile)</code> function that will add some noise to our data.\n",
    "\n",
    "Run the next cell to see the slightly noisy profiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "61a44cdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Examples of using the dataclass and observing the dataset\n",
    "\n",
    "for phase in example_phase_offsets:\n",
    "    profile = data_class.get_interpolated_profile(phase)\n",
    "    noisy_profile = transform_profile(profile)\n",
    "    plt.figure()\n",
    "    plt.suptitle(f'Phase offset {phase}')\n",
    "    plt.subplot(121)\n",
    "    plt.title('Original simulated profile')\n",
    "    plt.plot(profile)\n",
    "    \n",
    "    plt.subplot(122)\n",
    "    plt.title('Simulated profile w/ noise')\n",
    "\n",
    "    plt.plot(noisy_profile)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9646c6",
   "metadata": {},
   "source": [
    "From these profiles, we can also calculate even more specific bunch characteristics.\n",
    "\n",
    "A function called <code>isolate_bunches_from_dm_profile</code> is provided to help you get the relative bunch lengths and intensities of your two bunches. It basically works by finding the center of each bunch, gathering a set number of bins around each center and defining this as your isolated bunch profile. In the process, it also outputs the FWHM and the intensity of your bunches.\n",
    "\n",
    "Run the cell below to see an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "31a96fe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To do some analysis based on a profile, some additional utility functions are available\n",
    "from utils import profile_reward_quad, isolate_bunches_from_dm_profile\n",
    "\n",
    "profile = data_class.get_interpolated_profile(2)\n",
    "bunches, fwhms, intensities = isolate_bunches_from_dm_profile(profile, intensities=True, rel=True, plot_found_bunches=False)\n",
    "\n",
    "\n",
    "# Standardization/normalization\n",
    "fwhms = fwhms-np.mean(fwhms) # The FWHMs are returned normalized, but need to be centered around zero\n",
    "intensities = intensities / max(intensities) # The intensities are normalized, and centered around zero\n",
    "intensities = intensities - np.mean(intensities)\n",
    "\n",
    "### Plotting\n",
    "plt.figure()\n",
    "plt.subplot(131)\n",
    "plt.title('Full profile')\n",
    "plt.plot(profile)\n",
    "plt.subplot(132)\n",
    "plt.title('Isolated bunches')\n",
    "plt.plot(bunches[0],label='Bunch 1')\n",
    "plt.plot(bunches[1],label='Bunch 2')\n",
    "plt.legend()\n",
    "plt.subplot(133)\n",
    "plt.title('Relative BL and BI')\n",
    "plt.plot(fwhms, 'bo-', label='FWHMs')\n",
    "plt.plot(intensities, 'go-', label='Intensities')\n",
    "plt.axhline(0, color='k',linestyle='--')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc229fba",
   "metadata": {},
   "source": [
    "### Initial suggestion for state and difference estimate\n",
    "\n",
    "To simplify your initial attempt at an environment, I provide a function called <code>get_state_from_profile</code>, which will return a reasonable state to describe a double splitting using the final relative bunch lengths and intensities. This gives enough information to guide the agents next step, while also keeping your observation dimension small (which will decrease training time required).\n",
    "\n",
    "You can try the function below and will be expected to use it in your environment <code>_get_state</code> function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "74ed5cfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State description: [-0.01388889  0.01388889 -0.04368837  0.04368837], State type: <class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ba678610d0>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_state_from_profile(profile):\n",
    "    \"\"\"Returns a state description of a double splitting given a final profile.\n",
    "\n",
    "    Args:\n",
    "        profile (numpy.ndarray): array or list-like object describing a profile of a double splitting.\n",
    "\n",
    "    Returns:\n",
    "        numpy.ndarray: A numpy array of four values, [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2]\n",
    "    \"\"\"   \n",
    "    bunches, fwhms, intensities = isolate_bunches_from_dm_profile(profile, intensities=True, rel=True, plot_found_bunches=False)\n",
    "\n",
    "\n",
    "    # Standardization/normalization\n",
    "    fwhms = fwhms-np.mean(fwhms) # The FWHMs are returned normalized, but need to be centered around zero\n",
    "    intensities = intensities / max(intensities) # The intensities are normalized, and centered around zero\n",
    "    intensities = intensities - np.mean(intensities)\n",
    "    bls_and_intensities = np.append(fwhms, intensities)\n",
    "    return bls_and_intensities\n",
    "\n",
    "\n",
    "profile = data_class.get_interpolated_profile(2)\n",
    "\n",
    "state = get_state_from_profile(profile)\n",
    "\n",
    "print(f'State description: {state}, State type: {type(state)}')\n",
    "plt.figure()\n",
    "plt.title('Full profile')\n",
    "plt.plot(profile)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17e10b47",
   "metadata": {},
   "source": [
    "## Difference estimate\n",
    "\n",
    "To further ease your implemenation of an environment, a pre-defined function to calculate a difference estimate is provided. The function takes the state computed through <code>get_state_from_profile</code> and calculates a value based on the relative bunch lengths and intensities: the larger the value the bigger the differences between the bunches.\n",
    "\n",
    "The cell below defines the function for calculating the difference estimate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0e3daebb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Phase offset [deg]')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Try to scan your dataset using our difference estimate and reward to make sure it is sensible\n",
    "\n",
    "def get_diff_estimate_from_state(state):\n",
    "    \"\"\"\n",
    "    Returns an estimate descibing the difference between the final two bunches lengths and intensities\n",
    "    given the final relative bunch lengths and intensities of a double splitting (a state above).\n",
    "\n",
    "    Args:\n",
    "        state (numpy.ndarray): A numpy array of four values, [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2]\n",
    "\n",
    "    Returns:\n",
    "        diff_estimate: A single value aiming to describe the difference between the final bunches.\n",
    "    \"\"\"   \n",
    "    observable = state\n",
    "    relative_bunch_lengths = observable[:2]\n",
    "    relative_bunch_intensities = observable[2:]\n",
    "    bunch_length_difference = abs(relative_bunch_lengths[0]-relative_bunch_lengths[1])\n",
    "    bunch_intensity_difference = abs(relative_bunch_intensities[0]-relative_bunch_intensities[1])\n",
    "\n",
    "    diff_estimate = bunch_intensity_difference + bunch_length_difference\n",
    "    \n",
    "    return diff_estimate\n",
    "\n",
    "min_phase=-45\n",
    "max_phase=45\n",
    "x = np.linspace(-45,45,361)\n",
    "diff_estimates = []\n",
    "plt.figure()\n",
    "for i in np.linspace(min_phase,max_phase,361):\n",
    "    profile = data_class.get_interpolated_profile(i)\n",
    "    state = get_state_from_profile(profile)\n",
    "    diff_estimate = get_diff_estimate_from_state(state)\n",
    "    diff_estimates.append(diff_estimate)\n",
    "    \n",
    "    \n",
    "plt.plot(x,diff_estimates, label='diff estimates')\n",
    "plt.axhline(0.02, color='k', linestyle='--', label='End criterion') # This is a pre-defined criterion giving a good splitting when using the diff_estimate.\n",
    "plt.legend()\n",
    "plt.ylabel('Difference estimates [arb. u.]')\n",
    "plt.xlabel('Phase offset [deg]')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "888a32d4",
   "metadata": {},
   "source": [
    "# Part 1 - Create your own environment and train an agent\n",
    "\n",
    "In this part of the hands-on, you will be expected to implement your own environment and eventually train different types of RL agents in that environment. Don't worry, you will have a lot of guidance in the form of pre-defined functions and comments, but the goal is to provide you with enough knowledge to continue experimenting on your own after this session.\n",
    "\n",
    "## Reinforcement learning recap\n",
    "\n",
    "In the case of reinforcement learning, there are some differences in how our agents (in our cases, defined using neural networks), learn from their data. Rather than simply training on a supervised dataset with inputs and targets, the agent learns through trial and error during interaction with an *environment*. The environment supplies the agent with a state, describing the current situation of whatever problem the agent is tasked with solving. This state is given to the agent, which then makes an action affecting the environment and lands in a new state. An evaluation is run whether the action taken and the new state that we landed in was better or worse than the one before, and a *reward* is calculated. This reward describes how good the action was, and both the reward and new state are sent to the agent which then takes another action. This loop continues until the agent reaches some end criterion, which could for example be a number of steps or if the agent reaches a certain state. The goal of the agent during training is to maximize its total cumulative reward, which is often called the *return*. This general process is described in the agent-environment interaction loop.\n",
    "\n",
    "<img src=\"./images/agent-environment.PNG\" alt=\"rf program\" width=\"600\"/>\n",
    "\n",
    "## Defining your environment\n",
    "\n",
    "Before we can train any cool RL agents, we need to define the environment it will interact with. To do this, we will leverage the very widely adopted OpenAI Gym framework https://www.gymlibrary.dev/.\n",
    "\n",
    "## The Gym - implements the agent-environment interaction loop\n",
    "\n",
    "The gym interface is simple, pythonic, and capable of representing general RL problems. It abstracts the interactions between an agent and an environment, and allows separation of the RL algorithm implementations from your custom environments. \n",
    "\n",
    "By defining only a few required functions, a user can create their very own environment to test their agents in, and thanks to the standardized methods other RL-libraries can often be used with these environments without any further changes required. An example library is Stable baselines3, which we will use for their implementations of different RL algorithms.\n",
    "\n",
    "Link to SB3 documentation: https://stable-baselines3.readthedocs.io/en/master/index.html\n",
    "\n",
    "A custom environment is created as a class that inherits the base class <code>gym.Env</code> from the <code>gym</code> package. An example of a skeleton environment is seen in the code cell below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "689e1549",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (889947635.py, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [5]\u001b[1;36m\u001b[0m\n\u001b[1;33m    def __init__(self, arg1, arg2, ...):\u001b[0m\n\u001b[1;37m                                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "### EXAMPLE OF CUSTOM ENVIRONMENT SKELETON CLASS ###\n",
    "\n",
    "import gym\n",
    "from gym import spaces\n",
    "\n",
    "class CustomEnv(gym.Env):\n",
    "  \"\"\"Custom Environment that follows gym interface\"\"\"\n",
    "  metadata = {'render.modes': ['human']}\n",
    "\n",
    "  def __init__(self, arg1, arg2, ...):\n",
    "    super(CustomEnv, self).__init__()\n",
    "    # Define action and observation space\n",
    "    # They must be gym.spaces objects!\n",
    "    \n",
    "    # Example with 2D action of value [-1,1]:\n",
    "    self.action_space = spaces.Box(\n",
    "                                  low=np.array([-1,-1]),\n",
    "                                  high=np.array([1,1]),\n",
    "                                  shape=(2,), dtype=np.float32)\n",
    "    # Example for using a vector of length 2 with values between [-1,1] as input:\n",
    "    self.observation_space = spaces.Box(low=np.array([-1,-1]),\n",
    "                                        high=np.array([1,1]),\n",
    "                                        shape=(2,), dtype=np.float32)\n",
    "\n",
    "  def step(self, action):\n",
    "    \"\"\"\n",
    "    The step function always takes (self, action) as input, and always returns (observation, reward, done, info).\n",
    "    Here, observation will connect to the latest state, reward is the latest returned reward (so a number), done: boolean, info: dictionary with information.\n",
    "    \"\"\"\n",
    "    ...\n",
    "    return observation, reward, done, info\n",
    "  def reset(self):\n",
    "    ...\n",
    "    return observation  # reward, done, info can't be included\n",
    "  def render(self, mode='human'):\n",
    "    ...\n",
    "  def close (self):\n",
    "    ..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9db14ef",
   "metadata": {},
   "source": [
    "In the code above you can see several functions that should be implemented if you want to use the basic gym interface. The minimum required functions are:\n",
    "\n",
    "- **Defining your action/observation space:** this will affect the input and output size of your agents (i.e. change the neural net architectures)\n",
    "- **The step() function:** Defines how your agent takes a step in your environment.\n",
    "- **The reset() function:** Will be called whenever an episode ends before starting the next episode.\n",
    "\n",
    "The render and close functions are not necessary, but can allow you to observe (or render) your environment to allow you to monitor your agents behaviour during training/testing and the close() function is to allow you to close your rendering window should this be required.\n",
    "\n",
    "In addition to these base functions, we will create some more basic helper functions to use inside the base functions to structure our code more nicely, namely:\n",
    "\n",
    "- **_take_action(self, action):** Actually takes the action in the environment and updates the state. - You need to finish implementation!\n",
    "- **_get_state(self):** Get the observable given the current state we are in (evaluated from self.state) - This one is provided already with help from the <code>get_state_from_profile()</code> function above!\n",
    "- **_get_reward(self):** Calculate the reward given the current state. - You need to finish implementation!\n",
    "\n",
    "\n",
    "Once we have all of these functions defined and set up in a class we will be able to train different kinds of RL agents in the same environment without the need to change almost anything. One does however need to make sure that the algorithm you want to use matches the action/observation spaces defined (for example continuous or discrete).\n",
    "\n",
    "## Implementing your environment\n",
    "\n",
    "We will begin by defining each of our important functions in a few assignments below, before finally compiling all of them together into a full environment class at the end.\n",
    "\n",
    "A class with some basic code is provided in the block below with some important functions left out. To ease the work on your side, I have left some helping code for loading simulated datapoints, interpolating them to allow for continuous actions, and initialised a lot of lists to keep track of important data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfc4ff77",
   "metadata": {},
   "source": [
    "## 1.1 The observation/action spaces\n",
    "\n",
    "The first thing we need to define are our observation and action spaces. To conform to the gym standard, these spaces must be of a type present in <code>gym.spaces</code>.\n",
    "\n",
    "For this intial attempt, we will go with both a continous action and observation space. In order to keep the optimization of our agents efficient, we will also be using spaces normalized to be within the range -1,1 in each dimension. For these reasons, we will be using the <code>gym.spaces.Box()</code> type spaces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ffbf72ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "class YourDoubleEnv11(gym.Env):\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    metadata= {'render.modes': ['human']}\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = np.array([_]),# Fill in the _ with your lowest action. Dimensions of array correlate with dimensions of actions.\n",
    "                                high = np.array([_]),# Fill in the _ with your highest action.\n",
    "                                shape=(_,),           # Fill in the _ with the dimensions of your action space.\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([_]), # Fill in the __ with your lowest observations. This correlates to your state description!\n",
    "                                high = np.array([_]),# Fill in the __ with your highest observations.\n",
    "                                shape=(_,),\n",
    "                                dtype=np.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a92df34f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Box([-1. -1. -1.], [1. 1. 1.], (3,), float32)\n",
      "Box([-1.], [1.], (1,), float32)\n",
      "Observation space not as expected.\n",
      "Expected: Box([-1. -1. -1. -1.], [1. 1. 1. 1.], (4,), float32), received Box([-1. -1. -1.], [1. 1. 1.], (3,), float32)\n"
     ]
    }
   ],
   "source": [
    "from utils import test_spaces\n",
    "\n",
    "test_environment = YourDoubleEnv11()\n",
    "print(test_environment.observation_space)\n",
    "print(test_environment.action_space)\n",
    "\n",
    "test_spaces(test_environment.observation_space, test_environment.action_space)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8f620de",
   "metadata": {},
   "source": [
    "With our observation and action spaces defined, we can try to implement our step function. In order to achieve this, we will need to also implement the helper functions, <code>_take_action()</code>, and <code>_get_state()</code> and <code>_get_reward()</code>. \n",
    "\n",
    "## 1.2 Define _take_action() and _get_state() functions.\n",
    "\n",
    "In the cell below you will need to finish the implementation of the <code>_take_action()</code> function. The <code>_get_state()</code> function will also be implemented and then used in the <code>_take_action()</code> function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "02b4ed41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# some self variables that you could use in the real environment class\n",
    "class YourDoubleEnv12(gym.Env):\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    metadata= {'render.modes': ['human']}\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,]),#__, # Fill in the __ with your action settings.\n",
    "                                high = np.array([1,]),#__,\n",
    "                                shape=(1,),\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,-1,-1,-1]), # Fill in the __ with your observation settings.\n",
    "                                high = np.array([1,1,1,1]),\n",
    "                                shape=(4,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Stop criteria (constituting \"good\" splittings with provided difference estimate).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "    def __init__(self,\n",
    "                max_steps = 100,\n",
    "                max_step_size = 20,\n",
    "                min_setting = -45,\n",
    "                max_setting = 45,):\n",
    "        \n",
    "        ### Assign hyperparameter settings to attributes\n",
    "        self.max_steps = max_steps\n",
    "        self.max_step_size = max_step_size\n",
    "        self.min_setting = min_setting\n",
    "        self.max_setting = max_setting\n",
    "        \n",
    "        ### Status of the iterations\n",
    "        # Steps, initializing lists to store actions/states/rewards...\n",
    "        self.counter = 0\n",
    "        self.curr_step = -1  ## Not used ?\n",
    "        self.phase_correction = 0\n",
    "        self.phase_set = 0\n",
    "\n",
    "        # Initialize lists for tracking episodes\n",
    "        self.curr_episode = -1\n",
    "        self.action_episode_memory = []\n",
    "        self.diff_estimate_memory = []\n",
    "        self.state_memory = []\n",
    "        self.phase_set_memory = []\n",
    "        self.reward_memory = []\n",
    "        self.is_finalized = False\n",
    "    \n",
    "\n",
    "    def _take_action(self, action):\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \n",
    "        Args:\n",
    "            action (ndarray): n-dimensional action. Datatype, dimension, and value ranges defined in self.action_space.\n",
    "        \"\"\"\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "\n",
    "        converted_action = action*self.max_step_size # Convert your action from your normalized range [-1,1] back into degrees using self.max_step_size. HINT: action*self.max_step_size = what?\n",
    "        self.phase_correction += converted_action # Phase correction tracks previous actions taken to get the cumulative change from start.\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\n",
    "        self.phase_set += converted_action\n",
    "\n",
    "        # Update the self.state parameter with the new state. The preprovided self._get_state() will provide you with a state based on the current self.phase_set attribute value.\n",
    "        # The state will consist of a vector of 4 values: [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2].\n",
    "        self.state = self._get_state()\n",
    "\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################  \n",
    "        curr_state = self.state.copy()\n",
    "        curr_phase_set = np.copy(self.phase_set)\n",
    "        self.action_episode_memory[self.curr_episode].append(action)\n",
    "        self.state_memory[self.curr_episode].append(curr_state)\n",
    "        self.phase_set_memory[self.curr_episode].append(curr_phase_set)\n",
    "        \n",
    "        self.counter += 1\n",
    "\n",
    "     \n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set. This function is provided completed to help you collect datapoints from the pre-simulated dataset.\n",
    "        The data_class class is written to provide datapoints from a quadsplit dataset, but by always providing h84=0 we only vary the first phase\n",
    "        offset.\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "        \n",
    "        ### Check whether we are within simulated settings\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code below!!\n",
    "            #########################################################################################################################\n",
    "            \n",
    "            # You want to collect a profile corresponding to the current self.phase_set, and then calculate the state description.\n",
    "            profile = data_class.get_interpolated_profile(self.phase_set) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            state = get_state_from_profile(profile)\n",
    "            \n",
    "            # Hint: Remember the help functions for getting a profile from the dataset and turning a profile into a state.\n",
    "\n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code above!!\n",
    "            ################################################################################################################################################################\n",
    "\n",
    "        return state.astype(np.float32)\n",
    "\n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over a training episode.\n",
    "        This function will be called everytime an episode is started\n",
    "        to provide an initial state.\n",
    "        \n",
    "        Returns:\n",
    "            state: The inital state of the environment. Should match the shape defined in observation_space.\n",
    "        \"\"\"\n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False # This tracks wether an episode is complete or not.\n",
    "        \n",
    "        #print(f'Resetting for episode {self.curr_episode}')\n",
    "\n",
    "        # Initializing episode lists to track data for individual episodes. Some used for rendering.\n",
    "        self.action_episode_memory.append([])\n",
    "        self.state_memory.append([])\n",
    "        self.phase_set_memory.append([])\n",
    "        self.reward_memory.append([])\n",
    "        self.diff_estimate_memory.append([])\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        # Getting initial state\n",
    "        \n",
    "        # Initialize random starting phase_set within [self.min_setting, self.max_setting], for example using random.uniform(min,max)\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state() # call _get_state to get the initial state from the starting phase_set.\n",
    "        state = self.state\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "\n",
    "        \n",
    "        return state.astype(np.float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bca12f6",
   "metadata": {},
   "source": [
    "Let's now test your <code>_take_action</code> method below...\n",
    "\n",
    "The environment above will be initialized, reset to a starting setting using the provided reset() function, and then checked to make sure that the <code>_take_action</code> function updates the <code>self.phase_set</code> attribute.\n",
    "\n",
    "Two plots of the initial and final states will also be produced, check that these are different to make sure you also actually update the <code>self.state</code> attribute!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "6977ba41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial phase_setting: 42.645240386066234\n",
      "Final phase_setting after taking 10 degree action: 52.645240386066234\n",
      " _take_action updated self.phase_set correctly. Good job!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1ba03fa5490>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_environment = YourDoubleEnv12()\n",
    "test_environment.reset() # Reset env to a random starting phase_setting\n",
    "\n",
    "init_phase = test_environment.phase_set\n",
    "init_state = test_environment.state\n",
    "\n",
    "print(f'Initial phase_setting: {init_phase}')\n",
    "\n",
    "phase_action = 10\n",
    "normalized_action = phase_action/test_environment.max_step_size # Convert a 10 degree step into normalized action.\n",
    "test_environment._take_action(normalized_action)\n",
    "\n",
    "final_phase = test_environment.phase_set\n",
    "final_state = test_environment.state\n",
    "\n",
    "print(f'Final phase_setting after taking {phase_action} degree action: {test_environment.phase_set}')\n",
    "\n",
    "assert test_environment.phase_set == init_phase+phase_action\n",
    "print(' _take_action updated self.phase_set correctly. Good job!')\n",
    "\n",
    "plt.figure()\n",
    "ax1 = plt.subplot(121)\n",
    "plt.title(f'Initial state, phase {init_phase:.2f}')\n",
    "plt.plot(init_state[:2], 'o-', label = 'Rel. bunch lengths')\n",
    "plt.plot(init_state[2:], 'o-', label = 'Rel. bunch intensities')\n",
    "plt.legend()\n",
    "ax2 = plt.subplot(122, sharey=ax1)\n",
    "plt.title(f'Final state, phase {final_phase:.2f}')\n",
    "plt.plot(final_state[:2], 'o-', label = 'Rel. bunch lengths')\n",
    "plt.plot(final_state[2:], 'o-', label = 'Rel. bunch intensities')\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a32240f5",
   "metadata": {},
   "source": [
    "## 1.3 Define _get_reward() function.\n",
    "\n",
    "The <code>_get_reward()</code> function will be called after we have taken an action, to calculate a reward based on the state we ended up in. This is the second function we will need to assemble our <code>step()</code> method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3241eccc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jwulff\\Anaconda3\\envs\\CERN1\\lib\\site-packages\\gym\\spaces\\box.py:73: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n",
      "  logger.warn(\n"
     ]
    }
   ],
   "source": [
    "# some self variables that you could use in the real environment class\n",
    "class YourDoubleEnv13(gym.Env):\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    metadata= {'render.modes': ['human']}\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,]),#__, # Fill in the __ with your action settings.\n",
    "                                high = np.array([1,]),#__,\n",
    "                                shape=(1,),\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,-1,-1,-1]), # Fill in the __ with your observation settings.\n",
    "                                high = np.array([1,1,1,1]),\n",
    "                                shape=(4,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Stop criteria (constituting \"good\" splittings with provided difference estimate).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "    def __init__(self,\n",
    "                max_steps = 100,\n",
    "                max_step_size = 20,\n",
    "                min_setting = -45,\n",
    "                max_setting = 45,):\n",
    "        \n",
    "        ### Assign hyperparameter settings to attributes\n",
    "        self.max_steps = max_steps\n",
    "        self.max_step_size = max_step_size\n",
    "        self.min_setting = min_setting\n",
    "        self.max_setting = max_setting\n",
    "        \n",
    "        ### Status of the iterations\n",
    "        # Steps, initializing lists to store actions/states/rewards...\n",
    "        self.counter = 0\n",
    "        self.curr_step = -1  ## Not used ?\n",
    "        self.phase_correction = 0\n",
    "        self.phase_set = 0\n",
    "\n",
    "        # Initialize lists for tracking episodes\n",
    "        self.curr_episode = -1\n",
    "        self.action_episode_memory = []\n",
    "        self.diff_estimate_memory = []\n",
    "        self.state_memory = []\n",
    "        self.phase_set_memory = []\n",
    "        self.reward_memory = []\n",
    "        self.is_finalized = False\n",
    "    \n",
    "\n",
    "    def _take_action(self, action):\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \n",
    "        Args:\n",
    "            action (ndarray): n-dimensional action. Datatype, dimension, and value ranges defined in self.action_space.\n",
    "        \"\"\"\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "\n",
    "        converted_action = action*self.max_step_size # Convert your action from your normalized range [-1,1] back into degrees using self.max_step_size. HINT: action*self.max_step_size = what?\n",
    "        self.phase_correction += converted_action # Phase correction tracks previous actions taken to get the cumulative change from start.\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\n",
    "        self.phase_set += converted_action\n",
    "\n",
    "        # Update the self.state parameter with the new state. The preprovided self._get_state() will provide you with a state based on the current self.phase_set attribute value.\n",
    "        # The state will consist of a vector of 4 values: [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2].\n",
    "        self.state = self._get_state()\n",
    "\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################  \n",
    "        curr_state = self.state.copy()\n",
    "        curr_phase_set = np.copy(self.phase_set)\n",
    "        self.action_episode_memory[self.curr_episode].append(action)\n",
    "        self.state_memory[self.curr_episode].append(curr_state)\n",
    "        self.phase_set_memory[self.curr_episode].append(curr_phase_set)\n",
    "        \n",
    "        self.counter += 1\n",
    "\n",
    "     \n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set. This function is provided completed to help you collect datapoints from the pre-simulated dataset.\n",
    "        The data_class class is written to provide datapoints from a quadsplit dataset, but by always providing h84=0 we only vary the first phase\n",
    "        offset.\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "        \n",
    "        ### Check whether we are within simulated settings\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code below!!\n",
    "            #########################################################################################################################\n",
    "            \n",
    "            # You want to collect a profile corresponding to the current self.phase_set, and then calculate the state description.\n",
    "            profile = data_class.get_interpolated_profile(self.phase_set) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            state = get_state_from_profile(profile)\n",
    "            \n",
    "            # Hint: Remember the help functions for getting a profile from the dataset and turning a profile into a state.\n",
    "\n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code above!!\n",
    "            ################################################################################################################################################################\n",
    "\n",
    "        return state.astype(np.float32)\n",
    "    \n",
    "    def _get_reward(self):\n",
    "        \"\"\" Evaluating the reward from the observable/state. \n",
    "            The example reward 'simple_profile' is provided, and is based on the final profile\n",
    "            after the splitting. This is using more information than just the state provided\n",
    "            to the agent.\n",
    "\n",
    "            Feel free to experiment and design your own reward as well! \n",
    "\n",
    "        Returns:\n",
    "            float: The reward based on the current state. \n",
    "        \"\"\" \n",
    "        \n",
    "        # The shape of your observable should match your optimization_space. For this excercise, it is expected\n",
    "        # that you use an observation space of a vector with four values\n",
    "        observable = self.state\n",
    "\n",
    "        diff_estimate = get_diff_estimate_from_state(observable)\n",
    "        self.diff_estimate = diff_estimate\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \"\"\" \n",
    "         Define your own reward here. The diff_estimate provided above is provided \n",
    "         as a simple way to define the difference between your bunches length/intensity \n",
    "         after the splitting. You want this to be as small as possible, so a better reward\n",
    "         should be given for a smaller diff_estimate. There is already a pre-defined\n",
    "         criterion for the diff_estimate to be considered a \"good\" splitting provided in\n",
    "         the BUNCH_LENGTH_INT_CRITERIA attribute. \n",
    "         \"\"\"\n",
    "\n",
    "        reward = -diff_estimate #______ # Define your own reward here!! \n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        ### Tracking of diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        curr_diff_estimate = self.diff_estimate.copy()\n",
    "        self.diff_estimate_memory[self.curr_episode].append(curr_diff_estimate)\n",
    "        self.reward_memory[self.curr_episode].append(reward)\n",
    "            \n",
    "        return reward\n",
    "    \n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over a training episode.\n",
    "        This function will be called everytime an episode is started\n",
    "        to provide an initial state.\n",
    "        \n",
    "        Returns:\n",
    "            state: The inital state of the environment. Should match the shape defined in observation_space.\n",
    "        \"\"\"\n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False # This tracks wether an episode is complete or not.\n",
    "        \n",
    "        #print(f'Resetting for episode {self.curr_episode}')\n",
    "\n",
    "        # Initializing episode lists to track data for individual episodes. Some used for rendering.\n",
    "        self.action_episode_memory.append([])\n",
    "        self.state_memory.append([])\n",
    "        self.phase_set_memory.append([])\n",
    "        self.reward_memory.append([])\n",
    "        self.diff_estimate_memory.append([])\n",
    "        \n",
    "        \n",
    "        # Getting initial state\n",
    "        \n",
    "        # Initialize random starting phase_set within [self.min_setting, self.max_setting], for example using random.uniform(min,max)\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state() # call _get_state to get the initial state from the starting phase_set.\n",
    "        state = self.state\n",
    "        \n",
    "        return state.astype(np.float32)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90be4668",
   "metadata": {},
   "source": [
    "Testing the <code>_get_reward</code> function..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "528ec338",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1ba0588d640>]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_environment = YourDoubleEnv13()\n",
    "\n",
    "# Set the environment to different states in our observation space, and check the value of the reward.\n",
    "# We will also plot our difference estimate, to see that our reward are reasonable in relation to our\n",
    "# bunch characteristics.\n",
    "\n",
    "phases = np.linspace(-45,45,361)\n",
    "rewards = []\n",
    "diff_estimates = []\n",
    "\n",
    "for phase in phases:\n",
    "    test_environment.reset() # Initialize \n",
    "    test_environment.phase_set = phase # manually change phase setting\n",
    "    test_environment.state = test_environment._get_state() # Manually update the state based on current self.phase_set\n",
    "    reward = test_environment._get_reward() # Manually calculate reward based on current self.state\n",
    "    \n",
    "    rewards.append(reward)\n",
    "    diff_estimates.append(test_environment.diff_estimate) # Also track difference estimates for visited states.\n",
    "\n",
    "# Plotting\n",
    "\n",
    "plt.figure()\n",
    "plt.title('Rewards given at different phase offsets')\n",
    "plt.plot(rewards)\n",
    "plt.figure()\n",
    "plt.title('Diff estimates at different phase offsets')\n",
    "plt.plot(diff_estimates)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a181bb",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "Assuming you are happy with your reward shape, you are now ready to assemble the main function of your environment: the <code>step()</code> function.\n",
    "\n",
    "## 1.4 Define the step() function\n",
    "\n",
    "We will define the <code>step()</code> function with the helper functions defined in 1.2-1.3. Both the input and the output of the function are pre-defined according to the <code>gym</code> standard.\n",
    "\n",
    "- **Input**: self (the class object and its attributes), action (the action you want to take in the environment).\n",
    "- **Output**: 4-tuple of state, reward, is_finalized, info\n",
    "    - **state**: the end state after taking a step\n",
    "    - **reward**: the reward given after taking the step and landning in state\n",
    "    - **is_finalized**: boolean that is true if the state is terminal, false otherwise.\n",
    "    - **info**: dictionary where it is possible to return any extra information you may be interested in (e.g. for debugging, plotting...)\n",
    "    \n",
    "Below you will find a class where a skeleton for the <code>step()</code> function is given. It uses the functions and spaces from excercises 1.1-1.3, so copy them down into their corresponding locations.\n",
    "    \n",
    "To help you in the implementation, the following pseudocode is provided:\n",
    "\n",
    "<code>def step(self, action):</code>\n",
    "    \n",
    "1. Take action *action*\n",
    "2. Get the reward given by following *state*.\n",
    "3. Check exit criterions\n",
    "    \n",
    "    3.1 Is the self.diff_estimate < BUNCH_LENGTH_INT_CRITERIA?\n",
    "        Yes: Episode is_finalized = True, success = True.\n",
    "        No: pass\n",
    "    \n",
    "    3.2 Are our number_of_steps > max_steps?\n",
    "        Yes: Episode is_finalized = True, success = False.\n",
    "        No: pass\n",
    "\n",
    "return state, reward, is_finalized, info\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "469d5a56",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jwulff\\Anaconda3\\envs\\CERN1\\lib\\site-packages\\gym\\spaces\\box.py:73: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n",
      "  logger.warn(\n"
     ]
    }
   ],
   "source": [
    "# some self variables that you could use in the real environment class\n",
    "class YourDoubleEnv(gym.Env):\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    metadata= {'render.modes': ['human']}\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,]),#__, # Fill in the __ with your action settings.\n",
    "                                high = np.array([1,]),#__,\n",
    "                                shape=(1,),\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,-1,-1,-1]), # Fill in the __ with your observation settings.\n",
    "                                high = np.array([1,1,1,1]),\n",
    "                                shape=(4,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Stop criteria (constituting \"good\" splittings with provided difference estimate).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "    def __init__(self,\n",
    "                max_steps = 100,\n",
    "                max_step_size = 20,\n",
    "                min_setting = -45,\n",
    "                max_setting = 45,):\n",
    "        \n",
    "        ### Assign hyperparameter settings to attributes\n",
    "        self.max_steps = max_steps\n",
    "        self.max_step_size = max_step_size\n",
    "        self.min_setting = min_setting\n",
    "        self.max_setting = max_setting\n",
    "        \n",
    "        ### Status of the iterations\n",
    "        # Steps, initializing lists to store actions/states/rewards...\n",
    "        \n",
    "        self.counter = 0 # Counts the number of steps taken in the environment!\n",
    "        self.curr_step = -1  ## Not used ?\n",
    "        self.phase_correction = 0\n",
    "\n",
    "        # Initialize lists for tracking episodes\n",
    "        self.curr_episode = -1\n",
    "        self.action_episode_memory = []\n",
    "        self.diff_estimate_memory = []\n",
    "        self.state_memory = []\n",
    "        self.phase_set_memory = []\n",
    "        self.reward_memory = []\n",
    "        self.is_finalized = False\n",
    "    \n",
    "    def step(self, action):\n",
    "        \"\"\"\n",
    "        One step/action in the environment, returning the observable\n",
    "        and reward. \n",
    "\n",
    "        Stopping conditions: max_steps reached, or splitting good enough.\n",
    "        \"\"\"\n",
    "        success = False    \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        # Hint: Number of steps taken in environment is tracked in self.counter\n",
    "        \n",
    "        \n",
    "        self._take_action(action) # Actually take action: Define your _take_action function below!! \n",
    "        reward = self._get_reward() # Get your reward: Define your _get_reward function below!! Returns a reward value.\n",
    "        \n",
    "        state = self.state\n",
    "        ### Check exit criteria: Achieved good enough state, or taken too many steps.\n",
    "        ### BUNCH_LENGHT_INT_CRITERIA based on the given diff_estimate value.\n",
    "        \n",
    "        if abs(self.diff_estimate) < self.BUNCH_LENGTH_INT_CRITERIA: # Check if the diff_estimate is below criterion. If so, episode finalized and a success!\n",
    "            self.is_finalized = True \n",
    "            success = True\n",
    "        # print(self.counter)    \n",
    "        if self.counter >= self.max_steps: # Check if you have exceeded the maximum step limit. If so, episode finalized but not a success...\n",
    "            self.is_finalized = True\n",
    "\n",
    "        # Here you can add any extra info you would like to be returned on each step, e.g. episode steps, rewards, actions etc.\n",
    "        info = {'success': success, 'steps': self.counter, 'profile': self.profile} \n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        \n",
    "        return state, reward.astype(np.float64), self.is_finalized, info # Standardized output according to gym framework.\n",
    "\n",
    "    def _take_action(self, action):\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \n",
    "        Args:\n",
    "            action (ndarray): n-dimensional action. Datatype, dimension, and value ranges defined in self.action_space.\n",
    "        \"\"\"\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "\n",
    "        converted_action = action*self.max_step_size # Convert your action from your normalized range [-1,1] back into degrees using self.max_step_size. HINT: action*self.max_step_size = what?\n",
    "        self.phase_correction += converted_action # Phase correction tracks previous actions taken to get the cumulative change from start.\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\n",
    "        self.phase_set += converted_action\n",
    "\n",
    "        # Update the self.state parameter with the new state. The preprovided self._get_state() will provide you with a state based on the current self.phase_set attribute value.\n",
    "        # The state will consist of a vector of 4 values: [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2].\n",
    "        self.state = self._get_state()\n",
    "\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################  \n",
    "        curr_state = self.state.copy()\n",
    "        curr_phase_set = self.phase_set.copy()\n",
    "        self.action_episode_memory.append(action)\n",
    "        self.state_memory.append(curr_state)\n",
    "        self.phase_set_memory.append(curr_phase_set)\n",
    "        \n",
    "        self.counter += 1\n",
    "\n",
    "     \n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set. This function is provided completed to help you collect datapoints from the pre-simulated dataset.\n",
    "        The data_class class is written to provide datapoints from a quadsplit dataset, but by always providing h84=0 we only vary the first phase\n",
    "        offset.\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "        \n",
    "        ### Check whether we are within simulated settings\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code below!!\n",
    "            #########################################################################################################################\n",
    "            \n",
    "            # Collecting the simulated datapoint, calculating state description\n",
    "            profile = data_class.get_interpolated_profile(self.phase_set) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            state = get_state_from_profile(profile)\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code above!!\n",
    "            ################################################################################################################################################################\n",
    "        \n",
    "            self.profile = profile # Add a tracking of the profile for plotting purposes!\n",
    "        return state.astype(np.float32)\n",
    "    \n",
    "    def _get_reward(self):\n",
    "        \"\"\" Evaluating the reward from the observable/state. \n",
    "            The example reward 'simple_profile' is provided, and is based on the final profile\n",
    "            after the splitting. This is using more information than just the state provided\n",
    "            to the agent.\n",
    "\n",
    "            Feel free to experiment and design your own reward as well! \n",
    "\n",
    "        Returns:\n",
    "            float: The reward based on the current state. \n",
    "        \"\"\" \n",
    "        \n",
    "        \n",
    "        \n",
    "        # The shape of your observable should match your optimization_space. For this excercise, it is expected\n",
    "        # that you use an observation space of a vector with four values\n",
    "        observable = self.state\n",
    "\n",
    "        diff_estimate = get_diff_estimate_from_state(observable)\n",
    "        self.diff_estimate = diff_estimate\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \"\"\" \n",
    "         Define your own reward here. The diff_estimate provided above is provided \n",
    "         as a simple way to define the difference between your bunches length/intensity \n",
    "         after the splitting. You want this to be as small as possible, so a better reward\n",
    "         should be given for a smaller diff_estimate. There is already a pre-defined\n",
    "         criterion for the diff_estimate to be considered a \"good\" splitting provided in\n",
    "         the BUNCH_LENGTH_INT_CRITERIA attribute. \n",
    "         \"\"\"\n",
    "\n",
    "        reward = -diff_estimate #______ # Define your own reward here!! \n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        ### Tracking of diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        curr_diff_estimate = self.diff_estimate.copy()\n",
    "        self.diff_estimate_memory.append(curr_diff_estimate)\n",
    "        self.reward_memory.append(reward)\n",
    "            \n",
    "        return reward\n",
    "       \n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over a training episode.\n",
    "        This function will be called everytime an episode is started\n",
    "        to provide an initial state.\n",
    "        \n",
    "        Returns:\n",
    "            state: The inital state of the environment. Should match the shape defined in observation_space.\n",
    "        \"\"\"\n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False # This tracks wether an episode is complete or not.\n",
    "        \n",
    "        #print(f'Resetting for episode {self.curr_episode}')\n",
    "\n",
    "        # Initializing episode lists to track data for individual episodes. Some used for rendering.\n",
    "        self.action_episode_memory = []\n",
    "        self.state_memory= []\n",
    "        self.phase_set_memory= []\n",
    "        self.reward_memory= []\n",
    "        self.diff_estimate_memory= []\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        # Getting initial state\n",
    "        \n",
    "        # Initialize random starting phase_set within [self.min_setting, self.max_setting], for example using random.uniform(min,max)\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state() # call _get_state to get the initial state from the starting phase_set.\n",
    "        state = self.state\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    " \n",
    "        ### Some tracking of state, phase, reward, diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        self.state_memory.append(state)\n",
    "        self.phase_set_memory.append(self.phase_set)\n",
    "        reward = self._get_reward()\n",
    "        self.reward_memory.append(reward)\n",
    "        \n",
    "        return state.astype(np.float32)\n",
    "\n",
    "    def seed(self, seed=None):\n",
    "        \"\"\"\n",
    "        Set the random seed. Useful if you want to standardize trainings.\n",
    "        \"\"\"\n",
    "        \n",
    "        random.seed(seed)\n",
    "        np.random.seed\n",
    "        \n",
    "    def render(self, mode='human'):\n",
    "        \n",
    "        \"\"\"\n",
    "        Rendering function meant to provide a human-readable output. Base function in gym\n",
    "        environments to override. I provide a simple version that should let you observe \n",
    "        your trained agent during evaluation.\n",
    "        \"\"\"\n",
    "        plt.figure('Agent')\n",
    "        plt.clf()\n",
    "        plt.subplot(131)\n",
    "        plt.suptitle(f'Episode {self.curr_episode}')\n",
    "        plt.title('Current profile')\n",
    "        plt.plot(self.profile,'b')\n",
    "        plt.subplot(132)\n",
    "        plt.title('Difference estimate')\n",
    "        plt.plot(self.diff_estimate_memory, 'o-')\n",
    "        plt.axhline(y=self.BUNCH_LENGTH_INT_CRITERIA, color='k', linestyle='--')\n",
    "        plt.subplot(133)\n",
    "        plt.title('h42 phase offset')\n",
    "        plt.plot(np.asarray(self.phase_set_memory, dtype=object), 'go-')\n",
    "        plt.axhline(y=0, color='k', linestyle='--')\n",
    "        plt.ylim((-30,30))\n",
    "        \n",
    "        #plot_finish(fig=fig, axes=axes, xlabel='Setting', ylabel='Observable')\n",
    "        plt.pause(0.2)\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4322c7cf",
   "metadata": {},
   "source": [
    "With the environment above completed and implemented, our environment is complete! As a final test, we can use an environment checker provided by stable-baselines3 to check whether our environment truly follows the standards of gym and SB3.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "3f1f3c0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check env succesful!\n"
     ]
    }
   ],
   "source": [
    "from stable_baselines3.common.env_checker import check_env\n",
    "env = YourDoubleEnv()\n",
    "\n",
    "result = check_env(env)\n",
    "\n",
    "if result==None:\n",
    "    print(f'Check env succesful!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ec9d2b2",
   "metadata": {},
   "source": [
    "# Part 2: Training RL-agents in your environment\n",
    "\n",
    "## 2.1 Soft Actor Critic\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "c5ef9998",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cpu device\n",
      "Wrapping the env with a `Monitor` wrapper\n",
      "Wrapping the env in a DummyVecEnv.\n",
      "Starting training...\n",
      "Logging to ./hands-on_rl_tensorboard\\hands_on_rl_34\n",
      "Eval num_timesteps=100, episode_reward=-43.20 +/- 18.11\n",
      "Episode length: 86.60 +/- 23.87\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 86.6     |\n",
      "|    mean_reward     | -43.2    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 100      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 100      |\n",
      "|    ep_rew_mean     | -99.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 1        |\n",
      "|    fps             | 42       |\n",
      "|    time_elapsed    | 2        |\n",
      "|    total_timesteps | 100      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=200, episode_reward=-47.99 +/- 1.68\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -48      |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 200      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.27     |\n",
      "|    critic_loss     | 0.185    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 99       |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 100      |\n",
      "|    ep_rew_mean     | -115     |\n",
      "| time/              |          |\n",
      "|    episodes        | 2        |\n",
      "|    fps             | 23       |\n",
      "|    time_elapsed    | 8        |\n",
      "|    total_timesteps | 200      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 74       |\n",
      "|    ep_rew_mean     | -79.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 3        |\n",
      "|    fps             | 23       |\n",
      "|    time_elapsed    | 9        |\n",
      "|    total_timesteps | 222      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.24     |\n",
      "|    critic_loss     | 0.14     |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 121      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=300, episode_reward=-5.39 +/- 2.55\n",
      "Episode length: 81.20 +/- 37.60\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 81.2     |\n",
      "|    mean_reward     | -5.39    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 300      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.28     |\n",
      "|    critic_loss     | 0.11     |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 199      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 80.5     |\n",
      "|    ep_rew_mean     | -69.4    |\n",
      "| time/              |          |\n",
      "|    episodes        | 4        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 15       |\n",
      "|    total_timesteps | 322      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.3      |\n",
      "|    critic_loss     | 0.109    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 221      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 65       |\n",
      "|    ep_rew_mean     | -55.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 5        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 15       |\n",
      "|    total_timesteps | 325      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.29     |\n",
      "|    critic_loss     | 0.0935   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 224      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=400, episode_reward=-2.22 +/- 3.08\n",
      "Episode length: 22.20 +/- 38.90\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 22.2     |\n",
      "|    mean_reward     | -2.22    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 400      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.25     |\n",
      "|    critic_loss     | 0.124    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 299      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 70.2     |\n",
      "|    ep_rew_mean     | -50.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 6        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 19       |\n",
      "|    total_timesteps | 421      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.28     |\n",
      "|    critic_loss     | 0.124    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 320      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 69.3     |\n",
      "|    ep_rew_mean     | -45.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 7        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 22       |\n",
      "|    total_timesteps | 485      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.34     |\n",
      "|    critic_loss     | 0.103    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 384      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=500, episode_reward=-0.87 +/- 0.48\n",
      "Episode length: 6.40 +/- 1.02\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 6.4      |\n",
      "|    mean_reward     | -0.868   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 500      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.28     |\n",
      "|    critic_loss     | 0.122    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 399      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 62.6     |\n",
      "|    ep_rew_mean     | -40      |\n",
      "| time/              |          |\n",
      "|    episodes        | 8        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 23       |\n",
      "|    total_timesteps | 501      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.35     |\n",
      "|    critic_loss     | 0.0978   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 400      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 56       |\n",
      "|    ep_rew_mean     | -35.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 9        |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 23       |\n",
      "|    total_timesteps | 504      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.36     |\n",
      "|    critic_loss     | 0.13     |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 403      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 52.6     |\n",
      "|    ep_rew_mean     | -32.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 10       |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 24       |\n",
      "|    total_timesteps | 526      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.33     |\n",
      "|    critic_loss     | 0.151    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 425      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 52.3     |\n",
      "|    ep_rew_mean     | -30.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 11       |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 27       |\n",
      "|    total_timesteps | 575      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.32     |\n",
      "|    critic_loss     | 0.129    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 474      |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eval num_timesteps=600, episode_reward=-0.91 +/- 1.21\n",
      "Episode length: 22.40 +/- 38.81\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 22.4     |\n",
      "|    mean_reward     | -0.907   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 600      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.38     |\n",
      "|    critic_loss     | 0.0681   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 499      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 54.2     |\n",
      "|    ep_rew_mean     | -29.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 12       |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 30       |\n",
      "|    total_timesteps | 651      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.37     |\n",
      "|    critic_loss     | 0.116    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 550      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 50.2     |\n",
      "|    ep_rew_mean     | -26.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 13       |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 30       |\n",
      "|    total_timesteps | 653      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.32     |\n",
      "|    critic_loss     | 0.135    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 552      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 47.8     |\n",
      "|    ep_rew_mean     | -25.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 14       |\n",
      "|    fps             | 21       |\n",
      "|    time_elapsed    | 31       |\n",
      "|    total_timesteps | 669      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.33     |\n",
      "|    critic_loss     | 0.0804   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 568      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=700, episode_reward=-3.21 +/- 1.62\n",
      "Episode length: 80.20 +/- 39.60\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 80.2     |\n",
      "|    mean_reward     | -3.21    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 700      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.39     |\n",
      "|    critic_loss     | 0.164    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 599      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 48.6     |\n",
      "|    ep_rew_mean     | -24.2    |\n",
      "| time/              |          |\n",
      "|    episodes        | 15       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 35       |\n",
      "|    total_timesteps | 729      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.36     |\n",
      "|    critic_loss     | 0.137    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 628      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 46.4     |\n",
      "|    ep_rew_mean     | -22.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 16       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 35       |\n",
      "|    total_timesteps | 742      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.34     |\n",
      "|    critic_loss     | 0.144    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 641      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=800, episode_reward=-0.28 +/- 0.28\n",
      "Episode length: 2.80 +/- 0.40\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 2.8      |\n",
      "|    mean_reward     | -0.279   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 800      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.34     |\n",
      "|    critic_loss     | 0.0853   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 699      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 47.9     |\n",
      "|    ep_rew_mean     | -22.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 17       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 39       |\n",
      "|    total_timesteps | 815      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.31     |\n",
      "|    critic_loss     | 0.0783   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 714      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 47.4     |\n",
      "|    ep_rew_mean     | -21.4    |\n",
      "| time/              |          |\n",
      "|    episodes        | 18       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 40       |\n",
      "|    total_timesteps | 854      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.44     |\n",
      "|    critic_loss     | 0.14     |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 753      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 45.1     |\n",
      "|    ep_rew_mean     | -20.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 19       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 40       |\n",
      "|    total_timesteps | 856      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.43     |\n",
      "|    critic_loss     | 0.187    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 755      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=900, episode_reward=-2.47 +/- 1.64\n",
      "Episode length: 61.00 +/- 47.77\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 61       |\n",
      "|    mean_reward     | -2.47    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 900      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.44     |\n",
      "|    critic_loss     | 0.183    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 799      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 45.5     |\n",
      "|    ep_rew_mean     | -19.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 20       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 44       |\n",
      "|    total_timesteps | 911      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.56     |\n",
      "|    critic_loss     | 0.233    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 810      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 44.2     |\n",
      "|    ep_rew_mean     | -19.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 21       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 45       |\n",
      "|    total_timesteps | 928      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.42     |\n",
      "|    critic_loss     | 0.0931   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 827      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 42.3     |\n",
      "|    ep_rew_mean     | -18.2    |\n",
      "| time/              |          |\n",
      "|    episodes        | 22       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 45       |\n",
      "|    total_timesteps | 930      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.43     |\n",
      "|    critic_loss     | 0.15     |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 829      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 42       |\n",
      "|    ep_rew_mean     | -17.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 23       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 47       |\n",
      "|    total_timesteps | 966      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.47     |\n",
      "|    critic_loss     | 0.177    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 865      |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 41.3     |\n",
      "|    ep_rew_mean     | -17.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 24       |\n",
      "|    fps             | 20       |\n",
      "|    time_elapsed    | 48       |\n",
      "|    total_timesteps | 991      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.42     |\n",
      "|    critic_loss     | 0.182    |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 890      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=1000, episode_reward=-0.56 +/- 0.35\n",
      "Episode length: 3.20 +/- 1.17\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 3.2      |\n",
      "|    mean_reward     | -0.555   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 1000     |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.46     |\n",
      "|    critic_loss     | 0.0726   |\n",
      "|    ent_coef        | 0.2      |\n",
      "|    learning_rate   | 0.0003   |\n",
      "|    n_updates       | 899      |\n",
      "---------------------------------\n",
      "Completed training\n"
     ]
    }
   ],
   "source": [
    "# Train a model\n",
    "from stable_baselines3 import SAC\n",
    "from stable_baselines3.common.callbacks import CheckpointCallback\n",
    "from stable_baselines3.common.callbacks import EvalCallback, StopTrainingOnRewardThreshold\n",
    "\n",
    "\n",
    "# Separate evaluation env\n",
    "eval_env = YourDoubleEnv()\n",
    "\n",
    "# Use deterministic actions for evaluation\n",
    "eval_callback = EvalCallback(eval_env,  best_model_save_path='./RL_logs/SAC',\n",
    "    log_path='./RL_logs/', eval_freq=100,\n",
    "    deterministic=True, render=False)\n",
    "\n",
    "\n",
    "env = YourDoubleEnv()\n",
    "\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "env.seed(seed)\n",
    "log_dir = './'\n",
    "\n",
    "\n",
    "ent_coef = 1/5#'auto' # Hyperparameter of SAC, with 'auto' it is also learned during training.\n",
    "\n",
    "# Define your model\n",
    "sac_model = SAC(\"MlpPolicy\", env, verbose=1, ent_coef=ent_coef, learning_starts=100, tensorboard_log=\"./hands-on_rl_tensorboard\")\n",
    "print(\"Starting training...\")\n",
    "sac_model.learn(total_timesteps=1000, callback=eval_callback, log_interval=1, tb_log_name=\"hands_on_rl\")\n",
    "sac_model.save('./saved_models/RL_agent')\n",
    "print(\"Completed training\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92abdf5c",
   "metadata": {},
   "source": [
    "**Monitoring training through Tensorboard**\n",
    "\n",
    "If you want to track the training above and also see the loss curves of your model, you can use Tensorboard. In a normal jupyter notebook you should be able to run tensorboard directly using \n",
    "\n",
    "<code>\n",
    "    %load_ext tensorboard\n",
    "    %tensorboard --logdir ./RL_logs\n",
    "</code>\n",
    "\n",
    "You may need to run the command <code>%reload_ext tensorboard</code> occasionally to update the tensorboard data.\n",
    "\n",
    "I recommend you try this after training to be able to see interesting metrics of your agent and how they evolve with training!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "810cfb77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Reusing TensorBoard on port 6006 (pid 16344), started 2 days, 20:51:14 ago. (Use '!kill 16344' to kill it.)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "      <iframe id=\"tensorboard-frame-76c32dcda74068b2\" width=\"100%\" height=\"800\" frameborder=\"0\">\n",
       "      </iframe>\n",
       "      <script>\n",
       "        (function() {\n",
       "          const frame = document.getElementById(\"tensorboard-frame-76c32dcda74068b2\");\n",
       "          const url = new URL(\"/\", window.location);\n",
       "          const port = 6006;\n",
       "          if (port) {\n",
       "            url.port = port;\n",
       "          }\n",
       "          frame.src = url;\n",
       "        })();\n",
       "      </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#%load_ext tensorboard\n",
    "%reload_ext tensorboard\n",
    "%tensorboard --logdir ./RL_logs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0636b1b1",
   "metadata": {},
   "source": [
    "## Test your trained agent\n",
    "\n",
    "Now you should have a simple agent trained, after taking 1000 steps in the environment. Now let's test it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "2f39b985",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_trained_agent(environment, agent, test_episodes_to_run = 10, render_opt=False):\n",
    "    obs = environment.reset()\n",
    "    performance = [0,0]\n",
    "    steps_per_episode = []\n",
    "    predicted_phase_error_when_done = []\n",
    "    done=False\n",
    "\n",
    "    start_diff_estimates = []\n",
    "    end_diff_estimates = []\n",
    "    initial_profiles = []\n",
    "    final_profiles = []\n",
    "    counter = 0\n",
    "    episode = 0\n",
    "    plt.figure('Agent')\n",
    "    for episode in range(test_episodes_to_run):\n",
    "        done=False\n",
    "        first_step = True\n",
    "        #print(obs)\n",
    "        while not done:\n",
    "            action, _states = model.predict(obs, deterministic=True)\n",
    "            obs, rewards, done, info = test_env.step(action)\n",
    "            if render_opt:\n",
    "                test_env.render() # Use if you want to observe the agent\n",
    "                #display.clear_output(wait=True)\n",
    "                if done:\n",
    "                    time.sleep(1) # allow some time to see complete trajectory before starting next episode.\n",
    "            if done:\n",
    "\n",
    "                print(f\"Took {info['steps']} steps before terminating test\")\n",
    "                steps_per_episode.append(info['steps'])\n",
    "                #print(f\"Info {info}\")\n",
    "                if info['success'] == True:\n",
    "                    performance[0] += 1\n",
    "                else:\n",
    "                    performance[1] += 1\n",
    "\n",
    "                # predicted_phase_error_when_done.append(info['initial_phase'] + info['phase_corr'])\n",
    "                if counter < 5:\n",
    "                    final_profiles.append(info['profile'])\n",
    "                counter += 1\n",
    "                obs = test_env.reset()\n",
    "    print(f\"Succesful optimizations: {performance[0]}\")\n",
    "    print(f\"Unsuccesful optimizations: {performance[1]}\")\n",
    "    print(f\"Accuracy: {performance[0]/(performance[0]+performance[1])*100}%\")\n",
    "    print(f\"Mean episode length: {np.sum(steps_per_episode)/len(steps_per_episode)}\")\n",
    "    print(f\"Max episode length: {np.max(steps_per_episode)}, Min episode length: {np.min(steps_per_episode)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "efdf7f82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 100 steps before terminating test\n",
      "Took 2 steps before terminating test\n",
      "Took 100 steps before terminating test\n",
      "Took 2 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 4 steps before terminating test\n",
      "Took 4 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 100 steps before terminating test\n",
      "Took 5 steps before terminating test\n",
      "Succesful optimizations: 7\n",
      "Unsuccesful optimizations: 3\n",
      "Accuracy: 0.7\n",
      "Mean episode length: 32.3\n",
      "Max episode length: 100, Min episode length: 2\n"
     ]
    }
   ],
   "source": [
    "%matplotlib qt\n",
    "# Reset environment\n",
    "# Create new test env\n",
    "test_env = YourDoubleEnv()\n",
    "\n",
    "\n",
    "test_trained_agent(test_env, sac_model, render_opt = True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70f7f165",
   "metadata": {},
   "source": [
    "## How did your agent work?\n",
    "\n",
    "Did it manage to solve the problem during testing? What if you train the agent for a longer duration? Feel free to experiment with the hyperparameters of your training until you get an SAC-agent you are happy with.\n",
    "\n",
    "Now, to illustrate the utility of the gym framework, we will also train another RL agent using a different algorithm: TD3."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08bd4fb1",
   "metadata": {},
   "source": [
    "## 2.2 Twin Delayed Deep Deterministic Policy Gradient (TD3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "29401bdb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cpu device\n",
      "Wrapping the env with a `Monitor` wrapper\n",
      "Wrapping the env in a DummyVecEnv.\n",
      "Starting training...\n",
      "Logging to ./hands-on_rl_tensorboard\\hands_on_rl_TD3_1\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 29       |\n",
      "|    ep_rew_mean     | -13.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 1        |\n",
      "|    fps             | 332      |\n",
      "|    time_elapsed    | 0        |\n",
      "|    total_timesteps | 29       |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jwulff\\Anaconda3\\envs\\CERN1\\lib\\site-packages\\stable_baselines3\\common\\evaluation.py:65: UserWarning: Evaluation environment is not wrapped with a ``Monitor`` wrapper. This may result in reporting modified episode lengths and rewards, if other wrappers happen to modify these. Consider wrapping environment first with ``Monitor`` wrapper.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eval num_timesteps=100, episode_reward=-62.54 +/- 28.22\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -62.5    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 100      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 64.5     |\n",
      "|    ep_rew_mean     | -89.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 2        |\n",
      "|    fps             | 64       |\n",
      "|    time_elapsed    | 2        |\n",
      "|    total_timesteps | 129      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=200, episode_reward=-150.48 +/- 1.27\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -150     |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 200      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.34     |\n",
      "|    critic_loss     | 0.326    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 100      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 76.3     |\n",
      "|    ep_rew_mean     | -109     |\n",
      "| time/              |          |\n",
      "|    episodes        | 3        |\n",
      "|    fps             | 42       |\n",
      "|    time_elapsed    | 5        |\n",
      "|    total_timesteps | 229      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=300, episode_reward=-35.72 +/- 0.18\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -35.7    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 300      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.35     |\n",
      "|    critic_loss     | 0.278    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 200      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 82.2     |\n",
      "|    ep_rew_mean     | -90.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 4        |\n",
      "|    fps             | 32       |\n",
      "|    time_elapsed    | 10       |\n",
      "|    total_timesteps | 329      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 67.4     |\n",
      "|    ep_rew_mean     | -72.7    |\n",
      "| time/              |          |\n",
      "|    episodes        | 5        |\n",
      "|    fps             | 26       |\n",
      "|    time_elapsed    | 12       |\n",
      "|    total_timesteps | 337      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.17     |\n",
      "|    critic_loss     | 0.113    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 300      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 62.7     |\n",
      "|    ep_rew_mean     | -61.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 6        |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 12       |\n",
      "|    total_timesteps | 376      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.25     |\n",
      "|    critic_loss     | 0.0993   |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 308      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 54.3     |\n",
      "|    ep_rew_mean     | -52.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 7        |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 13       |\n",
      "|    total_timesteps | 380      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.2      |\n",
      "|    critic_loss     | 0.122    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 347      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 49.5     |\n",
      "|    ep_rew_mean     | -46.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 8        |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 13       |\n",
      "|    total_timesteps | 396      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.24     |\n",
      "|    critic_loss     | 0.107    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 351      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=400, episode_reward=-1.41 +/- 2.12\n",
      "Episode length: 22.40 +/- 38.81\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 22.4     |\n",
      "|    mean_reward     | -1.41    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 400      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.21     |\n",
      "|    critic_loss     | 0.151    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 367      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 45.1     |\n",
      "|    ep_rew_mean     | -41.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 9        |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 14       |\n",
      "|    total_timesteps | 406      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 42.9     |\n",
      "|    ep_rew_mean     | -37.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 10       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 15       |\n",
      "|    total_timesteps | 429      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.13     |\n",
      "|    critic_loss     | 0.126    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 377      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 40.9     |\n",
      "|    ep_rew_mean     | -34.4    |\n",
      "| time/              |          |\n",
      "|    episodes        | 11       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 15       |\n",
      "|    total_timesteps | 450      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.14     |\n",
      "|    critic_loss     | 0.125    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 400      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=500, episode_reward=-7.68 +/- 3.83\n",
      "Episode length: 80.20 +/- 39.60\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 80.2     |\n",
      "|    mean_reward     | -7.68    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 500      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.1      |\n",
      "|    critic_loss     | 0.135    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 421      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 43.4     |\n",
      "|    ep_rew_mean     | -32.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 12       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 17       |\n",
      "|    total_timesteps | 521      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 40.6     |\n",
      "|    ep_rew_mean     | -29.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 13       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 19       |\n",
      "|    total_timesteps | 528      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.09     |\n",
      "|    critic_loss     | 0.123    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 492      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 38.4     |\n",
      "|    ep_rew_mean     | -27.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 14       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 19       |\n",
      "|    total_timesteps | 537      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.09     |\n",
      "|    critic_loss     | 0.153    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 499      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 36.1     |\n",
      "|    ep_rew_mean     | -26      |\n",
      "| time/              |          |\n",
      "|    episodes        | 15       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 19       |\n",
      "|    total_timesteps | 541      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.1      |\n",
      "|    critic_loss     | 0.122    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 508      |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 33.9     |\n",
      "|    ep_rew_mean     | -24.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 16       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 19       |\n",
      "|    total_timesteps | 543      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.06     |\n",
      "|    critic_loss     | 0.159    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 512      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 32.9     |\n",
      "|    ep_rew_mean     | -23      |\n",
      "| time/              |          |\n",
      "|    episodes        | 17       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 20       |\n",
      "|    total_timesteps | 560      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.24     |\n",
      "|    critic_loss     | 0.119    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 514      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 32.6     |\n",
      "|    ep_rew_mean     | -21.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 18       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 20       |\n",
      "|    total_timesteps | 586      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.1      |\n",
      "|    critic_loss     | 0.119    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 531      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 30.9     |\n",
      "|    ep_rew_mean     | -20.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 19       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 21       |\n",
      "|    total_timesteps | 588      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.13     |\n",
      "|    critic_loss     | 0.133    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 557      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=600, episode_reward=-1.20 +/- 0.78\n",
      "Episode length: 13.20 +/- 13.24\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 13.2     |\n",
      "|    mean_reward     | -1.2     |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 600      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.18     |\n",
      "|    critic_loss     | 0.165    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 559      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 30.1     |\n",
      "|    ep_rew_mean     | -19.8    |\n",
      "| time/              |          |\n",
      "|    episodes        | 20       |\n",
      "|    fps             | 27       |\n",
      "|    time_elapsed    | 21       |\n",
      "|    total_timesteps | 601      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 30.8     |\n",
      "|    ep_rew_mean     | -19.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 21       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 22       |\n",
      "|    total_timesteps | 646      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.08     |\n",
      "|    critic_loss     | 0.139    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 572      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 29.5     |\n",
      "|    ep_rew_mean     | -18.2    |\n",
      "| time/              |          |\n",
      "|    episodes        | 22       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 23       |\n",
      "|    total_timesteps | 650      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.06     |\n",
      "|    critic_loss     | 0.146    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 617      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 29.6     |\n",
      "|    ep_rew_mean     | -17.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 23       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 23       |\n",
      "|    total_timesteps | 680      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.09     |\n",
      "|    critic_loss     | 0.129    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 621      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 28.6     |\n",
      "|    ep_rew_mean     | -16.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 24       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 23       |\n",
      "|    total_timesteps | 687      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.08     |\n",
      "|    critic_loss     | 0.131    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 651      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 27.7     |\n",
      "|    ep_rew_mean     | -16.2    |\n",
      "| time/              |          |\n",
      "|    episodes        | 25       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 24       |\n",
      "|    total_timesteps | 693      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.03     |\n",
      "|    critic_loss     | 0.166    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 658      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=700, episode_reward=-0.87 +/- 0.59\n",
      "Episode length: 9.40 +/- 4.32\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 9.4      |\n",
      "|    mean_reward     | -0.868   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 700      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.07     |\n",
      "|    critic_loss     | 0.131    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 664      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 26.9     |\n",
      "|    ep_rew_mean     | -15.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 26       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 24       |\n",
      "|    total_timesteps | 700      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 26.3     |\n",
      "|    ep_rew_mean     | -15.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 27       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 24       |\n",
      "|    total_timesteps | 711      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1        |\n",
      "|    critic_loss     | 0.144    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 671      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 25.4     |\n",
      "|    ep_rew_mean     | -14.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 28       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 25       |\n",
      "|    total_timesteps | 712      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.05     |\n",
      "|    critic_loss     | 0.139    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 682      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 26.6     |\n",
      "|    ep_rew_mean     | -14.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 29       |\n",
      "|    fps             | 30       |\n",
      "|    time_elapsed    | 25       |\n",
      "|    total_timesteps | 771      |\n",
      "| train/             |          |\n",
      "|    critic_loss     | 0.0759   |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 683      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 26.5     |\n",
      "|    ep_rew_mean     | -13.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 30       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 26       |\n",
      "|    total_timesteps | 795      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.04     |\n",
      "|    critic_loss     | 0.162    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 742      |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 25.7     |\n",
      "|    ep_rew_mean     | -13.4    |\n",
      "| time/              |          |\n",
      "|    episodes        | 31       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 27       |\n",
      "|    total_timesteps | 798      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.04     |\n",
      "|    critic_loss     | 0.149    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 766      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=800, episode_reward=-0.38 +/- 0.38\n",
      "Episode length: 2.80 +/- 1.17\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 2.8      |\n",
      "|    mean_reward     | -0.377   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 800      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.01     |\n",
      "|    critic_loss     | 0.159    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 769      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 25.1     |\n",
      "|    ep_rew_mean     | -13.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 32       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 27       |\n",
      "|    total_timesteps | 803      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 24.5     |\n",
      "|    ep_rew_mean     | -12.7    |\n",
      "| time/              |          |\n",
      "|    episodes        | 33       |\n",
      "|    fps             | 28       |\n",
      "|    time_elapsed    | 27       |\n",
      "|    total_timesteps | 807      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.04     |\n",
      "|    critic_loss     | 0.107    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 774      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 25.5     |\n",
      "|    ep_rew_mean     | -12.5    |\n",
      "| time/              |          |\n",
      "|    episodes        | 34       |\n",
      "|    fps             | 30       |\n",
      "|    time_elapsed    | 28       |\n",
      "|    total_timesteps | 868      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.12     |\n",
      "|    critic_loss     | 0.135    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 778      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 24.9     |\n",
      "|    ep_rew_mean     | -12.2    |\n",
      "| time/              |          |\n",
      "|    episodes        | 35       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 29       |\n",
      "|    total_timesteps | 870      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.07     |\n",
      "|    critic_loss     | 0.143    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 839      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 24.6     |\n",
      "|    ep_rew_mean     | -11.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 36       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 29       |\n",
      "|    total_timesteps | 886      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.01     |\n",
      "|    critic_loss     | 0.225    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 841      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 24.2     |\n",
      "|    ep_rew_mean     | -11.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 37       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 30       |\n",
      "|    total_timesteps | 897      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1        |\n",
      "|    critic_loss     | 0.171    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 857      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=900, episode_reward=-0.33 +/- 0.36\n",
      "Episode length: 2.00 +/- 0.89\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 2        |\n",
      "|    mean_reward     | -0.325   |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 900      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.03     |\n",
      "|    critic_loss     | 0.141    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 868      |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 23.9     |\n",
      "|    ep_rew_mean     | -11.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 38       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 30       |\n",
      "|    total_timesteps | 908      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 23.6     |\n",
      "|    ep_rew_mean     | -11.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 39       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 31       |\n",
      "|    total_timesteps | 920      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.09     |\n",
      "|    critic_loss     | 0.177    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 879      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 23.3     |\n",
      "|    ep_rew_mean     | -10.9    |\n",
      "| time/              |          |\n",
      "|    episodes        | 40       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 31       |\n",
      "|    total_timesteps | 932      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.02     |\n",
      "|    critic_loss     | 0.179    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 891      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 22.8     |\n",
      "|    ep_rew_mean     | -10.6    |\n",
      "| time/              |          |\n",
      "|    episodes        | 41       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 31       |\n",
      "|    total_timesteps | 933      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.04     |\n",
      "|    critic_loss     | 0.199    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 903      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 22.4     |\n",
      "|    ep_rew_mean     | -10.3    |\n",
      "| time/              |          |\n",
      "|    episodes        | 42       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 32       |\n",
      "|    total_timesteps | 939      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 0.939    |\n",
      "|    critic_loss     | 0.209    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 904      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 22       |\n",
      "|    ep_rew_mean     | -10.1    |\n",
      "| time/              |          |\n",
      "|    episodes        | 43       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 32       |\n",
      "|    total_timesteps | 946      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.11     |\n",
      "|    critic_loss     | 0.192    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 910      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 21.6     |\n",
      "|    ep_rew_mean     | -9.91    |\n",
      "| time/              |          |\n",
      "|    episodes        | 44       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 32       |\n",
      "|    total_timesteps | 950      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 0.958    |\n",
      "|    critic_loss     | 0.177    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 917      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 21.7     |\n",
      "|    ep_rew_mean     | -9.77    |\n",
      "| time/              |          |\n",
      "|    episodes        | 45       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 32       |\n",
      "|    total_timesteps | 976      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.03     |\n",
      "|    critic_loss     | 0.113    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 921      |\n",
      "---------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 21.3     |\n",
      "|    ep_rew_mean     | -9.58    |\n",
      "| time/              |          |\n",
      "|    episodes        | 46       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 33       |\n",
      "|    total_timesteps | 981      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.06     |\n",
      "|    critic_loss     | 0.167    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 947      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 21       |\n",
      "|    ep_rew_mean     | -9.39    |\n",
      "| time/              |          |\n",
      "|    episodes        | 47       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 33       |\n",
      "|    total_timesteps | 988      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.09     |\n",
      "|    critic_loss     | 0.189    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 952      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 20.7     |\n",
      "|    ep_rew_mean     | -9.21    |\n",
      "| time/              |          |\n",
      "|    episodes        | 48       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 33       |\n",
      "|    total_timesteps | 992      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1.01     |\n",
      "|    critic_loss     | 0.164    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 959      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 20.3     |\n",
      "|    ep_rew_mean     | -9.03    |\n",
      "| time/              |          |\n",
      "|    episodes        | 49       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 33       |\n",
      "|    total_timesteps | 995      |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 1        |\n",
      "|    critic_loss     | 0.124    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 963      |\n",
      "---------------------------------\n",
      "Eval num_timesteps=1000, episode_reward=-1.54 +/- 1.51\n",
      "Episode length: 41.20 +/- 48.02\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 41.2     |\n",
      "|    mean_reward     | -1.54    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 1000     |\n",
      "| train/             |          |\n",
      "|    actor_loss      | 0.973    |\n",
      "|    critic_loss     | 0.285    |\n",
      "|    learning_rate   | 0.001    |\n",
      "|    n_updates       | 966      |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 20.1     |\n",
      "|    ep_rew_mean     | -8.87    |\n",
      "| time/              |          |\n",
      "|    episodes        | 50       |\n",
      "|    fps             | 29       |\n",
      "|    time_elapsed    | 34       |\n",
      "|    total_timesteps | 1006     |\n",
      "---------------------------------\n",
      "Completed training\n"
     ]
    }
   ],
   "source": [
    "from stable_baselines3 import TD3\n",
    "from stable_baselines3.common.noise import NormalActionNoise, OrnsteinUhlenbeckActionNoise\n",
    "\n",
    "\n",
    "# Separate evaluation env\n",
    "eval_env = YourDoubleEnv()\n",
    "\n",
    "# Use deterministic actions for evaluation\n",
    "eval_callback = EvalCallback(eval_env,  best_model_save_path='./RL_logs/TD3',\n",
    "    log_path='./RL_logs/', eval_freq=100,\n",
    "    deterministic=True, render=False)\n",
    "\n",
    "\n",
    "env = YourDoubleEnv()\n",
    "\n",
    "# The noise objects for TD3. Injects noise in the actions to encourage exploration.\n",
    "n_actions = env.action_space.shape[-1]\n",
    "action_noise = NormalActionNoise(mean=np.zeros(n_actions), sigma=0.1 * np.ones(n_actions))\n",
    "\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "env.seed(seed)\n",
    "log_dir = './'\n",
    "\n",
    "\n",
    "ent_coef = 1/5#'auto' # Hyperparameter of SAC, with 'auto' it is also learned during training.\n",
    "\n",
    "# Define your model\n",
    "td3_model = TD3(\"MlpPolicy\", env, action_noise=action_noise, verbose=1, tensorboard_log=\"./hands-on_rl_tensorboard\")\n",
    "print(\"Starting training...\")\n",
    "td3_model.learn(total_timesteps=1000, callback=eval_callback, log_interval=1, tb_log_name=\"hands_on_rl_TD3\")\n",
    "td3_model.save('./saved_models/RL_agent_TD3')\n",
    "print(\"Completed training\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "2e71589a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 3 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 4 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 4 steps before terminating test\n",
      "Took 2 steps before terminating test\n",
      "Took 3 steps before terminating test\n",
      "Took 4 steps before terminating test\n",
      "Took 2 steps before terminating test\n",
      "Succesful optimizations: 10\n",
      "Unsuccesful optimizations: 0\n",
      "Accuracy: 1.0\n",
      "Mean episode length: 3.1\n",
      "Max episode length: 4, Min episode length: 2\n"
     ]
    }
   ],
   "source": [
    "%matplotlib qt\n",
    "# Reset environment\n",
    "# Create new test env\n",
    "test_env = YourDoubleEnv()\n",
    "\n",
    "\n",
    "test_trained_agent(test_env, model, render_opt=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6706471c",
   "metadata": {},
   "source": [
    "## 2.3 Proximal Policy Optimization (PPO)\n",
    "\n",
    "Illustrate training several agents in parallell environments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "5e4466ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<stable_baselines3.common.vec_env.dummy_vec_env.DummyVecEnv object at 0x000001BA0CEBF3D0>\n",
      "Using cpu device\n",
      "Starting training...\n",
      "Logging to ./hands-on_rl_tensorboard\\hands_on_rl_PPO_2\n",
      "Eval num_timesteps=4000, episode_reward=-50.18 +/- 31.42\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -50.2    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 4000     |\n",
      "---------------------------------\n",
      "New best mean reward!\n",
      "Eval num_timesteps=8000, episode_reward=-69.62 +/- 38.28\n",
      "Episode length: 100.00 +/- 0.00\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 100      |\n",
      "|    mean_reward     | -69.6    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 8000     |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 86.6     |\n",
      "|    ep_rew_mean     | -131     |\n",
      "| time/              |          |\n",
      "|    fps             | 881      |\n",
      "|    iterations      | 1        |\n",
      "|    time_elapsed    | 9        |\n",
      "|    total_timesteps | 8192     |\n",
      "---------------------------------\n",
      "Eval num_timesteps=12000, episode_reward=-5.07 +/- 3.85\n",
      "Episode length: 62.80 +/- 45.56\n",
      "-----------------------------------------\n",
      "| eval/                   |             |\n",
      "|    mean_ep_length       | 62.8        |\n",
      "|    mean_reward          | -5.07       |\n",
      "| time/                   |             |\n",
      "|    total_timesteps      | 12000       |\n",
      "| train/                  |             |\n",
      "|    approx_kl            | 0.009672154 |\n",
      "|    clip_fraction        | 0.129       |\n",
      "|    clip_range           | 0.2         |\n",
      "|    entropy_loss         | -1.41       |\n",
      "|    explained_variance   | 0.000729    |\n",
      "|    learning_rate        | 0.0003      |\n",
      "|    loss                 | 42.7        |\n",
      "|    n_updates            | 10          |\n",
      "|    policy_gradient_loss | -0.0141     |\n",
      "|    std                  | 0.988       |\n",
      "|    value_loss           | 186         |\n",
      "-----------------------------------------\n",
      "New best mean reward!\n",
      "Eval num_timesteps=16000, episode_reward=-8.40 +/- 4.72\n",
      "Episode length: 65.60 +/- 42.36\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 65.6     |\n",
      "|    mean_reward     | -8.4     |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 16000    |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 78.9     |\n",
      "|    ep_rew_mean     | -87.7    |\n",
      "| time/              |          |\n",
      "|    fps             | 524      |\n",
      "|    iterations      | 2        |\n",
      "|    time_elapsed    | 31       |\n",
      "|    total_timesteps | 16384    |\n",
      "---------------------------------\n",
      "Eval num_timesteps=20000, episode_reward=-1.34 +/- 0.99\n",
      "Episode length: 6.80 +/- 2.40\n",
      "-----------------------------------------\n",
      "| eval/                   |             |\n",
      "|    mean_ep_length       | 6.8         |\n",
      "|    mean_reward          | -1.34       |\n",
      "| time/                   |             |\n",
      "|    total_timesteps      | 20000       |\n",
      "| train/                  |             |\n",
      "|    approx_kl            | 0.010692155 |\n",
      "|    clip_fraction        | 0.126       |\n",
      "|    clip_range           | 0.2         |\n",
      "|    entropy_loss         | -1.39       |\n",
      "|    explained_variance   | -0.000365   |\n",
      "|    learning_rate        | 0.0003      |\n",
      "|    loss                 | 39.6        |\n",
      "|    n_updates            | 20          |\n",
      "|    policy_gradient_loss | -0.0135     |\n",
      "|    std                  | 0.966       |\n",
      "|    value_loss           | 144         |\n",
      "-----------------------------------------\n",
      "New best mean reward!\n",
      "Eval num_timesteps=24000, episode_reward=-1.71 +/- 1.34\n",
      "Episode length: 7.80 +/- 2.56\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 7.8      |\n",
      "|    mean_reward     | -1.71    |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 24000    |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 63.6     |\n",
      "|    ep_rew_mean     | -46      |\n",
      "| time/              |          |\n",
      "|    fps             | 456      |\n",
      "|    iterations      | 3        |\n",
      "|    time_elapsed    | 53       |\n",
      "|    total_timesteps | 24576    |\n",
      "---------------------------------\n",
      "Eval num_timesteps=28000, episode_reward=-2.89 +/- 1.55\n",
      "Episode length: 62.00 +/- 46.54\n",
      "-----------------------------------------\n",
      "| eval/                   |             |\n",
      "|    mean_ep_length       | 62          |\n",
      "|    mean_reward          | -2.89       |\n",
      "| time/                   |             |\n",
      "|    total_timesteps      | 28000       |\n",
      "| train/                  |             |\n",
      "|    approx_kl            | 0.010090899 |\n",
      "|    clip_fraction        | 0.123       |\n",
      "|    clip_range           | 0.2         |\n",
      "|    entropy_loss         | -1.36       |\n",
      "|    explained_variance   | 5.99e-05    |\n",
      "|    learning_rate        | 0.0003      |\n",
      "|    loss                 | 84          |\n",
      "|    n_updates            | 30          |\n",
      "|    policy_gradient_loss | -0.0137     |\n",
      "|    std                  | 0.935       |\n",
      "|    value_loss           | 138         |\n",
      "-----------------------------------------\n",
      "Eval num_timesteps=32000, episode_reward=-2.70 +/- 1.21\n",
      "Episode length: 62.20 +/- 46.30\n",
      "---------------------------------\n",
      "| eval/              |          |\n",
      "|    mean_ep_length  | 62.2     |\n",
      "|    mean_reward     | -2.7     |\n",
      "| time/              |          |\n",
      "|    total_timesteps | 32000    |\n",
      "---------------------------------\n",
      "---------------------------------\n",
      "| rollout/           |          |\n",
      "|    ep_len_mean     | 61       |\n",
      "|    ep_rew_mean     | -35.1    |\n",
      "| time/              |          |\n",
      "|    fps             | 418      |\n",
      "|    iterations      | 4        |\n",
      "|    time_elapsed    | 78       |\n",
      "|    total_timesteps | 32768    |\n",
      "---------------------------------\n",
      "Completed training\n"
     ]
    }
   ],
   "source": [
    "from stable_baselines3 import PPO\n",
    "from stable_baselines3.common.noise import NormalActionNoise, OrnsteinUhlenbeckActionNoise\n",
    "from stable_baselines3.common.env_util import make_vec_env\n",
    "\n",
    "\n",
    "# Separate evaluation env\n",
    "eval_env = YourDoubleEnv()\n",
    "\n",
    "# Use deterministic actions for evaluation\n",
    "eval_callback = EvalCallback(eval_env,  best_model_save_path='./RL_logs/PPO',\n",
    "    log_path='./RL_logs/', eval_freq=1000,\n",
    "    deterministic=True, render=False)\n",
    "\n",
    "\n",
    "# Parallel environments. This is using a \"simple\" vectorized environment, simply calling \n",
    "# steps in four separate environments in sequence. No multithreading, but it is possible\n",
    "# to achieve in SB3.\n",
    "env = make_vec_env(YourDoubleEnv, n_envs=4)\n",
    "print(env)\n",
    "\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "env.seed(seed)\n",
    "\n",
    "ppo_model = PPO(\"MlpPolicy\", env, verbose=1, tensorboard_log=\"./hands-on_rl_tensorboard\")\n",
    "\n",
    "print(\"Starting training...\")\n",
    "ppo_model.learn(total_timesteps=25000, callback=eval_callback, log_interval=1, tb_log_name=\"hands_on_rl_PPO\")\n",
    "ppo_model.save('./saved_models/RL_agent_PPO')\n",
    "print(\"Completed training\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "48272a49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 29 steps before terminating test\n",
      "Took 21 steps before terminating test\n",
      "Took 23 steps before terminating test\n",
      "Took 23 steps before terminating test\n",
      "Took 13 steps before terminating test\n",
      "Took 21 steps before terminating test\n",
      "Took 7 steps before terminating test\n",
      "Took 14 steps before terminating test\n",
      "Took 1 steps before terminating test\n",
      "Took 5 steps before terminating test\n",
      "Succesful optimizations: 10\n",
      "Unsuccesful optimizations: 0\n",
      "Accuracy: 1.0\n",
      "Mean episode length: 15.7\n",
      "Max episode length: 29, Min episode length: 1\n"
     ]
    }
   ],
   "source": [
    "%matplotlib qt\n",
    "# Reset environment\n",
    "# Create new test env\n",
    "test_env = YourDoubleEnv()\n",
    "\n",
    "\n",
    "test_trained_agent(test_env, ppo_model, render_opt=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdafa308",
   "metadata": {},
   "source": [
    "# Want to learn more?\n",
    "\n",
    "If you want to learn more about the theory of reinforcement learning there are many articles and tutorials available online.\n",
    "\n",
    "There is a very good textbook by Sutton and Barto called \"Reinforcement Learning:\n",
    "An Introduction\". You can access the second edition online and find more information on the following link: http://incompleteideas.net/book/the-book.html. Gives a very thorough introduction to RL and traditional methods.\n",
    "\n",
    "Other websites with lots of information are:\n",
    "\n",
    "- https://spinningup.openai.com/en/latest/ : an educational resource produced by OpenAI that makes it easier to learn about deep reinforcement learning (deep RL). Also provides a library with implementations of different DRL algorithms. Their documentations provide very nice and succinct explanations of the different tricks and methods used in different algorithms.\n",
    "- https://stable-baselines3.readthedocs.io/en/master/index.html: documentation of Stable Baselines 3. More on the technical side, but very useful when you actually want to start implementing your own environments.\n",
    "- https://deeplearningcourses.com/o/reinforcement-learning-control : A roadmap of courses to learn how to master RL and control problems. The courses are expensive, but you could use this roadmap as a guide to what would be beneficial to study.\n",
    "\n",
    "If you google whatever machine learning topic you are interested in, you are also likely to find many articles about it on sites such as medium or towardsdatascience. One does however need to keep in mind that the authors of these articles are often students and other beginners, so make sure to check who has written the article and take their conclusions with a grain of salt. Happy learning!\n",
    "\n",
    "I hope you enjoyed this small hands-on and if you have any further questions let me know.\n",
    "\n",
    "/ Joel Wulff"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8897d50f",
   "metadata": {},
   "source": [
    "## Optional:  Deep Q-Network (DQN)\n",
    "\n",
    "As an optional added task, we can also try to train a DQN agent in our environment. However, due to the fact that the DQN algorithm assumes we only have a discrete number of actions, we need to redefine our environments action space accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "bfa1e15b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# some self variables that you could use in the real environment class\n",
    "class YourDoubleEnvDiscrete(gym.Env):\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    metadata= {'render.modes': ['human']}\n",
    "    \n",
    "    action_space = gym.spaces.Discrete(5) # # {-2, -1, 0, 1, 2}. Five possible actions.\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,-1,-1,-1]), # Fill in the __ with your observation settings.\n",
    "                                high = np.array([1,1,1,1]),\n",
    "                                shape=(4,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Stop criteria (constituting \"good\" splittings with provided difference estimate).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "    def __init__(self,\n",
    "                max_steps = 100,\n",
    "                max_step_size = 20,\n",
    "                min_setting = -45,\n",
    "                max_setting = 45,):\n",
    "        \n",
    "        ### Assign hyperparameter settings to attributes\n",
    "        self.max_steps = max_steps\n",
    "        self.max_step_size = max_step_size\n",
    "        self.min_setting = min_setting\n",
    "        self.max_setting = max_setting\n",
    "        \n",
    "        ### Status of the iterations\n",
    "        # Steps, initializing lists to store actions/states/rewards...\n",
    "        \n",
    "        self.counter = 0 # Counts the number of steps taken in the environment!\n",
    "        self.curr_step = -1  ## Not used ?\n",
    "        self.phase_correction = 0\n",
    "\n",
    "        # Initialize lists for tracking episodes\n",
    "        self.curr_episode = -1\n",
    "        self.action_episode_memory = []\n",
    "        self.diff_estimate_memory = []\n",
    "        self.state_memory = []\n",
    "        self.phase_set_memory = []\n",
    "        self.reward_memory = []\n",
    "        self.is_finalized = False\n",
    "    \n",
    "    def step(self, action):\n",
    "        \"\"\"\n",
    "        One step/action in the environment, returning the observable\n",
    "        and reward. \n",
    "\n",
    "        Stopping conditions: max_steps reached, or splitting good enough.\n",
    "        \"\"\"\n",
    "        success = False    \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        # Hint: Number of steps taken in environment is tracked in self.counter\n",
    "        \n",
    "        \n",
    "        self._take_action(action) # Actually take action: Define your _take_action function below!! \n",
    "        reward = self._get_reward() # Get your reward: Define your _get_reward function below!! Returns a reward value.\n",
    "        \n",
    "        state = self.state\n",
    "        ### Check exit criteria: Achieved good enough state, or taken too many steps.\n",
    "        ### BUNCH_LENGHT_INT_CRITERIA based on the given diff_estimate value.\n",
    "        \n",
    "        if abs(self.diff_estimate) < self.BUNCH_LENGTH_INT_CRITERIA: # Check if the diff_estimate is below criterion. If so, episode finalized and a success!\n",
    "            self.is_finalized = True \n",
    "            success = True\n",
    "        # print(self.counter)    \n",
    "        if self.counter >= self.max_steps: # Check if you have exceeded the maximum step limit. If so, episode finalized but not a success...\n",
    "            self.is_finalized = True\n",
    "\n",
    "        # Here you can add any extra info you would like to be returned on each step, e.g. episode steps, rewards, actions etc.\n",
    "        info = {'success': success, 'steps': self.counter, 'profile': self.profile} \n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        \n",
    "        return state, reward.astype(np.float64), self.is_finalized, info # Standardized output according to gym framework.\n",
    "\n",
    "    def _take_action(self, action):\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \n",
    "        Args:\n",
    "            action (ndarray): n-dimensional action. Datatype, dimension, and value ranges defined in self.action_space.\n",
    "        \"\"\"\n",
    "        \n",
    "        # Input action is one of five values: -2,-1,0,1,2. We need to correlate these with different actions.\n",
    "        \n",
    "        # -2: Large negative step of -5 degrees\n",
    "        # -1: Small negative step of -0.25 degrees\n",
    "        # 0: No action\n",
    "        # 1: Small positive step of +0.25 degrees\n",
    "        # 2: Large positive step of +5 degrees\n",
    "        \n",
    "        if action == 0:\n",
    "            converted_action = -5\n",
    "        elif action==1:\n",
    "            converted_action=-0.25\n",
    "        elif action==2:\n",
    "            converted_action=0\n",
    "        elif action==3:\n",
    "            converted_action=0.25\n",
    "        elif action==4:\n",
    "            converted_action=5\n",
    "        \n",
    "        self.phase_correction += converted_action # Phase correction tracks previous actions taken to get the cumulative change from start.\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\n",
    "        self.phase_set += converted_action\n",
    "\n",
    "        # Update the self.state parameter with the new state. The preprovided self._get_state() will provide you with a state based on the current self.phase_set attribute value.\n",
    "        # The state will consist of a vector of 4 values: [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2].\n",
    "        self.state = self._get_state()\n",
    "\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################  \n",
    "        curr_state = self.state.copy()\n",
    "        curr_phase_set = np.copy(self.phase_set)\n",
    "        self.action_episode_memory.append(action)\n",
    "        self.state_memory.append(curr_state)\n",
    "        self.phase_set_memory.append(curr_phase_set)\n",
    "        \n",
    "        self.counter += 1\n",
    "\n",
    "     \n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set. This function is provided completed to help you collect datapoints from the pre-simulated dataset.\n",
    "        The data_class class is written to provide datapoints from a quadsplit dataset, but by always providing h84=0 we only vary the first phase\n",
    "        offset.\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "        \n",
    "        ### Check whether we are within simulated settings\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code below!!\n",
    "            #########################################################################################################################\n",
    "            \n",
    "            # Collecting the simulated datapoint, calculating state description\n",
    "            profile = data_class.get_interpolated_profile(self.phase_set) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            state = get_state_from_profile(profile)\n",
    "            \n",
    "            ################################################################################################################################################################\n",
    "            # Implement the code above!!\n",
    "            ################################################################################################################################################################\n",
    "        \n",
    "            self.profile = profile # Add a tracking of the profile for plotting purposes!\n",
    "        return state.astype(np.float32)\n",
    "    \n",
    "    def _get_reward(self):\n",
    "        \"\"\" Evaluating the reward from the observable/state. \n",
    "            The example reward 'simple_profile' is provided, and is based on the final profile\n",
    "            after the splitting. This is using more information than just the state provided\n",
    "            to the agent.\n",
    "\n",
    "            Feel free to experiment and design your own reward as well! \n",
    "\n",
    "        Returns:\n",
    "            float: The reward based on the current state. \n",
    "        \"\"\" \n",
    "        \n",
    "        \n",
    "        \n",
    "        # The shape of your observable should match your optimization_space. For this excercise, it is expected\n",
    "        # that you use an observation space of a vector with four values\n",
    "        observable = self.state\n",
    "\n",
    "        diff_estimate = get_diff_estimate_from_state(observable)\n",
    "        self.diff_estimate = diff_estimate\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \"\"\" \n",
    "         Define your own reward here. The diff_estimate provided above is provided \n",
    "         as a simple way to define the difference between your bunches length/intensity \n",
    "         after the splitting. You want this to be as small as possible, so a better reward\n",
    "         should be given for a smaller diff_estimate. There is already a pre-defined\n",
    "         criterion for the diff_estimate to be considered a \"good\" splitting provided in\n",
    "         the BUNCH_LENGTH_INT_CRITERIA attribute. \n",
    "         \"\"\"\n",
    "\n",
    "        reward = -diff_estimate #______ # Define your own reward here!! \n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        ### Tracking of diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        curr_diff_estimate = self.diff_estimate.copy()\n",
    "        self.diff_estimate_memory.append(curr_diff_estimate)\n",
    "        self.reward_memory.append(reward)\n",
    "            \n",
    "        return reward\n",
    "       \n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over a training episode.\n",
    "        This function will be called everytime an episode is started\n",
    "        to provide an initial state.\n",
    "        \n",
    "        Returns:\n",
    "            state: The inital state of the environment. Should match the shape defined in observation_space.\n",
    "        \"\"\"\n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False # This tracks wether an episode is complete or not.\n",
    "        \n",
    "        #print(f'Resetting for episode {self.curr_episode}')\n",
    "\n",
    "        # Initializing episode lists to track data for individual episodes. Some used for rendering.\n",
    "        self.action_episode_memory = []\n",
    "        self.state_memory= []\n",
    "        self.phase_set_memory= []\n",
    "        self.reward_memory= []\n",
    "        self.diff_estimate_memory= []\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \n",
    "        # Getting initial state\n",
    "        \n",
    "        # Initialize random starting phase_set within [self.min_setting, self.max_setting], for example using random.uniform(min,max)\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state() # call _get_state to get the initial state from the starting phase_set.\n",
    "        state = self.state\n",
    "        \n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################\n",
    " \n",
    "        ### Some tracking of state, phase, reward, diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        self.state_memory.append(state)\n",
    "        self.phase_set_memory.append(self.phase_set)\n",
    "        reward = self._get_reward()\n",
    "        self.reward_memory.append(reward)\n",
    "        \n",
    "        return state.astype(np.float32)\n",
    "\n",
    "    def seed(self, seed=None):\n",
    "        \"\"\"\n",
    "        Set the random seed. Useful if you want to standardize trainings.\n",
    "        \"\"\"\n",
    "        \n",
    "        random.seed(seed)\n",
    "        np.random.seed\n",
    "        \n",
    "    def render(self, mode='human'):\n",
    "        \n",
    "        \"\"\"\n",
    "        Rendering function meant to provide a human-readable output. Base function in gym\n",
    "        environments to override. I provide a simple version that should let you observe \n",
    "        your trained agent during evaluation.\n",
    "        \"\"\"\n",
    "        plt.figure('Agent')\n",
    "        plt.clf()\n",
    "        plt.subplot(131)\n",
    "        plt.suptitle(f'Episode {self.curr_episode}')\n",
    "        plt.title('Current profile')\n",
    "        plt.plot(self.profile,'b')\n",
    "        plt.subplot(132)\n",
    "        plt.title('Difference estimate')\n",
    "        plt.plot(self.diff_estimate_memory, 'o-')\n",
    "        plt.axhline(y=self.BUNCH_LENGTH_INT_CRITERIA, color='k', linestyle='--')\n",
    "        plt.subplot(133)\n",
    "        plt.title('h42 phase offset')\n",
    "        plt.plot(np.asarray(self.phase_set_memory, dtype=object), 'go-')\n",
    "        plt.axhline(y=0, color='k', linestyle='--')\n",
    "        plt.ylim((-30,30))\n",
    "        \n",
    "        #plot_finish(fig=fig, axes=axes, xlabel='Setting', ylabel='Observable')\n",
    "        plt.pause(0.2)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "b0f4b32c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cpu device\n",
      "Wrapping the env with a `Monitor` wrapper\n",
      "Wrapping the env in a DummyVecEnv.\n",
      "Starting training...\n",
      "Logging to ./hands-on_rl_tensorboard\\hands_on_rl_DQN_6\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 100      |\n",
      "|    ep_rew_mean      | -109     |\n",
      "|    exploration_rate | 0.905    |\n",
      "| time/               |          |\n",
      "|    episodes         | 5        |\n",
      "|    fps              | 643      |\n",
      "|    time_elapsed     | 0        |\n",
      "|    total_timesteps  | 500      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 92.1     |\n",
      "|    ep_rew_mean      | -93.4    |\n",
      "|    exploration_rate | 0.825    |\n",
      "| time/               |          |\n",
      "|    episodes         | 10       |\n",
      "|    fps              | 623      |\n",
      "|    time_elapsed     | 1        |\n",
      "|    total_timesteps  | 921      |\n",
      "----------------------------------\n",
      "Eval num_timesteps=1000, episode_reward=-112.17 +/- 44.94\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -112     |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.81     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 1000     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 94.7     |\n",
      "|    ep_rew_mean      | -99.5    |\n",
      "|    exploration_rate | 0.73     |\n",
      "| time/               |          |\n",
      "|    episodes         | 15       |\n",
      "|    fps              | 445      |\n",
      "|    time_elapsed     | 3        |\n",
      "|    total_timesteps  | 1421     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 95       |\n",
      "|    ep_rew_mean      | -92.1    |\n",
      "|    exploration_rate | 0.639    |\n",
      "| time/               |          |\n",
      "|    episodes         | 20       |\n",
      "|    fps              | 416      |\n",
      "|    time_elapsed     | 4        |\n",
      "|    total_timesteps  | 1901     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=2000, episode_reward=-56.20 +/- 46.19\n",
      "Episode length: 75.60 +/- 30.55\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 75.6     |\n",
      "|    mean_reward      | -56.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.62     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 2000     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 93.6     |\n",
      "|    ep_rew_mean      | -96.5    |\n",
      "|    exploration_rate | 0.556    |\n",
      "| time/               |          |\n",
      "|    episodes         | 25       |\n",
      "|    fps              | 360      |\n",
      "|    time_elapsed     | 6        |\n",
      "|    total_timesteps  | 2339     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 94.6     |\n",
      "|    ep_rew_mean      | -92.5    |\n",
      "|    exploration_rate | 0.461    |\n",
      "| time/               |          |\n",
      "|    episodes         | 30       |\n",
      "|    fps              | 369      |\n",
      "|    time_elapsed     | 7        |\n",
      "|    total_timesteps  | 2839     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=3000, episode_reward=-42.40 +/- 40.00\n",
      "Episode length: 63.60 +/- 38.62\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 63.6     |\n",
      "|    mean_reward      | -42.4    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.43     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 3000     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 94.3     |\n",
      "|    ep_rew_mean      | -93.8    |\n",
      "|    exploration_rate | 0.373    |\n",
      "| time/               |          |\n",
      "|    episodes         | 35       |\n",
      "|    fps              | 348      |\n",
      "|    time_elapsed     | 9        |\n",
      "|    total_timesteps  | 3301     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 95       |\n",
      "|    ep_rew_mean      | -93.3    |\n",
      "|    exploration_rate | 0.278    |\n",
      "| time/               |          |\n",
      "|    episodes         | 40       |\n",
      "|    fps              | 355      |\n",
      "|    time_elapsed     | 10       |\n",
      "|    total_timesteps  | 3801     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=4000, episode_reward=-35.59 +/- 31.19\n",
      "Episode length: 66.40 +/- 30.94\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 66.4     |\n",
      "|    mean_reward      | -35.6    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.24     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 4000     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 95.3     |\n",
      "|    ep_rew_mean      | -91.9    |\n",
      "|    exploration_rate | 0.185    |\n",
      "| time/               |          |\n",
      "|    episodes         | 45       |\n",
      "|    fps              | 333      |\n",
      "|    time_elapsed     | 12       |\n",
      "|    total_timesteps  | 4288     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 95.4     |\n",
      "|    ep_rew_mean      | -91.1    |\n",
      "|    exploration_rate | 0.0937   |\n",
      "| time/               |          |\n",
      "|    episodes         | 50       |\n",
      "|    fps              | 338      |\n",
      "|    time_elapsed     | 14       |\n",
      "|    total_timesteps  | 4770     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=5000, episode_reward=-114.92 +/- 54.81\n",
      "Episode length: 99.40 +/- 1.20\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 99.4     |\n",
      "|    mean_reward      | -115     |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.0502   |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 5000     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 92.5     |\n",
      "|    ep_rew_mean      | -88.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 55       |\n",
      "|    fps              | 319      |\n",
      "|    time_elapsed     | 15       |\n",
      "|    total_timesteps  | 5086     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 89.9     |\n",
      "|    ep_rew_mean      | -86.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 60       |\n",
      "|    fps              | 324      |\n",
      "|    time_elapsed     | 16       |\n",
      "|    total_timesteps  | 5396     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 89.3     |\n",
      "|    ep_rew_mean      | -85.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 65       |\n",
      "|    fps              | 328      |\n",
      "|    time_elapsed     | 17       |\n",
      "|    total_timesteps  | 5804     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=6000, episode_reward=-116.12 +/- 21.62\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -116     |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 6000     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 89.6     |\n",
      "|    ep_rew_mean      | -84.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 70       |\n",
      "|    fps              | 307      |\n",
      "|    time_elapsed     | 20       |\n",
      "|    total_timesteps  | 6275     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.3     |\n",
      "|    ep_rew_mean      | -88.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 75       |\n",
      "|    fps              | 318      |\n",
      "|    time_elapsed     | 21       |\n",
      "|    total_timesteps  | 6775     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eval num_timesteps=7000, episode_reward=-84.27 +/- 49.60\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -84.3    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 7000     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 88.8     |\n",
      "|    ep_rew_mean      | -85.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 80       |\n",
      "|    fps              | 300      |\n",
      "|    time_elapsed     | 23       |\n",
      "|    total_timesteps  | 7103     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 89.4     |\n",
      "|    ep_rew_mean      | -87.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 85       |\n",
      "|    fps              | 306      |\n",
      "|    time_elapsed     | 24       |\n",
      "|    total_timesteps  | 7603     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=8000, episode_reward=-128.98 +/- 48.34\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -129     |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 8000     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90       |\n",
      "|    ep_rew_mean      | -87.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 90       |\n",
      "|    fps              | 292      |\n",
      "|    time_elapsed     | 27       |\n",
      "|    total_timesteps  | 8103     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.5     |\n",
      "|    ep_rew_mean      | -89.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 95       |\n",
      "|    fps              | 301      |\n",
      "|    time_elapsed     | 28       |\n",
      "|    total_timesteps  | 8599     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=9000, episode_reward=-113.42 +/- 47.56\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -113     |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 9000     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91       |\n",
      "|    ep_rew_mean      | -90.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 100      |\n",
      "|    fps              | 300      |\n",
      "|    time_elapsed     | 30       |\n",
      "|    total_timesteps  | 9099     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91       |\n",
      "|    ep_rew_mean      | -89.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 105      |\n",
      "|    fps              | 307      |\n",
      "|    time_elapsed     | 31       |\n",
      "|    total_timesteps  | 9599     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=10000, episode_reward=-62.32 +/- 45.72\n",
      "Episode length: 81.80 +/- 34.92\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 81.8     |\n",
      "|    mean_reward      | -62.3    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 10000    |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91.8     |\n",
      "|    ep_rew_mean      | -90.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 110      |\n",
      "|    fps              | 302      |\n",
      "|    time_elapsed     | 33       |\n",
      "|    total_timesteps  | 10099    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.477    |\n",
      "|    n_updates        | 24       |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91.7     |\n",
      "|    ep_rew_mean      | -88      |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 115      |\n",
      "|    fps              | 293      |\n",
      "|    time_elapsed     | 36       |\n",
      "|    total_timesteps  | 10590    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.402    |\n",
      "|    n_updates        | 147      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91       |\n",
      "|    ep_rew_mean      | -88.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 120      |\n",
      "|    fps              | 289      |\n",
      "|    time_elapsed     | 37       |\n",
      "|    total_timesteps  | 10996    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.303    |\n",
      "|    n_updates        | 248      |\n",
      "----------------------------------\n",
      "Eval num_timesteps=11000, episode_reward=-70.79 +/- 26.53\n",
      "Episode length: 93.80 +/- 12.40\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 93.8     |\n",
      "|    mean_reward      | -70.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 11000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.186    |\n",
      "|    n_updates        | 249      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.6     |\n",
      "|    ep_rew_mean      | -87.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 125      |\n",
      "|    fps              | 273      |\n",
      "|    time_elapsed     | 41       |\n",
      "|    total_timesteps  | 11403    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.128    |\n",
      "|    n_updates        | 350      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.6     |\n",
      "|    ep_rew_mean      | -92.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 130      |\n",
      "|    fps              | 277      |\n",
      "|    time_elapsed     | 42       |\n",
      "|    total_timesteps  | 11903    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.184    |\n",
      "|    n_updates        | 475      |\n",
      "----------------------------------\n",
      "Eval num_timesteps=12000, episode_reward=-61.38 +/- 56.71\n",
      "Episode length: 82.40 +/- 21.59\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 82.4     |\n",
      "|    mean_reward      | -61.4    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 12000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.138    |\n",
      "|    n_updates        | 499      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91       |\n",
      "|    ep_rew_mean      | -91.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 135      |\n",
      "|    fps              | 265      |\n",
      "|    time_elapsed     | 46       |\n",
      "|    total_timesteps  | 12398    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.106    |\n",
      "|    n_updates        | 599      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.6     |\n",
      "|    ep_rew_mean      | -89.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 140      |\n",
      "|    fps              | 261      |\n",
      "|    time_elapsed     | 49       |\n",
      "|    total_timesteps  | 12863    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.119    |\n",
      "|    n_updates        | 715      |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eval num_timesteps=13000, episode_reward=-80.77 +/- 26.27\n",
      "Episode length: 96.00 +/- 8.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 96       |\n",
      "|    mean_reward      | -80.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 13000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.131    |\n",
      "|    n_updates        | 749      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.8     |\n",
      "|    ep_rew_mean      | -90      |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 145      |\n",
      "|    fps              | 249      |\n",
      "|    time_elapsed     | 53       |\n",
      "|    total_timesteps  | 13363    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0812   |\n",
      "|    n_updates        | 840      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.1     |\n",
      "|    ep_rew_mean      | -88.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 150      |\n",
      "|    fps              | 245      |\n",
      "|    time_elapsed     | 56       |\n",
      "|    total_timesteps  | 13781    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0632   |\n",
      "|    n_updates        | 945      |\n",
      "----------------------------------\n",
      "Eval num_timesteps=14000, episode_reward=-74.03 +/- 13.70\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -74      |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 14000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0557   |\n",
      "|    n_updates        | 999      |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.4     |\n",
      "|    ep_rew_mean      | -88.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 155      |\n",
      "|    fps              | 236      |\n",
      "|    time_elapsed     | 59       |\n",
      "|    total_timesteps  | 14127    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0631   |\n",
      "|    n_updates        | 1031     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 91.6     |\n",
      "|    ep_rew_mean      | -88.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 160      |\n",
      "|    fps              | 234      |\n",
      "|    time_elapsed     | 62       |\n",
      "|    total_timesteps  | 14557    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0747   |\n",
      "|    n_updates        | 1139     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=15000, episode_reward=-30.26 +/- 36.60\n",
      "Episode length: 44.00 +/- 45.84\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 44       |\n",
      "|    mean_reward      | -30.3    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 15000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0278   |\n",
      "|    n_updates        | 1249     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 92.5     |\n",
      "|    ep_rew_mean      | -87      |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 165      |\n",
      "|    fps              | 228      |\n",
      "|    time_elapsed     | 65       |\n",
      "|    total_timesteps  | 15057    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0409   |\n",
      "|    n_updates        | 1264     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 92.7     |\n",
      "|    ep_rew_mean      | -86.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 170      |\n",
      "|    fps              | 226      |\n",
      "|    time_elapsed     | 68       |\n",
      "|    total_timesteps  | 15549    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0294   |\n",
      "|    n_updates        | 1387     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 90.6     |\n",
      "|    ep_rew_mean      | -80.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 175      |\n",
      "|    fps              | 225      |\n",
      "|    time_elapsed     | 70       |\n",
      "|    total_timesteps  | 15837    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0222   |\n",
      "|    n_updates        | 1459     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=16000, episode_reward=-30.23 +/- 23.67\n",
      "Episode length: 64.40 +/- 42.81\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 64.4     |\n",
      "|    mean_reward      | -30.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 16000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0193   |\n",
      "|    n_updates        | 1499     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 92.1     |\n",
      "|    ep_rew_mean      | -81.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 180      |\n",
      "|    fps              | 221      |\n",
      "|    time_elapsed     | 73       |\n",
      "|    total_timesteps  | 16314    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0169   |\n",
      "|    n_updates        | 1578     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 89.3     |\n",
      "|    ep_rew_mean      | -76.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 185      |\n",
      "|    fps              | 220      |\n",
      "|    time_elapsed     | 74       |\n",
      "|    total_timesteps  | 16532    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0183   |\n",
      "|    n_updates        | 1632     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 88.5     |\n",
      "|    ep_rew_mean      | -73.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 190      |\n",
      "|    fps              | 219      |\n",
      "|    time_elapsed     | 77       |\n",
      "|    total_timesteps  | 16951    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0123   |\n",
      "|    n_updates        | 1737     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=17000, episode_reward=-31.53 +/- 15.13\n",
      "Episode length: 77.80 +/- 29.29\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 77.8     |\n",
      "|    mean_reward      | -31.5    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 17000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00959  |\n",
      "|    n_updates        | 1749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 88.5     |\n",
      "|    ep_rew_mean      | -69.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 195      |\n",
      "|    fps              | 214      |\n",
      "|    time_elapsed     | 81       |\n",
      "|    total_timesteps  | 17451    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00605  |\n",
      "|    n_updates        | 1862     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 86.9     |\n",
      "|    ep_rew_mean      | -64.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 200      |\n",
      "|    fps              | 214      |\n",
      "|    time_elapsed     | 83       |\n",
      "|    total_timesteps  | 17788    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0161   |\n",
      "|    n_updates        | 1946     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=18000, episode_reward=-29.51 +/- 8.29\n",
      "Episode length: 84.20 +/- 19.78\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 84.2     |\n",
      "|    mean_reward      | -29.5    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 18000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00467  |\n",
      "|    n_updates        | 1999     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 86.9     |\n",
      "|    ep_rew_mean      | -62.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 205      |\n",
      "|    fps              | 209      |\n",
      "|    time_elapsed     | 87       |\n",
      "|    total_timesteps  | 18288    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00325  |\n",
      "|    n_updates        | 2071     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 86.2     |\n",
      "|    ep_rew_mean      | -58.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 210      |\n",
      "|    fps              | 208      |\n",
      "|    time_elapsed     | 89       |\n",
      "|    total_timesteps  | 18715    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0148   |\n",
      "|    n_updates        | 2178     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=19000, episode_reward=-26.82 +/- 17.97\n",
      "Episode length: 69.80 +/- 39.19\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 69.8     |\n",
      "|    mean_reward      | -26.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 19000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00123  |\n",
      "|    n_updates        | 2249     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 84.9     |\n",
      "|    ep_rew_mean      | -56.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 215      |\n",
      "|    fps              | 206      |\n",
      "|    time_elapsed     | 92       |\n",
      "|    total_timesteps  | 19081    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00499  |\n",
      "|    n_updates        | 2270     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 85.1     |\n",
      "|    ep_rew_mean      | -53.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 220      |\n",
      "|    fps              | 206      |\n",
      "|    time_elapsed     | 94       |\n",
      "|    total_timesteps  | 19506    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00183  |\n",
      "|    n_updates        | 2376     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 85.4     |\n",
      "|    ep_rew_mean      | -51.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 225      |\n",
      "|    fps              | 206      |\n",
      "|    time_elapsed     | 96       |\n",
      "|    total_timesteps  | 19942    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00183  |\n",
      "|    n_updates        | 2485     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=20000, episode_reward=-22.14 +/- 13.70\n",
      "Episode length: 66.40 +/- 29.36\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 66.4     |\n",
      "|    mean_reward      | -22.1    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 20000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0032   |\n",
      "|    n_updates        | 2499     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 83.7     |\n",
      "|    ep_rew_mean      | -43.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 230      |\n",
      "|    fps              | 204      |\n",
      "|    time_elapsed     | 99       |\n",
      "|    total_timesteps  | 20277    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0763   |\n",
      "|    n_updates        | 2569     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 82       |\n",
      "|    ep_rew_mean      | -41.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 235      |\n",
      "|    fps              | 203      |\n",
      "|    time_elapsed     | 101      |\n",
      "|    total_timesteps  | 20594    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0607   |\n",
      "|    n_updates        | 2648     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 81.1     |\n",
      "|    ep_rew_mean      | -39.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 240      |\n",
      "|    fps              | 203      |\n",
      "|    time_elapsed     | 102      |\n",
      "|    total_timesteps  | 20976    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0195   |\n",
      "|    n_updates        | 2743     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=21000, episode_reward=-37.09 +/- 18.21\n",
      "Episode length: 82.00 +/- 36.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 82       |\n",
      "|    mean_reward      | -37.1    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 21000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0437   |\n",
      "|    n_updates        | 2749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 80.9     |\n",
      "|    ep_rew_mean      | -37.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 245      |\n",
      "|    fps              | 201      |\n",
      "|    time_elapsed     | 106      |\n",
      "|    total_timesteps  | 21454    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0064   |\n",
      "|    n_updates        | 2863     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 80.3     |\n",
      "|    ep_rew_mean      | -35.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 250      |\n",
      "|    fps              | 201      |\n",
      "|    time_elapsed     | 108      |\n",
      "|    total_timesteps  | 21816    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00418  |\n",
      "|    n_updates        | 2953     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=22000, episode_reward=-17.86 +/- 12.71\n",
      "Episode length: 61.00 +/- 33.19\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 61       |\n",
      "|    mean_reward      | -17.9    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 22000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0048   |\n",
      "|    n_updates        | 2999     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 81.1     |\n",
      "|    ep_rew_mean      | -34.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 255      |\n",
      "|    fps              | 200      |\n",
      "|    time_elapsed     | 111      |\n",
      "|    total_timesteps  | 22236    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00899  |\n",
      "|    n_updates        | 3058     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 80.2     |\n",
      "|    ep_rew_mean      | -32.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 260      |\n",
      "|    fps              | 200      |\n",
      "|    time_elapsed     | 112      |\n",
      "|    total_timesteps  | 22578    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0514   |\n",
      "|    n_updates        | 3144     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 79       |\n",
      "|    ep_rew_mean      | -30.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 265      |\n",
      "|    fps              | 200      |\n",
      "|    time_elapsed     | 114      |\n",
      "|    total_timesteps  | 22953    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00337  |\n",
      "|    n_updates        | 3238     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=23000, episode_reward=-19.02 +/- 3.52\n",
      "Episode length: 89.80 +/- 20.40\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 89.8     |\n",
      "|    mean_reward      | -19      |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 23000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0036   |\n",
      "|    n_updates        | 3249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 78.5     |\n",
      "|    ep_rew_mean      | -28.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 270      |\n",
      "|    fps              | 198      |\n",
      "|    time_elapsed     | 117      |\n",
      "|    total_timesteps  | 23395    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00419  |\n",
      "|    n_updates        | 3348     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 79.2     |\n",
      "|    ep_rew_mean      | -27.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 275      |\n",
      "|    fps              | 198      |\n",
      "|    time_elapsed     | 119      |\n",
      "|    total_timesteps  | 23754    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0698   |\n",
      "|    n_updates        | 3438     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 76.5     |\n",
      "|    ep_rew_mean      | -25.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 280      |\n",
      "|    fps              | 198      |\n",
      "|    time_elapsed     | 120      |\n",
      "|    total_timesteps  | 23963    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0434   |\n",
      "|    n_updates        | 3490     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=24000, episode_reward=-17.76 +/- 2.08\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -17.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 24000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0492   |\n",
      "|    n_updates        | 3499     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 76.6     |\n",
      "|    ep_rew_mean      | -25.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 285      |\n",
      "|    fps              | 195      |\n",
      "|    time_elapsed     | 123      |\n",
      "|    total_timesteps  | 24188    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0324   |\n",
      "|    n_updates        | 3546     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 77.4     |\n",
      "|    ep_rew_mean      | -24.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 290      |\n",
      "|    fps              | 195      |\n",
      "|    time_elapsed     | 126      |\n",
      "|    total_timesteps  | 24687    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0118   |\n",
      "|    n_updates        | 3671     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=25000, episode_reward=-11.67 +/- 4.78\n",
      "Episode length: 84.00 +/- 32.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 84       |\n",
      "|    mean_reward      | -11.7    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 25000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00303  |\n",
      "|    n_updates        | 3749     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 76.6     |\n",
      "|    ep_rew_mean      | -23.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 295      |\n",
      "|    fps              | 193      |\n",
      "|    time_elapsed     | 129      |\n",
      "|    total_timesteps  | 25108    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00956  |\n",
      "|    n_updates        | 3776     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 77.5     |\n",
      "|    ep_rew_mean      | -23.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 300      |\n",
      "|    fps              | 193      |\n",
      "|    time_elapsed     | 131      |\n",
      "|    total_timesteps  | 25540    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0323   |\n",
      "|    n_updates        | 3884     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 76.7     |\n",
      "|    ep_rew_mean      | -22.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 305      |\n",
      "|    fps              | 193      |\n",
      "|    time_elapsed     | 133      |\n",
      "|    total_timesteps  | 25957    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00172  |\n",
      "|    n_updates        | 3989     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=26000, episode_reward=-28.17 +/- 11.58\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -28.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 26000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0342   |\n",
      "|    n_updates        | 3999     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 75.1     |\n",
      "|    ep_rew_mean      | -21.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 310      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 136      |\n",
      "|    total_timesteps  | 26221    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00674  |\n",
      "|    n_updates        | 4055     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73.9     |\n",
      "|    ep_rew_mean      | -20.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 315      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 137      |\n",
      "|    total_timesteps  | 26475    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.03     |\n",
      "|    n_updates        | 4118     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73       |\n",
      "|    ep_rew_mean      | -20.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 320      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 139      |\n",
      "|    total_timesteps  | 26807    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00415  |\n",
      "|    n_updates        | 4201     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=27000, episode_reward=-28.75 +/- 11.62\n",
      "Episode length: 84.40 +/- 31.20\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 84.4     |\n",
      "|    mean_reward      | -28.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 27000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00391  |\n",
      "|    n_updates        | 4249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 71.9     |\n",
      "|    ep_rew_mean      | -19.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 325      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 141      |\n",
      "|    total_timesteps  | 27133    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.1      |\n",
      "|    n_updates        | 4283     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 70.4     |\n",
      "|    ep_rew_mean      | -19.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 330      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 142      |\n",
      "|    total_timesteps  | 27318    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00593  |\n",
      "|    n_updates        | 4329     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 70.1     |\n",
      "|    ep_rew_mean      | -17.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 335      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 143      |\n",
      "|    total_timesteps  | 27608    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0436   |\n",
      "|    n_updates        | 4401     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 67.2     |\n",
      "|    ep_rew_mean      | -16.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 340      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 144      |\n",
      "|    total_timesteps  | 27700    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0384   |\n",
      "|    n_updates        | 4424     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 64.9     |\n",
      "|    ep_rew_mean      | -15.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 345      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 145      |\n",
      "|    total_timesteps  | 27941    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00443  |\n",
      "|    n_updates        | 4485     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=28000, episode_reward=-6.24 +/- 6.13\n",
      "Episode length: 48.00 +/- 42.51\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 48       |\n",
      "|    mean_reward      | -6.24    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 28000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00255  |\n",
      "|    n_updates        | 4499     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 64       |\n",
      "|    ep_rew_mean      | -14.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 350      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 148      |\n",
      "|    total_timesteps  | 28217    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00503  |\n",
      "|    n_updates        | 4554     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 61.8     |\n",
      "|    ep_rew_mean      | -13.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 355      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 148      |\n",
      "|    total_timesteps  | 28413    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00169  |\n",
      "|    n_updates        | 4603     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 60.7     |\n",
      "|    ep_rew_mean      | -12.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 360      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 149      |\n",
      "|    total_timesteps  | 28649    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0103   |\n",
      "|    n_updates        | 4662     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 59.7     |\n",
      "|    ep_rew_mean      | -12.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 365      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 151      |\n",
      "|    total_timesteps  | 28927    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0386   |\n",
      "|    n_updates        | 4731     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=29000, episode_reward=-15.11 +/- 7.54\n",
      "Episode length: 80.80 +/- 38.40\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 80.8     |\n",
      "|    mean_reward      | -15.1    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 29000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0073   |\n",
      "|    n_updates        | 4749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.5     |\n",
      "|    ep_rew_mean      | -12.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 370      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 153      |\n",
      "|    total_timesteps  | 29242    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0382   |\n",
      "|    n_updates        | 4810     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 56       |\n",
      "|    ep_rew_mean      | -11.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 375      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 153      |\n",
      "|    total_timesteps  | 29349    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0298   |\n",
      "|    n_updates        | 4837     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.1     |\n",
      "|    ep_rew_mean      | -12.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 380      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 155      |\n",
      "|    total_timesteps  | 29770    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0121   |\n",
      "|    n_updates        | 4942     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=30000, episode_reward=-11.05 +/- 12.87\n",
      "Episode length: 44.20 +/- 45.62\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 44.2     |\n",
      "|    mean_reward      | -11.1    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 30000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00745  |\n",
      "|    n_updates        | 4999     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 59.4     |\n",
      "|    ep_rew_mean      | -12.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 385      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 157      |\n",
      "|    total_timesteps  | 30126    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.11     |\n",
      "|    n_updates        | 5031     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.3     |\n",
      "|    ep_rew_mean      | -12.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 390      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 159      |\n",
      "|    total_timesteps  | 30521    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0646   |\n",
      "|    n_updates        | 5130     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 57.4     |\n",
      "|    ep_rew_mean      | -12.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 395      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 161      |\n",
      "|    total_timesteps  | 30848    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.147    |\n",
      "|    n_updates        | 5211     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=31000, episode_reward=-8.74 +/- 3.58\n",
      "Episode length: 49.80 +/- 27.07\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 49.8     |\n",
      "|    mean_reward      | -8.74    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 31000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.111    |\n",
      "|    n_updates        | 5249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 56.2     |\n",
      "|    ep_rew_mean      | -11.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 400      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 163      |\n",
      "|    total_timesteps  | 31160    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0295   |\n",
      "|    n_updates        | 5289     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 54.5     |\n",
      "|    ep_rew_mean      | -10.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 405      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 164      |\n",
      "|    total_timesteps  | 31404    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.018    |\n",
      "|    n_updates        | 5350     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 54.2     |\n",
      "|    ep_rew_mean      | -10.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 410      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 165      |\n",
      "|    total_timesteps  | 31645    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00706  |\n",
      "|    n_updates        | 5411     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=32000, episode_reward=-5.62 +/- 2.96\n",
      "Episode length: 66.40 +/- 42.23\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 66.4     |\n",
      "|    mean_reward      | -5.62    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 32000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00565  |\n",
      "|    n_updates        | 5499     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 55.3     |\n",
      "|    ep_rew_mean      | -10.8    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 415      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 168      |\n",
      "|    total_timesteps  | 32004    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0116   |\n",
      "|    n_updates        | 5500     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 52.9     |\n",
      "|    ep_rew_mean      | -10.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 420      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 168      |\n",
      "|    total_timesteps  | 32095    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00938  |\n",
      "|    n_updates        | 5523     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 52       |\n",
      "|    ep_rew_mean      | -9.57    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 425      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 169      |\n",
      "|    total_timesteps  | 32336    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00287  |\n",
      "|    n_updates        | 5583     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 53       |\n",
      "|    ep_rew_mean      | -9.67    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 430      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 171      |\n",
      "|    total_timesteps  | 32621    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00468  |\n",
      "|    n_updates        | 5655     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 53.5     |\n",
      "|    ep_rew_mean      | -9.57    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 435      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 172      |\n",
      "|    total_timesteps  | 32963    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00765  |\n",
      "|    n_updates        | 5740     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=33000, episode_reward=-13.79 +/- 14.68\n",
      "Episode length: 44.80 +/- 45.15\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 44.8     |\n",
      "|    mean_reward      | -13.8    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 33000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0619   |\n",
      "|    n_updates        | 5749     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 55.9     |\n",
      "|    ep_rew_mean      | -9.93    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 440      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 174      |\n",
      "|    total_timesteps  | 33286    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0183   |\n",
      "|    n_updates        | 5821     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.3     |\n",
      "|    ep_rew_mean      | -10.5    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 445      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 177      |\n",
      "|    total_timesteps  | 33775    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0619   |\n",
      "|    n_updates        | 5943     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=34000, episode_reward=-11.40 +/- 4.55\n",
      "Episode length: 81.40 +/- 37.20\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 81.4     |\n",
      "|    mean_reward      | -11.4    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 34000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00817  |\n",
      "|    n_updates        | 5999     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.7     |\n",
      "|    ep_rew_mean      | -10.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 450      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 179      |\n",
      "|    total_timesteps  | 34088    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0659   |\n",
      "|    n_updates        | 6021     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 61.8     |\n",
      "|    ep_rew_mean      | -10.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 455      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 181      |\n",
      "|    total_timesteps  | 34588    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0112   |\n",
      "|    n_updates        | 6146     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=35000, episode_reward=-12.22 +/- 3.73\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -12.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 35000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00723  |\n",
      "|    n_updates        | 6249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 64.4     |\n",
      "|    ep_rew_mean      | -11.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 460      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 184      |\n",
      "|    total_timesteps  | 35088    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0622   |\n",
      "|    n_updates        | 6271     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 65.7     |\n",
      "|    ep_rew_mean      | -11.3    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 465      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 186      |\n",
      "|    total_timesteps  | 35495    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0065   |\n",
      "|    n_updates        | 6373     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 65.6     |\n",
      "|    ep_rew_mean      | -11.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 470      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 187      |\n",
      "|    total_timesteps  | 35802    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0105   |\n",
      "|    n_updates        | 6450     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=36000, episode_reward=-10.95 +/- 2.60\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -11      |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 36000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.093    |\n",
      "|    n_updates        | 6499     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 69.5     |\n",
      "|    ep_rew_mean      | -11.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 475      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 190      |\n",
      "|    total_timesteps  | 36302    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00388  |\n",
      "|    n_updates        | 6575     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 69.3     |\n",
      "|    ep_rew_mean      | -11      |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 480      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 192      |\n",
      "|    total_timesteps  | 36703    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0113   |\n",
      "|    n_updates        | 6675     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=37000, episode_reward=-10.11 +/- 3.88\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -10.1    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 37000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0695   |\n",
      "|    n_updates        | 6749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 69.8     |\n",
      "|    ep_rew_mean      | -10.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 485      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 195      |\n",
      "|    total_timesteps  | 37107    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00721  |\n",
      "|    n_updates        | 6776     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 70.9     |\n",
      "|    ep_rew_mean      | -10.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 490      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 196      |\n",
      "|    total_timesteps  | 37607    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00697  |\n",
      "|    n_updates        | 6901     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=38000, episode_reward=-12.61 +/- 6.82\n",
      "Episode length: 81.00 +/- 38.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 81       |\n",
      "|    mean_reward      | -12.6    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 38000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0548   |\n",
      "|    n_updates        | 6999     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 71.6     |\n",
      "|    ep_rew_mean      | -10.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 495      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 199      |\n",
      "|    total_timesteps  | 38012    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00292  |\n",
      "|    n_updates        | 7002     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 72.6     |\n",
      "|    ep_rew_mean      | -10.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 500      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 201      |\n",
      "|    total_timesteps  | 38420    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00584  |\n",
      "|    n_updates        | 7104     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 72.7     |\n",
      "|    ep_rew_mean      | -10.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 505      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 202      |\n",
      "|    total_timesteps  | 38672    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00768  |\n",
      "|    n_updates        | 7167     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73.4     |\n",
      "|    ep_rew_mean      | -10.7    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 510      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 203      |\n",
      "|    total_timesteps  | 38986    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00228  |\n",
      "|    n_updates        | 7246     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=39000, episode_reward=-8.03 +/- 7.71\n",
      "Episode length: 61.20 +/- 47.52\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 61.2     |\n",
      "|    mean_reward      | -8.03    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 39000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0126   |\n",
      "|    n_updates        | 7249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73       |\n",
      "|    ep_rew_mean      | -10.6    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 515      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 206      |\n",
      "|    total_timesteps  | 39300    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00859  |\n",
      "|    n_updates        | 7324     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 77       |\n",
      "|    ep_rew_mean      | -11.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 520      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 208      |\n",
      "|    total_timesteps  | 39800    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00539  |\n",
      "|    n_updates        | 7449     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=40000, episode_reward=-13.43 +/- 2.83\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -13.4    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 40000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00629  |\n",
      "|    n_updates        | 7499     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 78.8     |\n",
      "|    ep_rew_mean      | -11.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 525      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 211      |\n",
      "|    total_timesteps  | 40216    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0168   |\n",
      "|    n_updates        | 7553     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 81       |\n",
      "|    ep_rew_mean      | -11.4    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 530      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 213      |\n",
      "|    total_timesteps  | 40716    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00653  |\n",
      "|    n_updates        | 7678     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 79.3     |\n",
      "|    ep_rew_mean      | -11.2    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 535      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 214      |\n",
      "|    total_timesteps  | 40896    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0164   |\n",
      "|    n_updates        | 7723     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=41000, episode_reward=-4.97 +/- 2.55\n",
      "Episode length: 46.80 +/- 43.74\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 46.8     |\n",
      "|    mean_reward      | -4.97    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 41000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00332  |\n",
      "|    n_updates        | 7749     |\n",
      "----------------------------------\n",
      "New best mean reward!\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 77.6     |\n",
      "|    ep_rew_mean      | -10.9    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 540      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 215      |\n",
      "|    total_timesteps  | 41043    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.134    |\n",
      "|    n_updates        | 7760     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73.9     |\n",
      "|    ep_rew_mean      | -10.1    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 545      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 215      |\n",
      "|    total_timesteps  | 41161    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0186   |\n",
      "|    n_updates        | 7790     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 71.7     |\n",
      "|    ep_rew_mean      | -9.58    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 550      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 216      |\n",
      "|    total_timesteps  | 41256    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00765  |\n",
      "|    n_updates        | 7813     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 67.6     |\n",
      "|    ep_rew_mean      | -9.18    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 555      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 216      |\n",
      "|    total_timesteps  | 41352    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0277   |\n",
      "|    n_updates        | 7837     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 63.8     |\n",
      "|    ep_rew_mean      | -8.56    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 560      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 217      |\n",
      "|    total_timesteps  | 41469    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0943   |\n",
      "|    n_updates        | 7867     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.5     |\n",
      "|    ep_rew_mean      | -8.27    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 565      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 218      |\n",
      "|    total_timesteps  | 41743    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00838  |\n",
      "|    n_updates        | 7935     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=42000, episode_reward=-10.17 +/- 1.19\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -10.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 42000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00549  |\n",
      "|    n_updates        | 7999     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.2     |\n",
      "|    ep_rew_mean      | -8.18    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 570      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 220      |\n",
      "|    total_timesteps  | 42018    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0482   |\n",
      "|    n_updates        | 8004     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 57.6     |\n",
      "|    ep_rew_mean      | -7.6     |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 575      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 220      |\n",
      "|    total_timesteps  | 42066    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0141   |\n",
      "|    n_updates        | 8016     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 56.6     |\n",
      "|    ep_rew_mean      | -7.53    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 580      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 222      |\n",
      "|    total_timesteps  | 42364    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0449   |\n",
      "|    n_updates        | 8090     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 57.6     |\n",
      "|    ep_rew_mean      | -7.49    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 585      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 224      |\n",
      "|    total_timesteps  | 42864    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0114   |\n",
      "|    n_updates        | 8215     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=43000, episode_reward=-8.59 +/- 3.45\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -8.59    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 43000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00652  |\n",
      "|    n_updates        | 8249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 57.5     |\n",
      "|    ep_rew_mean      | -7.35    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 590      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 227      |\n",
      "|    total_timesteps  | 43362    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00693  |\n",
      "|    n_updates        | 8340     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 58.5     |\n",
      "|    ep_rew_mean      | -7.43    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 595      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 229      |\n",
      "|    total_timesteps  | 43862    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0122   |\n",
      "|    n_updates        | 8465     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=44000, episode_reward=-10.54 +/- 2.74\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -10.5    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 44000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0115   |\n",
      "|    n_updates        | 8499     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 59.4     |\n",
      "|    ep_rew_mean      | -7.48    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 600      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 232      |\n",
      "|    total_timesteps  | 44362    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0122   |\n",
      "|    n_updates        | 8590     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 60.2     |\n",
      "|    ep_rew_mean      | -7.57    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 605      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 234      |\n",
      "|    total_timesteps  | 44690    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0898   |\n",
      "|    n_updates        | 8672     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=45000, episode_reward=-15.67 +/- 2.09\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -15.7    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 45000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0159   |\n",
      "|    n_updates        | 8749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 60.9     |\n",
      "|    ep_rew_mean      | -7.55    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 610      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 236      |\n",
      "|    total_timesteps  | 45076    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00598  |\n",
      "|    n_updates        | 8768     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.8     |\n",
      "|    ep_rew_mean      | -7.82    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 615      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 238      |\n",
      "|    total_timesteps  | 45576    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00351  |\n",
      "|    n_updates        | 8893     |\n",
      "----------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eval num_timesteps=46000, episode_reward=-9.66 +/- 5.18\n",
      "Episode length: 81.20 +/- 37.60\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 81.2     |\n",
      "|    mean_reward      | -9.66    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 46000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00381  |\n",
      "|    n_updates        | 8999     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.8     |\n",
      "|    ep_rew_mean      | -7.78    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 620      |\n",
      "|    fps              | 190      |\n",
      "|    time_elapsed     | 241      |\n",
      "|    total_timesteps  | 46076    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0161   |\n",
      "|    n_updates        | 9018     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.7     |\n",
      "|    ep_rew_mean      | -7.67    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 625      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 242      |\n",
      "|    total_timesteps  | 46490    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00961  |\n",
      "|    n_updates        | 9122     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 62.7     |\n",
      "|    ep_rew_mean      | -7.59    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 630      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 244      |\n",
      "|    total_timesteps  | 46990    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0168   |\n",
      "|    n_updates        | 9247     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=47000, episode_reward=-10.98 +/- 2.47\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -11      |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 47000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0803   |\n",
      "|    n_updates        | 9249     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 65.3     |\n",
      "|    ep_rew_mean      | -7.81    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 635      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 247      |\n",
      "|    total_timesteps  | 47424    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.007    |\n",
      "|    n_updates        | 9355     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 66.9     |\n",
      "|    ep_rew_mean      | -7.94    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 640      |\n",
      "|    fps              | 192      |\n",
      "|    time_elapsed     | 248      |\n",
      "|    total_timesteps  | 47731    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0141   |\n",
      "|    n_updates        | 9432     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=48000, episode_reward=-10.21 +/- 3.78\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -10.2    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 48000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0169   |\n",
      "|    n_updates        | 9499     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 70.7     |\n",
      "|    ep_rew_mean      | -8.21    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 645      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 251      |\n",
      "|    total_timesteps  | 48231    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0111   |\n",
      "|    n_updates        | 9557     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 73.9     |\n",
      "|    ep_rew_mean      | -8.65    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 650      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 253      |\n",
      "|    total_timesteps  | 48642    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00841  |\n",
      "|    n_updates        | 9660     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 76       |\n",
      "|    ep_rew_mean      | -8.78    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 655      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 255      |\n",
      "|    total_timesteps  | 48952    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00538  |\n",
      "|    n_updates        | 9737     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=49000, episode_reward=-5.17 +/- 1.61\n",
      "Episode length: 81.00 +/- 38.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 81       |\n",
      "|    mean_reward      | -5.17    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 49000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0108   |\n",
      "|    n_updates        | 9749     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 77.9     |\n",
      "|    ep_rew_mean      | -8.95    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 660      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 257      |\n",
      "|    total_timesteps  | 49263    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.0153   |\n",
      "|    n_updates        | 9815     |\n",
      "----------------------------------\n",
      "----------------------------------\n",
      "| rollout/            |          |\n",
      "|    ep_len_mean      | 79.2     |\n",
      "|    ep_rew_mean      | -8.99    |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    episodes         | 665      |\n",
      "|    fps              | 191      |\n",
      "|    time_elapsed     | 259      |\n",
      "|    total_timesteps  | 49667    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00768  |\n",
      "|    n_updates        | 9916     |\n",
      "----------------------------------\n",
      "Eval num_timesteps=50000, episode_reward=-8.72 +/- 4.92\n",
      "Episode length: 100.00 +/- 0.00\n",
      "----------------------------------\n",
      "| eval/               |          |\n",
      "|    mean_ep_length   | 100      |\n",
      "|    mean_reward      | -8.72    |\n",
      "| rollout/            |          |\n",
      "|    exploration_rate | 0.05     |\n",
      "| time/               |          |\n",
      "|    total_timesteps  | 50000    |\n",
      "| train/              |          |\n",
      "|    learning_rate    | 0.0001   |\n",
      "|    loss             | 0.00402  |\n",
      "|    n_updates        | 9999     |\n",
      "----------------------------------\n",
      "Completed training\n"
     ]
    }
   ],
   "source": [
    "from stable_baselines3 import DQN\n",
    "\n",
    "# Separate evaluation env\n",
    "eval_env = YourDoubleEnvDiscrete()\n",
    "\n",
    "# Use deterministic actions for evaluation\n",
    "eval_callback = EvalCallback(eval_env,  best_model_save_path='./RL_logs/DQN',\n",
    "    log_path='./RL_logs/', eval_freq=1000,\n",
    "    deterministic=True, render=False)\n",
    "\n",
    "env = YourDoubleEnvDiscrete()\n",
    "\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "env.seed(seed)\n",
    "\n",
    "dqn_model = DQN(\"MlpPolicy\", env, verbose=1, learning_starts=10000, tensorboard_log=\"./hands-on_rl_tensorboard\")\n",
    "print(\"Starting training...\")\n",
    "dqn_model.learn(total_timesteps=50000, callback=eval_callback, log_interval=5, tb_log_name=\"hands_on_rl_DQN\")\n",
    "dqn_model.save('./saved_models/RL_agent_DQN')\n",
    "print(\"Completed training\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "ebb12679",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    },
    {
     "ename": "UnboundLocalError",
     "evalue": "local variable 'converted_action' referenced before assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
      "Input \u001b[1;32mIn [135]\u001b[0m, in \u001b[0;36m<cell line: 7>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m test_env \u001b[38;5;241m=\u001b[39m YourDoubleEnvDiscrete()\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(dqn_model\u001b[38;5;241m.\u001b[39mpredict([\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.2\u001b[39m,\u001b[38;5;241m0.2\u001b[39m,\u001b[38;5;241m0.2\u001b[39m,\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.2\u001b[39m])[\u001b[38;5;241m0\u001b[39m])\n\u001b[1;32m----> 7\u001b[0m \u001b[43mtest_trained_agent\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_env\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdqn_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrender_opt\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "Input \u001b[1;32mIn [114]\u001b[0m, in \u001b[0;36mtest_trained_agent\u001b[1;34m(environment, agent, test_episodes_to_run, render_opt)\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m done:\n\u001b[0;32m     20\u001b[0m     action, _states \u001b[38;5;241m=\u001b[39m model\u001b[38;5;241m.\u001b[39mpredict(obs, deterministic\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m---> 21\u001b[0m     obs, rewards, done, info \u001b[38;5;241m=\u001b[39m \u001b[43mtest_env\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     22\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m render_opt:\n\u001b[0;32m     23\u001b[0m         test_env\u001b[38;5;241m.\u001b[39mrender() \u001b[38;5;66;03m# Use if you want to observe the agent\u001b[39;00m\n",
      "Input \u001b[1;32mIn [125]\u001b[0m, in \u001b[0;36mYourDoubleEnvDiscrete.step\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m     62\u001b[0m success \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m    \n\u001b[0;32m     63\u001b[0m \u001b[38;5;66;03m################################################################################################################################################################\u001b[39;00m\n\u001b[0;32m     64\u001b[0m \u001b[38;5;66;03m# Implement the code below!!\u001b[39;00m\n\u001b[0;32m     65\u001b[0m \u001b[38;5;66;03m################################################################################################################################################################\u001b[39;00m\n\u001b[0;32m     66\u001b[0m \n\u001b[0;32m     67\u001b[0m \u001b[38;5;66;03m# Hint: Number of steps taken in environment is tracked in self.counter\u001b[39;00m\n\u001b[1;32m---> 70\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_take_action\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m \u001b[38;5;66;03m# Actually take action: Define your _take_action function below!! \u001b[39;00m\n\u001b[0;32m     71\u001b[0m reward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_reward() \u001b[38;5;66;03m# Get your reward: Define your _get_reward function below!! Returns a reward value.\u001b[39;00m\n\u001b[0;32m     73\u001b[0m state \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate\n",
      "Input \u001b[1;32mIn [125]\u001b[0m, in \u001b[0;36mYourDoubleEnvDiscrete._take_action\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m    121\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m action\u001b[38;5;241m==\u001b[39m\u001b[38;5;241m4\u001b[39m:\n\u001b[0;32m    122\u001b[0m     converted_action\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m\n\u001b[1;32m--> 124\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mphase_correction \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[43mconverted_action\u001b[49m \u001b[38;5;66;03m# Phase correction tracks previous actions taken to get the cumulative change from start.\u001b[39;00m\n\u001b[0;32m    126\u001b[0m \u001b[38;5;66;03m# Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\u001b[39;00m\n\u001b[0;32m    127\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mphase_set \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m converted_action\n",
      "\u001b[1;31mUnboundLocalError\u001b[0m: local variable 'converted_action' referenced before assignment"
     ]
    }
   ],
   "source": [
    "%matplotlib qt\n",
    "# Reset environment\n",
    "# Create new test env\n",
    "test_env = YourDoubleEnvDiscrete()\n",
    "print(dqn_model.predict([-0.2,0.2,0.2,-0.2])[0])\n",
    "\n",
    "test_trained_agent(test_env, dqn_model, render_opt=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "vscode": {
   "interpreter": {
    "hash": "c3a8bfbd7fd94e6c5875dc94d11f6d20ee55113703ee5cc439085bac8c32f553"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
