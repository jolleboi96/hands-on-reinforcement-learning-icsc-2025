{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4dd5661c",
   "metadata": {},
   "source": [
    "# Loading venv and importing packages\n",
    "\n",
    "We will be using a well-known RL library called Stable Baselines 3 during this excercise for their implementations of advanced RL algorithms. The library is based on PyTorch. To save you all some setting up time a virtual environment has been prepared for you. Running the code below will activate it in this notebook and allow you to access all necessary packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d15b5c2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.9/site-packages\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import site\n",
    "import sys\n",
    "venv_location = '/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl' #'./hansOn-venv' #/eos/project/s/sy-rf-br/Training/hansOn-venv'\n",
    "venv_site_packages = os.path.join(\n",
    "        venv_location, 'lib', 'python{}.{}'.format(*sys.version_info), 'site-packages')\n",
    "    \n",
    "# If the venv site-packages doesn't exist on the path already, insert it right\n",
    "# before the underlying Python's site-packages.\n",
    "if venv_site_packages not in sys.path:\n",
    "    posn = -1\n",
    "    site_package_dirs = [\n",
    "        index for index, path in enumerate(sys.path) if path.endswith('site-packages')]\n",
    "    print\n",
    "    if site_package_dirs:\n",
    "        posn = site_package_dirs[0]\n",
    "        \n",
    "    sys.path.insert(posn, venv_site_packages)\n",
    "    print(venv_site_packages)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5543aa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import datetime\n",
    "from utils import profile_reward_quad, isolate_bunches_from_dm_profile\n",
    "from datamatrix_lookup_class_quad import Datamatrix_lookup_class_quad\n",
    "import copy\n",
    "from torchvision import transforms\n",
    "from dataloader import ToTensor, Normalize, AddNoise\n",
    "import random\n",
    "import gym\n",
    "\n",
    "transform=transforms.Compose([\n",
    "            Normalize(),\n",
    "            ToTensor(),\n",
    "            AddNoise(),\n",
    "        ])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eea58ab1",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "In order to perform machine learning, we must have access to good data. This is true also in for RL. In the context of CERN and machine learning in accelerators, there are two common approaches:\n",
    "\n",
    "- either using real measured data acquired during operation of the machines, \n",
    "- or simulating the process using some computer code.\n",
    "\n",
    "In the case of reinforcement learning, there are some differences in how our agents (in our cases, defined using neural networks), learn from their data. Rather than simply training on a supervised dataset with inputs and targets, the agent learns through trial and error during interaction with an *environment*. The environment supplies the agent with a certain state, describing the current state of whatever problem the agent is tasked with solving. This state is given to the agent, which then makes an action affecting the environment and landing in a new state. An evaluation is run whether the action taken and the new state that we landed in was better or worse than the one before, and a *reward* is calculated. This reward describes how good the action was, and both the reward and new state are sent to the agent which then takes another action. This loop continues until the agent reaches some end criterion, which could for example be a number of steps or if the agent reaches a certain state. The goal of the agent during training is to maximize its total cumulative reward, which is often called the *return*. This general process is described in the agent-environment interaction loop.\n",
    "\n",
    "we also need to apply some form of labeling to our data, stating what we want our neural network to learn to predict (in this excercise, the labels will be the phase offset of a certain RF cavity). Since we often require a lot of data in order to train a network to a good generalized solution, it is common to prefer simulation over the real machine; it is easier to control, cheaper to acquire many acquisitions, and one can self-label data using the inputs given to the simulation. However, if your simulation is not close enough to the real machine, you may run into problems when trying to predict on real data.\n",
    "\n",
    "### Problem description\n",
    "\n",
    "As an example problem we will be using an RF-manipulation that is done in the PS during creation of LHC-type beams: a double-splitting. In short, it constitutes taking one bunch placed in a single RF-bucket, and splitting it into two perfectly equal new bunches in their own respective buckets. By equal, we mean that they have the same characteristics; same bunch length, intensity, emmitance etc. In practice this splitting is done by lowering the voltage of the initial RF-cavity (in this case the cavity with harmonic h=21) while raising the voltage of the next one (of double harmonic number, h=42). In so doing we double the amounts of buckets that are available in the accelerator and if done correctly, split the initial bunch into two. \n",
    "\n",
    "However, if the timing between the two RF-cavities is not properly aligned the two end bunches will look very different; you end up with more particles and different characteristics in one bucket compared to the other. This misalignment can be considered a phase offset between the phases of the two RF cavities, and when optimized the phase offset should be zero. This offset will be the parameter that we train our networks to predict, given certain characteristics of the current splitting, so that one would be able to correct it easily."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ae21974",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "10756b38",
   "metadata": {},
   "source": [
    "<img src=\"./input_files/LHC25%2348b_BCMS_PS_TFB_2018/foursplitb6_datamatrix.png\" alt=\"foursplit\" width=\"600\"/>\n",
    "\n",
    "This is the evolution of the bunch profile in the longitudinal direction (x-axis, expressed in time), during the manipulation (y-axis, expressed in number of machine turns). Each line in the plot corresponds to a measured profile in the Wall Current Monitor. Both a first and second double splitting can be seen, an error in phase between the rf systems at each step will result in a non-uniform distribution of the particles in the end. note that we have $12$ to $18$ bunches at the start (in $h=21$), yielding $48$ to $72$ bunches after the manipulation. Only one bunch is shown here, all should be identical if the prior manipulations are done correctly..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07840ea3",
   "metadata": {},
   "source": [
    "As an example, we can run a single simulation of the double splitting using blond to create our version of the image above (but with only one double splitting)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7de2d39a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import function that runs the simulation\n",
    "from run_doublesplit_sim import simulate_doublesplit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e566903e",
   "metadata": {},
   "source": [
    "## An example: Run one simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c5ec8e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the phase offset in the h42 RF that you want to simulate \n",
    "\n",
    "phase_42_offset = __ADD_HERE__ # <------ Add a phase offset you want to simulate here.Choose something between [-45,45] degrees (0 will create the optimal splitting).\n",
    "phase_84_offset = __ADD_HERE__ # <------ Add a phase offset you want to simulate here.Choose something between [-45,45] degrees (0 will create the optimal splitting)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d758194b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "./hansOn-venv/lib/python3.6/site-packages/blond/input_parameters/ring.py:227: UserWarning: WARNING in Ring: The number of turns for the simulation was changed by passing a momentum program.\n",
      "  \"program.\")\n",
      "./hansOn-venv/lib/python3.6/site-packages/blond/input_parameters/rf_parameters.py:434: RuntimeWarning: invalid value encountered in true_divide\n",
      "  acceleration_ratio = denergy/(Particle.charge*RFStation.voltage[0, :])\n",
      "./hansOn-venv/lib/python3.6/site-packages/blond/input_parameters/rf_parameters.py:435: RuntimeWarning: invalid value encountered in greater\n",
      "  acceleration_test = np.where((acceleration_ratio > -1) *\n",
      "./hansOn-venv/lib/python3.6/site-packages/blond/input_parameters/rf_parameters.py:436: RuntimeWarning: invalid value encountered in less\n",
      "  (acceleration_ratio < 1) is False)[0]\n",
      "./hansOn-venv/lib/python3.6/site-packages/blond/input_parameters/rf_parameters.py:453: RuntimeWarning: invalid value encountered in remainder\n",
      "  phi_s[index] = (np.pi - phi_s[index]) % (2*np.pi)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 stationary bunches without intensity generated\n",
      "Turn 0 over 47682, ETC: 0:01:19.733082\n",
      "Turn 5000 over 47682, ETC: 0:00:52.018972\n",
      "Turn 10000 over 47682, ETC: 0:00:58.442200\n",
      "Turn 15000 over 47682, ETC: 0:00:39.370277\n",
      "Turn 20000 over 47682, ETC: 0:00:32.777027\n",
      "Turn 25000 over 47682, ETC: 0:00:34.880841\n",
      "Turn 30000 over 47682, ETC: 0:00:27.547111\n",
      "Turn 35000 over 47682, ETC: 0:00:19.314181\n",
      "Turn 40000 over 47682, ETC: 0:00:14.361683\n",
      "Turn 45000 over 47682, ETC: 0:00:04.141744\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "./hansOn-venv/lib/python3.6/site-packages/blond/toolbox/filters_and_fitting.py:130: RuntimeWarning: invalid value encountered in true_divide\n",
      "  lineDenNormalized = Y_array / np.trapz(Y_array, dx=timeResolution)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run the simulation\n",
    "\n",
    "datamatrix, bunch_lengths, profile = simulate_doublesplit(phase_42_offset)\n",
    "\n",
    "# ignore the warnings..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9ec17540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculated final bunch lengths: [2.49799918e-08 2.50378987e-08]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results of the simulation and print the computed bunch lengths.\n",
    "\n",
    "plt.figure()\n",
    "plt.imshow(datamatrix)\n",
    "plt.title('Bunch evolution')\n",
    "plt.xlabel('time (0.5ns/bin)')\n",
    "plt.ylabel('Turn/400')\n",
    "plt.figure()\n",
    "plt.plot(profile[0], profile[1])\n",
    "plt.title('Final bunch profile')\n",
    "plt.xlabel('time (0.5ns/bin)')\n",
    "plt.ylabel('Current')\n",
    "print(f'Calculated final bunch lengths: {bunch_lengths}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69cbab5a",
   "metadata": {},
   "source": [
    "Since each simulation takes a bit of time, a dataset has been prepared for you beforehand. The dataset was created by simulating 361 different phase offsets linearly spaced between -45 and 45 degrees and saving the final bunch lengths, the bunch profile, and the datamatrix.\n",
    "\n",
    "We will now load these datasets and and use the different parts of the data as inputs to neural networks, and see if we can train some feature extractors to predict the phase offset used to simulate the data itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9bfb6582",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '.askdksdk/double/dataset_bls.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_516/1681565769.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# dataset consisting of bunch lengths after splitting.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mcsv_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'dataset_bls'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mdataloader_bls\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDoublesplitDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'bls'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcsv_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mr'.askdksdk/double/{}.csv'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsv_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Number of entries in dataset: {len(dataloader_bls)}.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/home-j/jwulff/SWAN_projects/hands-on-supervised-learning-2022/dataloader_double.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, type, csv_file, root_dir, vpc, noise, transform)\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcsv_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m             \u001b[0mreader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m             \u001b[0mimg_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreader\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# [label1, label2, data filepath]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '.askdksdk/double/dataset_bls.csv'"
     ]
    }
   ],
   "source": [
    "### Nothing to fill in here, simply run the cell. ###\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Add explanation and introduction to supervised learning, training data, labels, output. Introduce loss...\n",
    "\n",
    "Reverse what we do druing simulation: go from profile/bunch characteristics to phase offset.\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "\n",
    "# Load pre-simulated dataset. Datapoints for 361 phase offsets between -45 and 45 degrees.\n",
    "from dataloader_double import DoublesplitDataset\n",
    "\n",
    "# Three different types of datasets will be used in this session. First, we start with a\n",
    "# dataset consisting of bunch lengths after splitting.\n",
    "csv_name = 'dataset_bls'\n",
    "dataloader_bls = DoublesplitDataset(type = 'bls', csv_file = r'/eos/home-j/jwulff/SWAN_projects/Hands-on_Supervised_learning/double/{}.csv'.format(csv_name))\n",
    "print(f'Number of entries in dataset: {len(dataloader_bls)}.')\n",
    "\n",
    "# Load an example data entry\n",
    "sample = next(iter(dataloader_bls))\n",
    "print(sample)\n",
    "\n",
    "# sample['data'] gives an array of the bunch lengths, sample['labels'] gives the phase offset used for simulation.\n",
    "# The dataloader converts the saved numpy arrays into pytorch tensors for use during training."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd686deb",
   "metadata": {},
   "source": [
    "In the printed sample above you can see the normalized bunch lengths in the 'data' key and the normalized label in the 'labels' key. To get the true bunch length and labels you can multiply as in the following cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f94764c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bunch lengths = tensor([[2.5926e-08, 2.4499e-08]], dtype=torch.float64), Phase offset = tensor([-10.], dtype=torch.float64)\n"
     ]
    }
   ],
   "source": [
    "print('Bunch lengths = {}, Phase offset = {}'.format(sample['data']*3.05229e-08, sample['labels']*45))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8f8f2e6",
   "metadata": {},
   "source": [
    " It is common practice in deep learning applications to normalize your inputs and outputs to be in a similar scale for numerical reasons, and it has been shown to improve stability during training. You can read more about why this is a good idea here: https://machinelearningmastery.com/how-to-improve-neural-network-stability-and-modeling-performance-with-data-scaling/ ."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ade0aea0",
   "metadata": {},
   "source": [
    "To get a better understanding of how bunch lengths are related to the phase offset, we can iterate over the entire dataset and plot the bunch length at the end of the simulation for both the first and second bunch:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "32880683",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fbfd6490668>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "phase_offsets = []\n",
    "bls_1 = []\n",
    "bls_2 = []\n",
    "\n",
    "### Iterate over each datapoint in dataloader_bls ###\n",
    "\n",
    "for i, data in enumerate(dataloader_bls):\n",
    "    \n",
    "    \n",
    "    ### and save the bunch lengths of bunch 1 and bunch 2 in separate arrays ###\n",
    "    bls, phase_offset = data['data'].float().squeeze(), data['labels'].float().squeeze()\n",
    "    bls_1.append(bls[0])\n",
    "    bls_2.append(bls[1])\n",
    "    phase_offsets.append(phase_offset.item())\n",
    "\n",
    "### Plot the two bunch lengths against the normalized phase offset.\n",
    "plt.figure()\n",
    "plt.plot(phase_offsets ,bls_1,'.', label='Norm. Bunch 1 length')\n",
    "plt.plot(phase_offsets,bls_2,'.', label='Norm. Bunch 2 length')\n",
    "plt.xlabel(\"Normalized phase offset\")\n",
    "plt.axvline(x = 0, linestyle='--', color='k', label='No offset')\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e68537",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "In the figure above we see how the two different bunches length correspond to different phase offsets. The blue dots show the length of bunch 1 going from longest at a large negative offset, to smallest at a large positive offset. The orange dots of bunch 2 show the opposite evolution with respect to the phase offset.\n",
    "\n",
    "It is clear to see that the larger the offset, the bigger the difference between the two bunch lengths. It also seems reasonable to assume that given the two final bunch lengths, one would be able to roughly estimate the phase offset. Therefore, this is precisely what we will try to train a model to do: For starters,\n",
    "\n",
    "- the model will receive the two normalized bunch lengths as input, i.e. number_of_input_features = 2,\n",
    "- and the model will output a single predicted phase offset, i.e. num_output_features = 1.\n",
    "\n",
    "In the next section we define a simple neural network with the goal of learning this task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8f2659df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data dictionary compiled.\n"
     ]
    }
   ],
   "source": [
    "# Initialize data_class. This class can provide you with simulated tomoscope acquisitions for various phase offsets in both the h=42 or h=84 harmonics.\n",
    "\n",
    "data_class = Datamatrix_lookup_class_quad()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7f2a190f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# As an example, you can try to get a few different data entries for h=42 offsets and plot the datamatrices\n",
    "\n",
    "phases = [0, 20, -5, 10.5]\n",
    "for phase_offset in phases:\n",
    "    \n",
    "    datamatrix = data_class.get_interpolated_matrix(phase_offset, 0)\n",
    "    plt.figure()\n",
    "    plt.subplot(121)\n",
    "    plt.title(f'Data entry for phase error {phase_offset}')\n",
    "    plt.imshow(datamatrix)\n",
    "    plt.subplot(122)\n",
    "    plt.title('Profile after the first double splitting')\n",
    "    plt.plot(datamatrix[99,:])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "888a32d4",
   "metadata": {},
   "source": [
    "# Part 1\n",
    "\n",
    "## Defining your environment\n",
    "\n",
    "Before we can train any cool RL agents, we need to define the environment it will interact with. To do this, we will leverage the very widely adopted OpenAI Gym framework https://www.gymlibrary.dev/.\n",
    "\n",
    "<img src=\"./images/agent-environment.PNG\" alt=\"rf program\" width=\"600\"/>\n",
    "\n",
    "## The Gym - implements the agent-environment interaction loop\n",
    "\n",
    "The gym interface is simple, pythonic, and capable of representing general RL problems. By defining only a few required functions, a user can create their very own environment to test their agents in, and thanks to the standardized methods other RL-libraries can often be used with these environments without any further changes required (such as Stable baselines3, which we will use for the implementation of our deep learning actor-critic agents).\n",
    "\n",
    "A custom environment is created as a class that inherits the base class gym.env from the gym package. An example of a skeleton environment is seen in the code cell below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "689e1549",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (889947635.py, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_1074/889947635.py\"\u001b[0;36m, line \u001b[0;32m10\u001b[0m\n\u001b[0;31m    def __init__(self, arg1, arg2, ...):\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "### EXAMPLE OF CUSTOM ENVIRONMENT SKELETON CLASS ###\n",
    "\n",
    "import gym\n",
    "from gym import spaces\n",
    "\n",
    "class CustomEnv(gym.Env):\n",
    "  \"\"\"Custom Environment that follows gym interface\"\"\"\n",
    "  metadata = {'render.modes': ['human']}\n",
    "\n",
    "  def __init__(self, arg1, arg2, ...):\n",
    "    super(CustomEnv, self).__init__()\n",
    "    # Define action and observation space\n",
    "    # They must be gym.spaces objects!\n",
    "    \n",
    "    # Example with 2D action of value [-1,1]:\n",
    "    self.action_space = spaces.Box(\n",
    "                                  low=np.array([-1,-1]),\n",
    "                                  high=np.array([1,1]),\n",
    "                                  shape=(2,), dtype=np.float32)\n",
    "    # Example for using a vector of length 2 with values between [-1,1] as input:\n",
    "    self.observation_space = spaces.Box(low=np.array([-1,-1]),\n",
    "                                        high=np.array([1,1]),\n",
    "                                        shape=(2,), dtype=np.float32)\n",
    "\n",
    "  def step(self, action):\n",
    "    \"\"\"\n",
    "    The step function always takes (self, action) as input, and always returns (observation, reward, done, info).\n",
    "    Here, observation will connect to the latest state, reward is the latest returned reward (so a number), done: boolean, info: dictionary with information.\n",
    "    \"\"\"\n",
    "    ...\n",
    "    return observation, reward, done, info\n",
    "  def reset(self):\n",
    "    ...\n",
    "    return observation  # reward, done, info can't be included\n",
    "  def render(self, mode='human'):\n",
    "    ...\n",
    "  def close (self):\n",
    "    ..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9db14ef",
   "metadata": {},
   "source": [
    "In the code above you can see several functions that should be implemented if you want to use the basic gym interface. The only really required functions are:\n",
    "\n",
    "- **Defining your action/observation space:** this will affect the input and output size of your agents\n",
    "- **The step() function:** Defines how your agent takes a step in your environment.\n",
    "- **The reset() function:** Will be called whenever an episode ends before starting the next episode.\n",
    "\n",
    "The render and close functions are not necessary, but can allow you to observe (or render) your environment to allow you to monitor your agents behaviour during training/testing and the close() function is to allow you to close your rendering window should this be required.\n",
    "\n",
    "In addition to these base functions, we will create some more basic helper functions to use inside the base functions to structure our code more nicely, namely:\n",
    "\n",
    "- **_take_action(self, action):** Actually takes the action in the environment and updates the state. - You need to finish implementation!\n",
    "- **_get_state(self):** Get the observable given the current state we are in (evaluated from self.state) - This one is provided already!\n",
    "- **_get_reward(self):** Calculate the reward given the current state. - You need to finish implementation!\n",
    "\n",
    "\n",
    "Once we have all of these functions defined and set up in a class we will be able to train different kinds of RL agents in the same environment without the need to change almost anything. One does however need to make sure that the algorithm you want to use matches the action/observation spaces defined (for example continuous or discrete).\n",
    "\n",
    "## Implementing your environment\n",
    "\n",
    "A class with some basic code is provided in the block below with some important functions left out. To ease the work on your side, I have left some helping code for loading simulated datapoints, interpolating them to allow for continuous actions, and initialised a lot of lists to keep track of important data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "02b4ed41",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'gym' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_1240/3099067909.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# some self variables that you could use in the real environment class\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mclass\u001b[0m \u001b[0mYourDoubleEnv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;31m# Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/ipykernel_1240/3099067909.py\u001b[0m in \u001b[0;36mYourDoubleEnv\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0;31m# actions will be should be normalized to be within [-1,1] for optimisation reasons.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     action_space = gym.spaces.Box(\n\u001b[0m\u001b[1;32m     11\u001b[0m                                 \u001b[0mlow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m#__, # Fill in the __ with your action settings.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m                                 \u001b[0mhigh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m#__,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'gym' is not defined"
     ]
    }
   ],
   "source": [
    "action = 0.52 # A vector of dimension and range specified in self.action_space. For this example, a value in the range [-1,1].\n",
    "\n",
    "# some self variables that you could use in the real environment class\n",
    "class YourDoubleEnv():\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,]),#__, # Fill in the __ with your action settings.\n",
    "                                high = np.array([1,]),#__,\n",
    "                                shape=(1,),\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = np.array([-1,-1,-1,-1]), # Fill in the __ with your observation settings.\n",
    "                                high = np.array([-1,-1,-1,-1]),\n",
    "                                shape=(4,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Stop criteria (constituting \"good\" splittings with provided difference estimate).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    \n",
    "    max_step_size = 20\n",
    "    phase_set = -20\n",
    "    phase_correction = 0\n",
    "    min_setting = -30\n",
    "    max_setting = 30\n",
    "\n",
    "    ### Status of the iterations\n",
    "    # Steps, initializing lists to store actions/states/rewards...\n",
    "    counter = 0\n",
    "    curr_step = -1  ## Not used ?\n",
    "    \n",
    "    # Episodes\n",
    "    curr_episode = -1\n",
    "    action_episode_memory = []\n",
    "    diff_estimate_memory = []\n",
    "    state_memory = []\n",
    "    phase_set_memory = []\n",
    "    reward_memory = []\n",
    "    is_finalized = False\n",
    "    \n",
    "\n",
    "    def __init__(self):\n",
    "        \n",
    "        pass\n",
    "    \n",
    "    def step(self, action):\n",
    "        \"\"\"\n",
    "        One step/action in the environment, returning the observable\n",
    "        and reward. \n",
    "\n",
    "        Stopping conditions: max_steps reached, or splitting good enough.\n",
    "        \"\"\"\n",
    "        success = False    \n",
    "        \n",
    "        self._take_action(action) # Actually take action: Define your _take_action function below!! \n",
    "        reward = self._get_reward() # Get your reward: Define your _get_reward function below!! Returns a reward value.\n",
    "\n",
    "        state = self.state\n",
    "        \n",
    "        ### Check exit criteria: Achieved good enough state, or taken too many steps.\n",
    "        ### Depending on the reward function you use, what criteria should be achieved to consider an episode a success?\n",
    "\n",
    "        if abs(self.diff_estimate) < BUNCH_LENGTH_INT_CRITERIA: # Check if the diff_estimate is below criterion. If so, episode finalized and a success!\n",
    "            self.is_finalized = True \n",
    "            success = True\n",
    "            \n",
    "        if self.counter >= self.max_steps: # Check if you have exceeded the maximum step limit. If so, episode finalized but not a success...\n",
    "            self.is_finalized = True\n",
    "\n",
    "        \n",
    "        info = {'success': success} # Here you can add any info you like, e.g. episode steps, rewards, actions etc.\n",
    "        \n",
    "        \n",
    "        ### Some tracking of state, phase, reward, diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        self.state_memory[self.curr_episode].append(state)\n",
    "        self.phase_set_memory[self.curr_episode].append(self.phase_set)\n",
    "        self.reward_memory[self.curr_episode].append(reward)\n",
    "        curr_diff_estimate = np.copy(self.diff_estimate)\n",
    "        self.diff_estimate_memory[self.curr_episode].append(curr_diff_estimate)\n",
    "        \n",
    "        return state, reward, self.is_finalized, info\n",
    "\n",
    "    def _take_action(self, action): # <-- Normally this function would also access the environment variables through self, but I provide some dummy values for this excercise.\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \n",
    "        Args:\n",
    "            action (ndarray): n-dimensional action. Datatype, dimension, and value ranges defined in self.action_space.\n",
    "        \"\"\"\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "\n",
    "        converted_action = action*self.max_step_size # Convert your action from your normalized range [-1,1] back into degrees using self.max_step_size. HINT: action*self.max_step_size = what?\n",
    "        self.phase_correction += converted_action # Phase correction tracks previous actions taken to get the cumulative change from start.\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting. This is what defines which simulated datapoint to collect in your _get_state function!!!\n",
    "        self.phase_set += converted_action\n",
    "\n",
    "        # Update the self.state parameter with the new state. The preprovided self._get_state() will provide you with a state based on the current self.phase_set attribute value.\n",
    "        # The state will consist of a vector of 4 values: [bunch_length_1, bunch_length_2, bunch_intensity_1, bunch_intensity_2].\n",
    "        self.state = self._get_state()\n",
    "\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code above!!\n",
    "        ################################################################################################################################################################  \n",
    "\n",
    "\n",
    "     \n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set. This function is provided completed to help you collect datapoints from the pre-simulated dataset.\n",
    "        The data_class class is written to provide datapoints from a quadsplit dataset, but by always providing h84=0 we only vary the first phase\n",
    "        offset.\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "        \n",
    "        ### Check whether we are within simulated settings\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            # Interpolating the state/observable from the simulated data\n",
    "            datamatrix = data_class.get_interpolated_matrix(self.phase_set, 0) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            #self.profile = data_class.get_interpolated_profile(self.phase_set[0], 0)\n",
    "            # Convert input into normalized tensor\n",
    "            sample = {}\n",
    "            sample['image'] = datamatrix\n",
    "            sample['labels'] = np.array([0,0])\n",
    "            transformed_sample = transform(sample) # add some transforms to make the datapoint noisy, more similar to measurements.\n",
    "            input = transformed_sample['image']\n",
    "            self.profile = input[0,99,:].numpy() # 99th row approximately at c-timing 2793, where h=42 splitting is complete.\n",
    "\n",
    "            ###############\n",
    "            # CALCULATE BUNCH LENGTHS AND INTENSITIES FROM THE PROFILE\n",
    "            ###############\n",
    "            self.bunches, fwhms, intensities = isolate_bunches_from_dm_profile(self.profile, intensities=True, rel=True, plot_found_bunches=False)\n",
    "            fwhms = fwhms -np.mean(fwhms)\n",
    "            # Normalize and recenter intensities around 0\n",
    "            intensities = intensities / max(intensities) #\n",
    "            intensities = intensities - np.mean(intensities)\n",
    "            self.fwhms, self.intensities = fwhms, intensities\n",
    "\n",
    "            bls_and_intensities = np.append(fwhms, intensities) # state: [bl1,bl2,bi1,bi2]\n",
    "            state = bls_and_intensities\n",
    "        \n",
    "        return state\n",
    "    \n",
    "    def _get_reward(self):\n",
    "        \"\"\" Evaluating the reward from the observable/state. \n",
    "            The example reward 'simple_profile' is provided, and is based on the final profile\n",
    "            after the splitting. This is using more information than just the state provided\n",
    "            to the agent.\n",
    "\n",
    "            Feel free to experiment and design your own reward as well! \n",
    "\n",
    "        Returns:\n",
    "            float: The reward based on the current state. \n",
    "        \"\"\" \n",
    "        \n",
    "        \n",
    "        \n",
    "        # The shape of your observable should match your optimization_space. For this excercise, it is expected\n",
    "        # that you use an observation space of a vector with four values\n",
    "        observable = self.state\n",
    "        relative_bunch_lengths = observable[:2]\n",
    "        relative_bunch_intensities = observable[2:]\n",
    "        bunch_length_difference = abs(relative_bunch_lengths[0]-relative_bunch_lengths[1])\n",
    "        bunch_intensity_difference = abs(relative_bunch_intensities[0]-relative_bunch_intensities[1])\n",
    "\n",
    "        diff_estimate = bunch_intensity_difference+bunch_length_difference\n",
    "        self.diff_estimate = diff_estimate\n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "        \"\"\" \n",
    "         Define your own reward here. The diff_estimate provided above is provided \n",
    "         as a simple way to define the difference between your bunches length/intensity \n",
    "         after the splitting. You want this to be as small as possible, so a better reward\n",
    "         should be given for a smaller diff_estimate. There is already a pre-defined\n",
    "         criterion for the diff_estimate to be considered a \"good\" splitting provided in\n",
    "         the BUNCH_LENGTH_INT_CRITERIA attribute. \n",
    "         \"\"\"\n",
    "\n",
    "        reward = -diff_estimate #______ # Define your own reward here!! \n",
    "\n",
    "        ################################################################################################################################################################\n",
    "        # Implement the code below!!\n",
    "        ################################################################################################################################################################\n",
    "       \n",
    "        return reward\n",
    "       \n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over a training episode.\n",
    "        This function will be called everytime an episode is started\n",
    "        to provide an initial state.\n",
    "        \n",
    "        Returns:\n",
    "            state: The inital state of the environment. Should match the shape defined in observation_space.\n",
    "        \"\"\"\n",
    "        \n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False # This tracks wether an episode is complete or not.\n",
    "\n",
    "        # Initializing lists to track data for episodes\n",
    "        self.action_episode_memory.append([])\n",
    "        self.state_memory.append([])\n",
    "        self.phase_set_memory.append([])\n",
    "        self.reward_memory.append([])\n",
    "        self.diff_estimate_memory.append([])\n",
    "\n",
    "        # Getting initial state\n",
    "        \n",
    "        # Initialize random starting phase_set within [self.min_setting, self.max_setting]\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state() # call _get_state to get the initial state from the starting phase_set.\n",
    "        state = self.state\n",
    "        \n",
    "        \n",
    "        ### Some tracking of state, phase, reward, diff_estimate. Lets you use my render() function to observe your agent.\n",
    "        self.state_memory[self.curr_episode].append(state)\n",
    "        self.phase_set_memory[self.curr_episode].append(self.phase_set)\n",
    "        reward = self._get_reward()\n",
    "        self.reward_memory[self.curr_episode].append(reward)\n",
    "        curr_diff_estimate = np.copy(self.diff_estimate)\n",
    "        self.diff_estimate_memory[self.curr_episode].append(curr_diff_estimate)\n",
    "            \n",
    "        return state\n",
    "\n",
    "    def seed(self, seed=None):\n",
    "        \"\"\"\n",
    "        Set the random seed. Useful if you want to standardize trainings.\n",
    "        \"\"\"\n",
    "        \n",
    "        random.seed(seed)\n",
    "        np.random.seed\n",
    "        \n",
    "    def render(self, mode='human'):\n",
    "        \n",
    "        \"\"\"\n",
    "        Rendering function meant to provide a human-readable output. Base function in gym\n",
    "        environments to override. I provide a simple version that should let you observe \n",
    "        your trained agent during evaluation.\n",
    "        \"\"\"\n",
    "        plt.figure(f'Episode {self.curr_episode}')\n",
    "        plt.clf()\n",
    "        plt.subplot(131)\n",
    "        plt.title('Current profile')\n",
    "        plt.plot(self.profile,'b')\n",
    "        plt.subplot(132)\n",
    "        plt.title('Difference estimate')\n",
    "        plt.plot(self.diff_estimate_memory[self.curr_episode], 'o-')\n",
    "        plt.axhline(y=BUNCH_LENGTH_INT_CRITERIA, color='k', linestyle='--')\n",
    "        plt.subplot(133)\n",
    "        plt.title('h42 phase offset')\n",
    "        plt.plot(self.phase_set_memory[self.curr_episode], 'go-')\n",
    "        plt.axhline(y=0, color='k', linestyle='--')\n",
    "        plt.ylim((-30,30))\n",
    "        \n",
    "        #plot_finish(fig=fig, axes=axes, xlabel='Setting', ylabel='Observable')\n",
    "        plt.pause(0.2)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c5ef9998",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pandas._libs.interval'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_1074/1805799386.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_line_magic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'load_ext'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'tensorboard'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSAC\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCheckpointCallback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mEvalCallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mStopTrainingOnRewardThreshold\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ma2c\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mA2C\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_system_info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mddpg\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDDPG\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/a2c/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ma2c\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ma2c\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mA2C\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ma2c\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpolicies\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCnnPolicy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMlpPolicy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMultiInputPolicy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/a2c/a2c.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnn\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfunctional\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_policy_algorithm\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mOnPolicyAlgorithm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpolicies\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mActorCriticCnnPolicy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mActorCriticPolicy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBasePolicy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMultiInputActorCriticPolicy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype_aliases\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGymEnv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMaybeCallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSchedule\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/common/on_policy_algorithm.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase_class\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseAlgorithm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDictRolloutBuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRolloutBuffer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseCallback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/common/base_class.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mutils\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseCallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCallbackList\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mConvertCallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEvalCallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mProgressBarCallback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menv_util\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mis_wrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/common/utils.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mSummaryWriter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogger\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLogger\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfigure\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mstable_baselines3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype_aliases\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGymEnv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSchedule\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTensorDict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrainFreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTrainFrequencyUnit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/stable_baselines3/common/logger.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmatplotlib\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# numpy compat\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m from pandas.compat import (\n\u001b[0m\u001b[1;32m     23\u001b[0m     \u001b[0mnp_version_under1p18\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_np_version_under1p18\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mis_numpy_dev\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_is_numpy_dev\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/compat/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_typing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m from pandas.compat.numpy import (\n\u001b[0m\u001b[1;32m     16\u001b[0m     \u001b[0mis_numpy_dev\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0mnp_array_datetime64_compat\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/compat/numpy/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mversion\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mVersion\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# numpy versioning\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/util/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m from pandas.util._decorators import (  # noqa\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mAppender\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mSubstitution\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mcache_readonly\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m )\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_libs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproperties\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcache_readonly\u001b[0m  \u001b[0;31m# noqa\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_typing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/project/s/sy-rf-br/Training/hands-on-reinforcement-learning-2022-venvs/hands-on-rl/lib/python3.7/site-packages/pandas/_libs/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_libs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterval\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mInterval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m from pandas._libs.tslibs import (\n\u001b[1;32m     15\u001b[0m     \u001b[0mNaT\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pandas._libs.interval'"
     ]
    }
   ],
   "source": [
    "# Train a model\n",
    "%load_ext tensorboard\n",
    "\n",
    "from stable_baselines3 import SAC\n",
    "from stable_baselines3.common.callbacks import CheckpointCallback\n",
    "from stable_baselines3.common.callbacks import EvalCallback, StopTrainingOnRewardThreshold\n",
    "\n",
    "\n",
    "# Separate evaluation env\n",
    "eval_env = YourDoubleEnv()\n",
    "\n",
    "# Use deterministic actions for evaluation\n",
    "eval_callback = EvalCallback(eval_env, callback_on_new_best=callback_on_best,  best_model_save_path='./RL_logs/',\n",
    "    log_path='./RL_logs/', eval_freq=500,\n",
    "    deterministic=True, render=False)\n",
    "\n",
    "\n",
    "env = YourDoubleEnv()\n",
    "\n",
    "seed = 7\n",
    "np.random.seed(seed)\n",
    "env.seed(seed)\n",
    "log_dir = './'\n",
    "\n",
    "\n",
    "ent_coef = 'auto' # Hyperparameter of SAC, with 'auto' it is also learned during training.\n",
    "\n",
    "# Define your model\n",
    "model = SAC(\"MlpPolicy\", env, verbose=1, ent_coef=ent_coef, learning_starts=100, tensorboard_log=\"./hands-on_rl_tensorboard\")\n",
    "print(\"Starting training...\")\n",
    "model.learn(total_timesteps=10000, callback=eval_callback, log_interval=5, tb_log_name=\"hands_on_rl\")\n",
    "print(\"Completed training\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0e1af98",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Follow the training through tensorboard\n",
    "%tensorboard --logdir hands-on_rl_tensorboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ae1c3476",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initial state: -20 degrees.\n",
      "State = -9.6 after taking action: 0.52=10.4 degrees.\n",
      "Final state -14.8 after taking another action of -0.5*action: -0.26=-5.2 degrees.\n"
     ]
    }
   ],
   "source": [
    "# Test your _take_action function here!\n",
    "action = 0.52 # A vector of dimension and range specified in self.action_space. For this example, a value in the range [-1,1].\n",
    "\n",
    "env = dummy_env()\n",
    "\n",
    "print(f'initial state: {env.phase_set} degrees.')\n",
    "env._take_action(action)\n",
    "print(f'State = {env.phase_set} after taking action: {action}={action*env.max_step_size} degrees.')\n",
    "env._take_action(-0.5*action)\n",
    "print(f'Final state {env.phase_set} after taking another action of -0.5*action: {-0.5*action}={-0.5*action*env.max_step_size} degrees.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23fc7096",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "class QuadEnvBLInt(gym.Env):\n",
    "    \"\"\"\n",
    "    Environment class for the double split optimisation of the h=42 cavity. This class is for you to fill out, but\n",
    "    if you run into issues in implementation or just want some hints a pre-made class is defined in the bottom code\n",
    "    block of this notebook.\n",
    "    \"\"\"\n",
    "\n",
    "    phase_set = 0\n",
    "    \n",
    "    # Define your action and observation spaces. You want to take actions in one dimension, changing the h42 phase offset,\n",
    "    # and want a 4D observation, consisting of your relative bunch lengths and bunch intensities. Both your observations and \n",
    "    # actions will be should be normalized to be within [-1,1] for optimisation reasons.\n",
    "    \n",
    "    action_space = gym.spaces.Box(\n",
    "                                low = __, # Fill in the __ with your action settings.\n",
    "                                high = __,\n",
    "                                shape=(__,),\n",
    "                                dtype=np.float32)\n",
    "\n",
    "\n",
    "    ### Define what the observations are to be expected\n",
    "    observation_space = gym.spaces.Box(\n",
    "                                low = __, # Fill in the __ with your observation settings.\n",
    "                                high = __,\n",
    "                                shape=(__,),\n",
    "                                dtype=np.float32)\n",
    "    \n",
    "    ### Reward criteria (constituting \"good\" splittings with provided reward functions).\n",
    "    BUNCH_LENGTH_INT_CRITERIA = 0.02 # Empirically evaluated diff_estimate that constitutes a \"good\" bunch splitting. Lower means longer training time, but smaller spread in bunch lengths/intensities.\n",
    "    PROFILE_MSE_CRITERIA = 0.0003 #\n",
    "\n",
    "    ### Evaluation info: will help keep track of what your current phase correction is vs the initial offset, and track your diff_estimate for the render() function.\n",
    "    phase_correction = 0\n",
    "    initial_offset = 0\n",
    "    diff_estimate = 0\n",
    "    diff_estimate_memory = []\n",
    "\n",
    "    ### Status of the iterations\n",
    "    # Steps, i.e. number of cycles\n",
    "    counter = 0\n",
    "    curr_step = -1  ## Not used ?\n",
    "    \n",
    "    # Episodes\n",
    "    curr_episode = -1\n",
    "    action_episode_memory = []\n",
    "    state_memory = []\n",
    "    phase_set_memory = []\n",
    "    reward_memory = []\n",
    "    is_finalized = False\n",
    "    \n",
    "    def __init__(self, \n",
    "                 max_step_size=20, # Max step size can be used to limit the freedom of the agent when taking steps, as well as provide the translation from our normalised action back to degrees.\n",
    "                 min_setting=-30, # Simulation data parameter: the phase offsets have been scanned from -30 to 30 degrees. \n",
    "                 max_setting=30,\n",
    "                 #min_spread=min_spread, max_spread=max_spread, \n",
    "                 max_steps=100, # How many steps the agent is allowed to take in the environment before ending the episode.\n",
    "                 seed=None, \n",
    "                 ):\n",
    "        \"\"\"\n",
    "        Initialize the environment\n",
    "        \"\"\"\n",
    "        ### Settings\n",
    "        self.min_setting = min_setting\n",
    "        self.max_setting = max_setting\n",
    "        ### Define what the agent can do\n",
    "        self.max_step_size = max_step_size\n",
    "        self.max_steps = max_steps\n",
    "   \n",
    "        ### Set the seed\n",
    "        self.seed(seed)\n",
    "        \n",
    "        \n",
    "    def step(self, action):\n",
    "        \"\"\"\n",
    "        One step/action in the environment, returning the observable\n",
    "        and reward.\n",
    "\n",
    "        Stopping conditions: max_steps reached, or splitting good enough.\n",
    "        \"\"\"\n",
    "        success = False    \n",
    "        self.curr_step += 1 # increment step counter\n",
    "        \n",
    "        self._take_action(action) # Actually take action: Define your _take_action function below!! \n",
    "\n",
    "        reward = self._get_reward() # Get your reward: Define your _get_reward function below!! Returns a reward value.\n",
    "        \n",
    "        \n",
    "        curr_diff_estimate = self.diff_estimate.copy() # Keep track of a difference estimate (essentially a loss) for the rendering.\n",
    "        self.diff_estimate_memory[self.curr_episode].append(curr_diff_estimate)\n",
    "        state = self.state\n",
    "        \n",
    "        ### Check exit criteria: Achieved good enough state, or taken too many steps.\n",
    "        ### Depending on the reward function you use, what criteria should be achieved to consider an episode a success?\n",
    "        if REWARD_FUNC == 'simple_profile':\n",
    "            if abs(self.diff_estimate) < PROFILE_MSE_CRITERIA:\n",
    "                self.is_finalized = True\n",
    "                success = True\n",
    "        elif REWARD_FUNC == 'your_reward':\n",
    "            if abs(self.diff_estimate) < BUNCH_LENGTH_INT_CRITERIA:\n",
    "                self.is_finalized = True\n",
    "                success = True\n",
    "        if self.counter >= self.max_steps: # Check if you have exceeded the maximum step limit.\n",
    "            self.is_finalized = True\n",
    "\n",
    "        \n",
    "        self.reward_memory[self.curr_episode].append(reward)\n",
    "        info = {'success': success, 'steps': self.counter, 'phase_corr': self.phase_correction, 'initial_phase': self.initial_offset, 'diff_estimate': self.diff_estimate, 'profile': self.profile}\n",
    "        \n",
    "        return state, reward, self.is_finalized, info\n",
    "    \n",
    "    def _take_action(self, action):\n",
    "        \"\"\"\n",
    "        Actual action funtion.\n",
    "\n",
    "        Action from model is scaled to be between [-1,1] for better optimization performance. \n",
    "        Converted back to phase setting in degrees using self.max_step_size.\n",
    "        \"\"\"\n",
    "        \n",
    "        self.action = action\n",
    "        converted_action = action*self.max_step_size\n",
    "        self.phase_correction += converted_action\n",
    "\n",
    "        # Phase offset as action, add offset to current phase_set to get next setting.\n",
    "        self.phase_set += converted_action\n",
    "        \n",
    "        \n",
    "        self.state = self._get_state()\n",
    "        curr_state = self.state.copy()\n",
    "        curr_phase_set = self.phase_set.copy()\n",
    "        self.action_episode_memory[self.curr_episode].append(action)\n",
    "        self.state_memory[self.curr_episode].append(curr_state)\n",
    "        self.phase_set_memory[self.curr_episode].append(curr_phase_set)\n",
    "        \n",
    "        self.counter += 1\n",
    "    \n",
    "    def _get_state(self):\n",
    "        '''\n",
    "        Get the observable for a given phase_set\n",
    "\n",
    "        Comment: The edge cases of trying to move to datapoints outside the simulated dataset needs to be handled.\n",
    "        Currently it is simply checked whether the phase setting is above the max setting or below the min setting,\n",
    "        and if so a pre-defined dummy observation is presented. The important factor to consider is to make sure that\n",
    "        all edge cases are covered by some dummy state, and that the dummy states are unique (so the model can learn\n",
    "        what steps to take to get back in the right search area). It is also highly advised to give an additional penalty\n",
    "        in the reward if the agent steps outside our region of simulated data.\n",
    "        '''\n",
    "\n",
    "        if (self.phase_set<self.min_setting):\n",
    "            state = np.array([0.5, -0.5, 0.5, -0.5])\n",
    "        elif (self.phase_set>self.max_setting):\n",
    "            state = np.array([-0.5, 0.5, -0.5, 0.5])\n",
    "        else:\n",
    "            # Interpolating the state/observable from the simulated data\n",
    "            datamatrix = data_class.get_interpolated_matrix(self.phase_set, 0) # Second phase does not affect the first. Since we only care about h42, no need to assign h84 offfset.\n",
    "            #self.profile = data_class.get_interpolated_profile(self.phase_set[0], 0)\n",
    "            # Convert input into normalized tensor\n",
    "            sample = {}\n",
    "            sample['image'] = datamatrix\n",
    "            sample['labels'] = np.array([0,0])\n",
    "            transformed_sample = transform(sample) # add some transforms to make the datapoint noisy, more similar to measurements.\n",
    "            input = transformed_sample['image']\n",
    "            self.profile = input[0,99,:].numpy() # 99th row approximately at c-timing 2793, where h=42 splitting is complete.\n",
    "\n",
    "            ###############\n",
    "            # CALCULATE BUNCH LENGTHS AND INTENSITIES FROM THE PROFILE\n",
    "            ###############\n",
    "            self.bunches, fwhms, intensities = isolate_bunches_from_dm_profile(self.profile, intensities=True, rel=True, plot_found_bunches=False)\n",
    "            fwhms = fwhms -np.mean(fwhms)\n",
    "            # Normalize and recenter intensities around 0\n",
    "            intensities = intensities / max(intensities) #\n",
    "            intensities = intensities - np.mean(intensities)\n",
    "            self.fwhms, self.intensities = fwhms, intensities\n",
    "\n",
    "            bls_and_intensities = np.append(fwhms, intensities) # state: [bl1,bl2,bi1,bi2]\n",
    "            state = bls_and_intensities\n",
    "        \n",
    "        return state\n",
    "    \n",
    "    def _get_reward(self):\n",
    "        \"\"\" Evaluating the reward from the observable/state. \n",
    "            The example reward 'simple_profile' is provided, and is based on the final profile\n",
    "            after the splitting. This is using more information than just the state provided\n",
    "            to the agent.\n",
    "\n",
    "            Feel free to experiment and design your own reward as well! \n",
    "\n",
    "        Returns:\n",
    "            float: The reward based on the current state. \n",
    "        \"\"\" \n",
    "        \n",
    "        \n",
    "        observable = self.state\n",
    "        if REWARD_FUNC == 'your_reward':\n",
    "            relative_bunch_lengths = observable[:2]\n",
    "            relative_bunch_intensities = observable[2:]\n",
    "            bunch_length_difference = abs(relative_bunch_lengths[0]-relative_bunch_lengths[1])\n",
    "            bunch_intensity_difference = abs(relative_bunch_intensities[0]-relative_bunch_intensities[1])\n",
    "\n",
    "            diff_estimate = bunch_intensity_difference+bunch_length_difference\n",
    "            self.diff_estimate = diff_estimate\n",
    "            \n",
    "            \n",
    "            ### Define your own reward here. The diff_estimate provided above is a provided \n",
    "            ### as a simple way to define the difference between your bunches length/intensity \n",
    "            ### after the splitting. You want this to be as small as possible, so a better reward\n",
    "            ### should be given for a smaller diff_estimate. There is already a pre-defined\n",
    "            ### criterion for the diff_estimate to be considered a \"good\" splitting also provided.\n",
    "            \n",
    "            reward = ______ # Define your own reward here!!\n",
    "\n",
    "        \n",
    "        elif REWARD_FUNC == 'simple_profile':\n",
    "            reward = -1\n",
    "            diff_estimate = 1000000\n",
    "            #profile = data_class.get_interpolated_profile(self.phase_volt_set[0], self.phase_volt_set[1], self.phase_volt_set[2])\n",
    "            diff_estimate = loss_function_two(self.bunches[0], self.bunches[1])\n",
    "            self.diff_estimate = diff_estimate\n",
    "            if (self.phase_set<self.min_setting) or (self.phase_set>self.max_setting):\n",
    "                reward += -4\n",
    "            \n",
    "            elif abs(diff_estimate) < PROFILE_MSE_CRITERIA: # Tested to see where it is close to optimal setting\n",
    "                reward += 101\n",
    "            elif abs(diff_estimate) < 0.0012:\n",
    "                reward += 0.75\n",
    "            elif abs(diff_estimate) < 0.01:\n",
    "                reward += 0.5\n",
    "            elif abs(diff_estimate) < 0.02:\n",
    "                reward += 0.25\n",
    "       \n",
    "        return reward\n",
    "       \n",
    "    def reset(self):\n",
    "        \"\"\"\n",
    "        Reset to a random state to start over the training\n",
    "        \"\"\"\n",
    "        \n",
    "        # Resetting to start a new episode\n",
    "        self.curr_episode += 1\n",
    "        self.counter = 0\n",
    "        self.is_finalized = False\n",
    "\n",
    "        # Initializing lists to track data for episodes\n",
    "        self.action_episode_memory.append([])\n",
    "        self.state_memory.append([])\n",
    "        self.phase_set_memory.append([])\n",
    "        self.reward_memory.append([])\n",
    "        self.diff_estimate_memory.append([])\n",
    "\n",
    "        # Getting initial state\n",
    "        self.phase_set = np.array(0.0)\n",
    "        self.phase_set = random.uniform(self.min_setting,\n",
    "                                            self.max_setting)\n",
    "        \n",
    "        self.initial_offset = np.copy(self.phase_set)\n",
    "        self.phase_correction = 0\n",
    "                                        \n",
    "        self.state = self._get_state()\n",
    "        state = self.state\n",
    "\n",
    "        self.state_memory[self.curr_episode].append(state)\n",
    "        self.phase_set_memory[self.curr_episode].append(self.phase_set)\n",
    "        \n",
    "        reward = self._get_reward()\n",
    "        self.reward_memory[self.curr_episode].append(reward)\n",
    "            \n",
    "        return state\n",
    "\n",
    "    def seed(self, seed=None):\n",
    "        \"\"\"\n",
    "        Set the random seed\n",
    "        \"\"\"\n",
    "        \n",
    "        random.seed(seed)\n",
    "        np.random.seed\n",
    "        \n",
    "    def render(self, mode='human'):\n",
    "        \n",
    "        \"\"\"\n",
    "        Rendering function meant to provide a human-readable output. Base function in gym\n",
    "        environments to override. I provide a simple version that should let you observe \n",
    "        your trained agent during evaluation.\n",
    "        \"\"\"\n",
    "        plt.figure(f'Episode {self.curr_episode}')\n",
    "        plt.clf()\n",
    "        plt.subplot(131)\n",
    "        plt.title('Current profile')\n",
    "        plt.plot(self.profile,'b')\n",
    "        plt.subplot(132)\n",
    "        plt.title('Difference estimate')\n",
    "        plt.plot(self.diff_estimate_memory[self.curr_episode], 'o-')\n",
    "        plt.axhline(y=BUNCH_LENGTH_INT_CRITERIA, color='k', linestyle='--')\n",
    "        plt.subplot(133)\n",
    "        plt.title('h42 phase offset')\n",
    "        plt.plot(self.phase_set_memory[self.curr_episode], 'go-')\n",
    "        plt.axhline(y=0, color='k', linestyle='--')\n",
    "        plt.ylim((-30,30))\n",
    "        \n",
    "        #plot_finish(fig=fig, axes=axes, xlabel='Setting', ylabel='Observable')\n",
    "        plt.pause(0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "38d0edd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing pytorch packages to be used.\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "#from pytorch_fitmodule import FitModule\n",
    "from torchvision import transforms, utils\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "import torch.optim as optim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9436d462",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SimpleFeedForwardNet(torch.nn.Module):\n",
    "    def __init__(self, input_features = 2, output_features=1):\n",
    "        super(SimpleFeedForwardNet, self).__init__()\n",
    "\n",
    "        self.network = nn.Sequential(# \n",
    "            torch.nn.Linear(input_features, 16),    # <--- You can experiment here with different network architectures, adding\n",
    "            torch.nn.ReLU(),                        # more layers or increasing the size of the existing ones. For example, you can\n",
    "            torch.nn.Linear(16, output_features),   # test using only 4 nodes instead of 16, or some other number.\n",
    "            torch.nn.Tanh()\n",
    "        )\n",
    "\n",
    "\n",
    "    def forward(self, x):    # Define forward pass.                                      \n",
    "        x = x.float()                                              \n",
    "        out = self.network(x)\n",
    "        return out\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "e6657fe7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SimpleFeedForwardNet(\n",
      "  (network): Sequential(\n",
      "    (0): Linear(in_features=2, out_features=16, bias=True)\n",
      "    (1): ReLU()\n",
      "    (2): Linear(in_features=16, out_features=1, bias=True)\n",
      "    (3): Tanh()\n",
      "  )\n",
      ")\n",
      "Number of trainable parameters: 65\n"
     ]
    }
   ],
   "source": [
    "FFnet = SimpleFeedForwardNet()\n",
    "print(FFnet)\n",
    "nbr_params = count_parameters(FFnet)\n",
    "print(f'Number of trainable parameters: {nbr_params}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf9480d8",
   "metadata": {},
   "source": [
    "## Write a training loop for your model\n",
    "\n",
    "After defining our simple model and having loaded our dataset, we are ready to train. In order to do this we need to define a training loop and some form of loss function.\n",
    "\n",
    "Many different loss functions are avalaible, and the choice is up to the user. The loss function is the key component through which NNs learn: it provides an evaluation of how well your current algorithm models the given data. If the models predictions are poor, the loss function should output a higher value, and if they improve, it should output a lower value. This indicates to the model which weight adjustments increase performance and provides a direction of improvement. The loss function is generally defined as \n",
    "\n",
    "<img src=\"./images/loss.png\" alt=\"loss\" height=\"200\"/>\n",
    "\n",
    "where f(x, w) is the (N-dimensional) output of the NN given the input x and the current weights w, and y is the target output. With a well formulated loss function the training of the NN is transformed into a minimization problem which can then be optimized through some optimization method.\n",
    "\n",
    "For this problem we want to create a feature extractor that can output a value as close as possible to the true phase offset of the splitting RF cavity, i.e. we are dealing with a regression problem. We can therefore choose a regression loss, for example the l2-norm, aka the Mean Squared Error (MSE)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c5471bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.MSELoss() # Initialize MSE loss function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "533edccb",
   "metadata": {},
   "source": [
    "We also need to decide what type of optimizer to use to minimize this loss function. Here there are also several candidates available, but one of the most commonly used alternatives is called ADAM. It is both efficient and requires little hyperparameter tuning to work well, which is why we are going to be using ADAM here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "70f6d66f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize ADAM optimizer\n",
    "optimizer = optim.Adam(FFnet.parameters()) # Using default learning rates and Beta coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db2b3705",
   "metadata": {},
   "source": [
    "### Before we continue: Generalization, overfitting and regularization\n",
    "\n",
    "When training machine learning models we attempt to fit a model to some dataset, in the hopes that the fitted model will be able to work when shown new data of the same type. In other words, we want our model to be able to *generalize* its solution and accurately interpret previously unseen data. Several factors can affect how well a model generalizes, like the model complexity, the number of training epochs and the size of the dataset.\n",
    "\n",
    "As an example we can consider constructing a polynomial fit of some degree to data sampled from a sine function. To represent the inaccuracies inherent in any real world dataset, some noise is added to the samples. Several different scenarios can happen:\n",
    "\n",
    "- If the fitting polyomial is of too low degree, for example 1, it will only be able to match the points using a straight line. We end up *underfitting* to our problem, as the fitting function is not complex enough to model the underlying function.\n",
    "- If the fitting polynomial is of an appropriate degree, it will follow both the measured points and the underlying function relatively well, at least in the area of interest.\n",
    "- If the fitting polynomial is of too high degree, it will fit perfectly to the datapoints but very poorly with the underlying function.\n",
    "\n",
    "<img src=\"./images/overfitting_example.png\" alt=\"overfitting\" width=\"800\"/>\n",
    "\n",
    "Deep Neural Networks (DNNs)  constitute complex models by nature of their design: they often have thousands or even millions of learnable parameters. Because of this they are often prone to overfitting, and require a large amount of data to train well. In order to catch an overfitting model one can evaluate its generalization power by splitting the available data into two parts, the training set and the validation set. The validation set is kept separate from the model during training, and is used to evaluate the models performance on unseen data between epochs of training. The training set is then the data actually used to train the model. By monitoring the models performance on both the training and validation sets its generalization capability can be analyzed: if the model generalizes well the gap between the training and validation loss is small, and if the model does not generalize the gap will be large. An example of a typical training curve for a neural network is shown in the figure below.\n",
    "\n",
    "<img src=\"./images/gen.png\" width=\"30%\" /> \n",
    "\n",
    "Many different techniques exist for reducing the overfitting of neural networks, and in general the methods are referred to as *regularization* methods. The simplest of these is to simply implement *early stopping* meaning you stop training when you see that the performance on the validation set starts deteriorating / stops improving (by the dashed line in the figure above). If the problem is that your model is too complex, it may also be solvable by increasing the amount of available data: if we again consider the case of a polynomial fit we can see in the figure below that with enough datapoints, the 9-degree fit becomes very accurate, essentially modeling the sin function perfectly. When designing your neural network, you will always need to think about how to adapt your model complexity to fit your dataset, or if you want to use a complex model, make sure your dataset is big enough.\n",
    "\n",
    "<img src=\"./images/sin_many_samples.png\" width=\"30%\" /> \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a90c895",
   "metadata": {},
   "source": [
    "### Split dataset into train, validation, and test sets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9fedf30",
   "metadata": {},
   "source": [
    "Before we start our training, we also need to split up our dataset into a validation and training set (sometimes also a test set). This is done in order to allow us to monitor our model for overfitting to our data, by regularly testing it on data it has not been trained on. The hope is that if the model performs well on our validation set, then it has generalized its solution to work outside its training set.\n",
    "\n",
    "The ratio between training and validation set is not set in zone, but generally the training set is larger than the validation set. This is due to the fact that more data will generally lead to a better model. Common splits are 80:20 or 90:10 in favor of training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "74d4aa41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PyTorch allows us to choose a batch size to train on several samples at once: This can increase speed of training. For this example, we will use a batch size of 1 sample.\n",
    "\n",
    "batch_size = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e0ff255",
   "metadata": {},
   "source": [
    "To optimize training on large datasets one may use batching. With such a small dataset we won't need it, but you can experiment by setting the batch size above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a4e69fe0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split into training (288 samples), validation (36 samples) and test (37) sets\n"
     ]
    }
   ],
   "source": [
    "# Split our dataset into training and validation sets\n",
    "\n",
    "length = dataloader_bls.__len__() # Total number of samples\n",
    "\n",
    "train_len = int(length * 0.8) # 80% training set\n",
    " \n",
    "val_len = length - train_len # The rest validation\n",
    "\n",
    "train, val = torch.utils.data.random_split(dataloader_bls, [train_len, val_len], generator=torch.Generator().manual_seed(42))\n",
    "\n",
    "val, test = torch.utils.data.random_split(val, [int(val_len/2), val_len-int(val_len/2)], generator=torch.Generator().manual_seed(42))\n",
    "print(f'Dataset split into training ({train.__len__()} samples), validation ({val.__len__()} samples) and test ({test.__len__()}) sets')\n",
    "\n",
    "# Finally, wrap your datasets in pyTorch dataloader classes. These will take care of loading in batches and provide your data smoothly to your model during training.\n",
    "train_dataloader = DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "val_dataloader = DataLoader(val, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "test_dataloader = DataLoader(test, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "\n",
    "\n",
    "# The values below are used to estimate time remaining during training\n",
    "steps_per_epoch = int(train.__len__()/batch_size) \n",
    "val_steps_per_epoch = int(val.__len__()/batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5cb6cf8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_step = 0\n",
    "eval_step=0\n",
    "steps_per_epoch = int(train.__len__()/batch_size)\n",
    "val_steps_per_epoch = int(val.__len__()/batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9d39f063",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting training ...\n",
      "[1/100,    10/288] loss: 0.28887673, Est. epoch time left: 0:00:00.287789 s\n",
      "[1/100,    20/288] loss: 0.31534182, Est. epoch time left: 0:00:00.282613 s\n",
      "[1/100,    30/288] loss: 0.52735069, Est. epoch time left: 0:00:00.241927 s\n",
      "[1/100,    40/288] loss: 0.47167749, Est. epoch time left: 0:00:00.210081 s\n",
      "[1/100,    50/288] loss: 0.47476763, Est. epoch time left: 0:00:00.202575 s\n",
      "[1/100,    60/288] loss: 0.25912178, Est. epoch time left: 0:00:00.198195 s\n",
      "[1/100,    70/288] loss: 0.37093857, Est. epoch time left: 0:00:00.234928 s\n",
      "[1/100,    80/288] loss: 0.29362179, Est. epoch time left: 0:00:00.223755 s\n",
      "[1/100,    90/288] loss: 0.35789189, Est. epoch time left: 0:00:00.209174 s\n",
      "[1/100,   100/288] loss: 0.36133807, Est. epoch time left: 0:00:00.178439 s\n",
      "[1/100,   110/288] loss: 0.49631182, Est. epoch time left: 0:00:00.155877 s\n",
      "[1/100,   120/288] loss: 0.27779345, Est. epoch time left: 0:00:00.146278 s\n",
      "[1/100,   130/288] loss: 0.14528952, Est. epoch time left: 0:00:00.139455 s\n",
      "[1/100,   140/288] loss: 0.35108691, Est. epoch time left: 0:00:00.121525 s\n",
      "[1/100,   150/288] loss: 0.25088755, Est. epoch time left: 0:00:00.103739 s\n",
      "[1/100,   160/288] loss: 0.29225411, Est. epoch time left: 0:00:00.102112 s\n",
      "[1/100,   170/288] loss: 0.40438647, Est. epoch time left: 0:00:00.226783 s\n",
      "[1/100,   180/288] loss: 0.39265609, Est. epoch time left: 0:00:00.142908 s\n",
      "[1/100,   190/288] loss: 0.24316240, Est. epoch time left: 0:00:00.082689 s\n",
      "[1/100,   200/288] loss: 0.36594446, Est. epoch time left: 0:00:00.071692 s\n",
      "[1/100,   210/288] loss: 0.19032867, Est. epoch time left: 0:00:00.146858 s\n",
      "[1/100,   220/288] loss: 0.34895906, Est. epoch time left: 0:00:00.100209 s\n",
      "[1/100,   230/288] loss: 0.31352303, Est. epoch time left: 0:00:00.073345 s\n",
      "[1/100,   240/288] loss: 0.20408458, Est. epoch time left: 0:00:00.054863 s\n",
      "[1/100,   250/288] loss: 0.20644518, Est. epoch time left: 0:00:00.040579 s\n",
      "[1/100,   260/288] loss: 0.29131430, Est. epoch time left: 0:00:00.030488 s\n",
      "[1/100,   270/288] loss: 0.31619581, Est. epoch time left: 0:00:00.016132 s\n",
      "[1/100,   280/288] loss: 0.37143670, Est. epoch time left: 0:00:00.006916 s\n",
      "Validation...\n",
      "[1,    10] loss: 0.228\n",
      "[1,    20] loss: 0.305\n",
      "[1,    30] loss: 0.362\n",
      "[2/100,    10/288] loss: 0.39412355, Est. epoch time left: 0:00:00.247822 s\n",
      "[2/100,    20/288] loss: 0.46552623, Est. epoch time left: 0:00:00.246448 s\n",
      "[2/100,    30/288] loss: 0.31975221, Est. epoch time left: 0:00:00.234053 s\n",
      "[2/100,    40/288] loss: 0.32664027, Est. epoch time left: 0:00:00.213451 s\n",
      "[2/100,    50/288] loss: 0.35845890, Est. epoch time left: 0:00:00.207114 s\n",
      "[2/100,    60/288] loss: 0.32136271, Est. epoch time left: 0:00:00.200858 s\n",
      "[2/100,    70/288] loss: 0.19230856, Est. epoch time left: 0:00:00.184616 s\n",
      "[2/100,    80/288] loss: 0.33748264, Est. epoch time left: 0:00:00.183140 s\n",
      "[2/100,    90/288] loss: 0.31765630, Est. epoch time left: 0:00:00.173769 s\n",
      "[2/100,   100/288] loss: 0.29167766, Est. epoch time left: 0:00:00.163020 s\n",
      "[2/100,   110/288] loss: 0.47554842, Est. epoch time left: 0:00:00.154773 s\n",
      "[2/100,   120/288] loss: 0.23878395, Est. epoch time left: 0:00:00.146278 s\n",
      "[2/100,   130/288] loss: 0.16407056, Est. epoch time left: 0:00:00.140208 s\n",
      "[2/100,   140/288] loss: 0.50924959, Est. epoch time left: 0:00:00.131123 s\n",
      "[2/100,   150/288] loss: 0.26937653, Est. epoch time left: 0:00:00.120684 s\n",
      "[2/100,   160/288] loss: 0.37478536, Est. epoch time left: 0:00:00.111908 s\n",
      "[2/100,   170/288] loss: 0.31824240, Est. epoch time left: 0:00:00.101787 s\n",
      "[2/100,   180/288] loss: 0.29781300, Est. epoch time left: 0:00:00.093624 s\n",
      "[2/100,   190/288] loss: 0.21144733, Est. epoch time left: 0:00:00.085796 s\n",
      "[2/100,   200/288] loss: 0.22069667, Est. epoch time left: 0:00:00.076307 s\n",
      "[2/100,   210/288] loss: 0.41194736, Est. epoch time left: 0:00:00.066427 s\n",
      "[2/100,   220/288] loss: 0.14297612, Est. epoch time left: 0:00:00.060732 s\n",
      "[2/100,   230/288] loss: 0.28897143, Est. epoch time left: 0:00:00.051566 s\n",
      "[2/100,   240/288] loss: 0.26071916, Est. epoch time left: 0:00:00.056717 s\n",
      "[2/100,   250/288] loss: 0.28872716, Est. epoch time left: 0:00:00.036584 s\n",
      "[2/100,   260/288] loss: 0.29319319, Est. epoch time left: 0:00:00.025161 s\n",
      "[2/100,   270/288] loss: 0.28015690, Est. epoch time left: 0:00:00.015450 s\n",
      "[2/100,   280/288] loss: 0.22269983, Est. epoch time left: 0:00:00.009375 s\n",
      "Validation...\n",
      "[2,    10] loss: 0.363\n",
      "[2,    20] loss: 0.356\n",
      "[2,    30] loss: 0.236\n",
      "[3/100,    10/288] loss: 0.30215179, Est. epoch time left: 0:00:00.244309 s\n",
      "[3/100,    20/288] loss: 0.29290430, Est. epoch time left: 0:00:00.241847 s\n",
      "[3/100,    30/288] loss: 0.39149091, Est. epoch time left: 0:00:00.226303 s\n",
      "[3/100,    40/288] loss: 0.30463858, Est. epoch time left: 0:00:00.217590 s\n",
      "[3/100,    50/288] loss: 0.33473039, Est. epoch time left: 0:00:00.205525 s\n",
      "[3/100,    60/288] loss: 0.31639104, Est. epoch time left: 0:00:00.208360 s\n",
      "[3/100,    70/288] loss: 0.22812440, Est. epoch time left: 0:00:00.189398 s\n",
      "[3/100,    80/288] loss: 0.15686305, Est. epoch time left: 0:00:00.195141 s\n",
      "[3/100,    90/288] loss: 0.35384875, Est. epoch time left: 0:00:00.176129 s\n",
      "[3/100,   100/288] loss: 0.22597269, Est. epoch time left: 0:00:00.161451 s\n",
      "[3/100,   110/288] loss: 0.35181777, Est. epoch time left: 0:00:00.155113 s\n",
      "[3/100,   120/288] loss: 0.26748415, Est. epoch time left: 0:00:00.148481 s\n",
      "[3/100,   130/288] loss: 0.31641643, Est. epoch time left: 0:00:00.114442 s\n",
      "[3/100,   140/288] loss: 0.14317603, Est. epoch time left: 0:00:00.113938 s\n",
      "[3/100,   150/288] loss: 0.27007011, Est. epoch time left: 0:00:00.102193 s\n",
      "[3/100,   160/288] loss: 0.24374211, Est. epoch time left: 0:00:00.098663 s\n",
      "[3/100,   170/288] loss: 0.34914380, Est. epoch time left: 0:00:00.091293 s\n",
      "[3/100,   180/288] loss: 0.33204352, Est. epoch time left: 0:00:00.085668 s\n",
      "[3/100,   190/288] loss: 0.29012228, Est. epoch time left: 0:00:00.086007 s\n",
      "[3/100,   200/288] loss: 0.25399683, Est. epoch time left: 0:00:00.077839 s\n",
      "[3/100,   210/288] loss: 0.24891949, Est. epoch time left: 0:00:00.068305 s\n",
      "[3/100,   220/288] loss: 0.18987318, Est. epoch time left: 0:00:00.058041 s\n",
      "[3/100,   230/288] loss: 0.30767241, Est. epoch time left: 0:00:00.050694 s\n",
      "[3/100,   240/288] loss: 0.29680409, Est. epoch time left: 0:00:00.041725 s\n",
      "[3/100,   250/288] loss: 0.34058508, Est. epoch time left: 0:00:00.032869 s\n",
      "[3/100,   260/288] loss: 0.15044911, Est. epoch time left: 0:00:00.024453 s\n",
      "[3/100,   270/288] loss: 0.43427046, Est. epoch time left: 0:00:00.015625 s\n",
      "[3/100,   280/288] loss: 0.39673423, Est. epoch time left: 0:00:00.006922 s\n",
      "Validation...\n",
      "[3,    10] loss: 0.275\n",
      "[3,    20] loss: 0.321\n",
      "[3,    30] loss: 0.322\n",
      "[4/100,    10/288] loss: 0.33417571, Est. epoch time left: 0:00:00.271087 s\n",
      "[4/100,    20/288] loss: 0.34258258, Est. epoch time left: 0:00:00.242230 s\n",
      "[4/100,    30/288] loss: 0.28138591, Est. epoch time left: 0:00:00.227164 s\n",
      "[4/100,    40/288] loss: 0.30464457, Est. epoch time left: 0:00:00.216881 s\n",
      "[4/100,    50/288] loss: 0.27268430, Est. epoch time left: 0:00:00.210689 s\n",
      "[4/100,    60/288] loss: 0.29603871, Est. epoch time left: 0:00:00.195477 s\n",
      "[4/100,    70/288] loss: 0.20848940, Est. epoch time left: 0:00:00.190333 s\n",
      "[4/100,    80/288] loss: 0.29838565, Est. epoch time left: 0:00:00.179668 s\n",
      "[4/100,    90/288] loss: 0.20906726, Est. epoch time left: 0:00:00.309158 s\n",
      "[4/100,   100/288] loss: 0.15288322, Est. epoch time left: 0:00:00.246973 s\n",
      "[4/100,   110/288] loss: 0.23478787, Est. epoch time left: 0:00:00.219152 s\n",
      "[4/100,   120/288] loss: 0.22128835, Est. epoch time left: 0:00:00.181486 s\n",
      "[4/100,   130/288] loss: 0.33170545, Est. epoch time left: 0:00:00.170420 s\n",
      "[4/100,   140/288] loss: 0.27596664, Est. epoch time left: 0:00:00.158257 s\n",
      "[4/100,   150/288] loss: 0.31535356, Est. epoch time left: 0:00:00.149308 s\n",
      "[4/100,   160/288] loss: 0.23389735, Est. epoch time left: 0:00:00.137238 s\n",
      "[4/100,   170/288] loss: 0.25706784, Est. epoch time left: 0:00:00.126713 s\n",
      "[4/100,   180/288] loss: 0.14181874, Est. epoch time left: 0:00:00.116464 s\n",
      "[4/100,   190/288] loss: 0.33137622, Est. epoch time left: 0:00:00.106872 s\n",
      "[4/100,   200/288] loss: 0.23431375, Est. epoch time left: 0:00:00.105743 s\n",
      "[4/100,   210/288] loss: 0.14239660, Est. epoch time left: 0:00:00.083685 s\n",
      "[4/100,   220/288] loss: 0.23179372, Est. epoch time left: 0:00:00.073524 s\n",
      "[4/100,   230/288] loss: 0.31682110, Est. epoch time left: 0:00:00.062366 s\n",
      "[4/100,   240/288] loss: 0.33748750, Est. epoch time left: 0:00:00.051888 s\n",
      "[4/100,   250/288] loss: 0.17526029, Est. epoch time left: 0:00:00.040706 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4/100,   260/288] loss: 0.27241113, Est. epoch time left: 0:00:00.030435 s\n",
      "[4/100,   270/288] loss: 0.40001048, Est. epoch time left: 0:00:00.019900 s\n",
      "[4/100,   280/288] loss: 0.22953101, Est. epoch time left: 0:00:00.008751 s\n",
      "Validation...\n",
      "[4,    10] loss: 0.214\n",
      "[4,    20] loss: 0.293\n",
      "[4,    30] loss: 0.263\n",
      "[5/100,    10/288] loss: 0.12967411, Est. epoch time left: 0:00:00.299786 s\n",
      "[5/100,    20/288] loss: 0.31124175, Est. epoch time left: 0:00:00.300823 s\n",
      "[5/100,    30/288] loss: 0.28939740, Est. epoch time left: 0:00:00.494679 s\n",
      "[5/100,    40/288] loss: 0.13221890, Est. epoch time left: 0:00:00.201685 s\n",
      "[5/100,    50/288] loss: 0.18185765, Est. epoch time left: 0:00:00.170742 s\n",
      "[5/100,    60/288] loss: 0.27474643, Est. epoch time left: 0:00:00.193574 s\n",
      "[5/100,    70/288] loss: 0.26997832, Est. epoch time left: 0:00:00.169231 s\n",
      "[5/100,    80/288] loss: 0.25517915, Est. epoch time left: 0:00:00.156361 s\n",
      "[5/100,    90/288] loss: 0.22939832, Est. epoch time left: 0:00:00.284374 s\n",
      "[5/100,   100/288] loss: 0.20492857, Est. epoch time left: 0:00:00.248138 s\n",
      "[5/100,   110/288] loss: 0.21528043, Est. epoch time left: 0:00:00.210750 s\n",
      "[5/100,   120/288] loss: 0.34282249, Est. epoch time left: 0:00:00.181326 s\n",
      "[5/100,   130/288] loss: 0.28129117, Est. epoch time left: 0:00:00.135876 s\n",
      "[5/100,   140/288] loss: 0.23543788, Est. epoch time left: 0:00:00.129076 s\n",
      "[5/100,   150/288] loss: 0.23924090, Est. epoch time left: 0:00:00.120026 s\n",
      "[5/100,   160/288] loss: 0.19819310, Est. epoch time left: 0:00:00.111847 s\n",
      "[5/100,   170/288] loss: 0.29465236, Est. epoch time left: 0:00:00.104150 s\n",
      "[5/100,   180/288] loss: 0.21176998, Est. epoch time left: 0:00:00.094216 s\n",
      "[5/100,   190/288] loss: 0.19876032, Est. epoch time left: 0:00:00.086264 s\n",
      "[5/100,   200/288] loss: 0.25540911, Est. epoch time left: 0:00:00.076685 s\n",
      "[5/100,   210/288] loss: 0.20429878, Est. epoch time left: 0:00:00.066557 s\n",
      "[5/100,   220/288] loss: 0.33824626, Est. epoch time left: 0:00:00.074610 s\n",
      "[5/100,   230/288] loss: 0.26923315, Est. epoch time left: 0:00:00.076042 s\n",
      "[5/100,   240/288] loss: 0.25133242, Est. epoch time left: 0:00:00.056065 s\n",
      "[5/100,   250/288] loss: 0.10997312, Est. epoch time left: 0:00:00.049766 s\n",
      "[5/100,   260/288] loss: 0.28397448, Est. epoch time left: 0:00:00.037564 s\n",
      "[5/100,   270/288] loss: 0.29546233, Est. epoch time left: 0:00:00.019960 s\n",
      "[5/100,   280/288] loss: 0.26882955, Est. epoch time left: 0:00:00.007933 s\n",
      "Validation...\n",
      "[5,    10] loss: 0.275\n",
      "[5,    20] loss: 0.185\n",
      "[5,    30] loss: 0.184\n",
      "[6/100,    10/288] loss: 0.23608202, Est. epoch time left: 0:00:00.240531 s\n",
      "[6/100,    20/288] loss: 0.17282964, Est. epoch time left: 0:00:00.234499 s\n",
      "[6/100,    30/288] loss: 0.15399180, Est. epoch time left: 0:00:00.220459 s\n",
      "[6/100,    40/288] loss: 0.27670050, Est. epoch time left: 0:00:00.215048 s\n",
      "[6/100,    50/288] loss: 0.20053058, Est. epoch time left: 0:00:00.208306 s\n",
      "[6/100,    60/288] loss: 0.24362403, Est. epoch time left: 0:00:00.198195 s\n",
      "[6/100,    70/288] loss: 0.26159553, Est. epoch time left: 0:00:00.218556 s\n",
      "[6/100,    80/288] loss: 0.18958778, Est. epoch time left: 0:00:00.189041 s\n",
      "[6/100,    90/288] loss: 0.16541622, Est. epoch time left: 0:00:00.175043 s\n",
      "[6/100,   100/288] loss: 0.16342152, Est. epoch time left: 0:00:00.165978 s\n",
      "[6/100,   110/288] loss: 0.15698269, Est. epoch time left: 0:00:00.154179 s\n",
      "[6/100,   120/288] loss: 0.26218803, Est. epoch time left: 0:00:00.192461 s\n",
      "[6/100,   130/288] loss: 0.17192699, Est. epoch time left: 0:00:00.160738 s\n",
      "[6/100,   140/288] loss: 0.33687481, Est. epoch time left: 0:00:00.128935 s\n",
      "[6/100,   150/288] loss: 0.22041353, Est. epoch time left: 0:00:00.120947 s\n",
      "[6/100,   160/288] loss: 0.09745984, Est. epoch time left: 0:00:00.111725 s\n",
      "[6/100,   170/288] loss: 0.20191583, Est. epoch time left: 0:00:00.132283 s\n",
      "[6/100,   180/288] loss: 0.10875579, Est. epoch time left: 0:00:00.094422 s\n",
      "[6/100,   190/288] loss: 0.26514890, Est. epoch time left: 0:00:00.085983 s\n",
      "[6/100,   200/288] loss: 0.12269945, Est. epoch time left: 0:00:00.077314 s\n",
      "[6/100,   210/288] loss: 0.23861269, Est. epoch time left: 0:00:00.068863 s\n",
      "[6/100,   220/288] loss: 0.25693617, Est. epoch time left: 0:00:00.059824 s\n",
      "[6/100,   230/288] loss: 0.20414403, Est. epoch time left: 0:00:00.050611 s\n",
      "[6/100,   240/288] loss: 0.24708702, Est. epoch time left: 0:00:00.041725 s\n",
      "[6/100,   250/288] loss: 0.24351011, Est. epoch time left: 0:00:00.032851 s\n",
      "[6/100,   260/288] loss: 0.13642906, Est. epoch time left: 0:00:00.028812 s\n",
      "[6/100,   270/288] loss: 0.20576062, Est. epoch time left: 0:00:00.015999 s\n",
      "[6/100,   280/288] loss: 0.27567437, Est. epoch time left: 0:00:00.007061 s\n",
      "Validation...\n",
      "[6,    10] loss: 0.195\n",
      "[6,    20] loss: 0.267\n",
      "[6,    30] loss: 0.188\n",
      "[7/100,    10/288] loss: 0.20148385, Est. epoch time left: 0:00:00.299123 s\n",
      "[7/100,    20/288] loss: 0.14914953, Est. epoch time left: 0:00:00.295328 s\n",
      "[7/100,    30/288] loss: 0.26013131, Est. epoch time left: 0:00:00.279880 s\n",
      "[7/100,    40/288] loss: 0.26768953, Est. epoch time left: 0:00:00.326681 s\n",
      "[7/100,    50/288] loss: 0.19311048, Est. epoch time left: 0:00:00.277476 s\n",
      "[7/100,    60/288] loss: 0.15115657, Est. epoch time left: 0:00:00.247118 s\n",
      "[7/100,    70/288] loss: 0.17333285, Est. epoch time left: 0:00:00.192049 s\n",
      "[7/100,    80/288] loss: 0.11515810, Est. epoch time left: 0:00:00.181751 s\n",
      "[7/100,    90/288] loss: 0.11825901, Est. epoch time left: 0:00:00.161070 s\n",
      "[7/100,   100/288] loss: 0.23112023, Est. epoch time left: 0:00:00.167323 s\n",
      "[7/100,   110/288] loss: 0.13631774, Est. epoch time left: 0:00:00.186899 s\n",
      "[7/100,   120/288] loss: 0.16689818, Est. epoch time left: 0:00:00.172153 s\n",
      "[7/100,   130/288] loss: 0.29468800, Est. epoch time left: 0:00:00.150115 s\n",
      "[7/100,   140/288] loss: 0.27806428, Est. epoch time left: 0:00:00.133275 s\n",
      "[7/100,   150/288] loss: 0.21747267, Est. epoch time left: 0:00:00.125257 s\n",
      "[7/100,   160/288] loss: 0.21640788, Est. epoch time left: 0:00:00.112061 s\n",
      "[7/100,   170/288] loss: 0.21343624, Est. epoch time left: 0:00:00.101787 s\n",
      "[7/100,   180/288] loss: 0.20192879, Est. epoch time left: 0:00:00.097203 s\n",
      "[7/100,   190/288] loss: 0.10710006, Est. epoch time left: 0:00:00.084535 s\n",
      "[7/100,   200/288] loss: 0.09088828, Est. epoch time left: 0:00:00.077000 s\n",
      "[7/100,   210/288] loss: 0.23105828, Est. epoch time left: 0:00:00.067357 s\n",
      "[7/100,   220/288] loss: 0.17045042, Est. epoch time left: 0:00:00.059175 s\n",
      "[7/100,   230/288] loss: 0.17024808, Est. epoch time left: 0:00:00.049325 s\n",
      "[7/100,   240/288] loss: 0.19375331, Est. epoch time left: 0:00:00.041382 s\n",
      "[7/100,   250/288] loss: 0.13275770, Est. epoch time left: 0:00:00.035515 s\n",
      "[7/100,   260/288] loss: 0.12333092, Est. epoch time left: 0:00:00.026376 s\n",
      "[7/100,   270/288] loss: 0.18515904, Est. epoch time left: 0:00:00.016904 s\n",
      "[7/100,   280/288] loss: 0.12885533, Est. epoch time left: 0:00:00.007465 s\n",
      "Validation...\n",
      "[7,    10] loss: 0.077\n",
      "[7,    20] loss: 0.195\n",
      "[7,    30] loss: 0.236\n",
      "[8/100,    10/288] loss: 0.17633612, Est. epoch time left: 0:00:00.370043 s\n",
      "[8/100,    20/288] loss: 0.19233760, Est. epoch time left: 0:00:00.298779 s\n",
      "[8/100,    30/288] loss: 0.15148710, Est. epoch time left: 0:00:00.272806 s\n",
      "[8/100,    40/288] loss: 0.12457139, Est. epoch time left: 0:00:00.252357 s\n",
      "[8/100,    50/288] loss: 0.12817342, Est. epoch time left: 0:00:00.233330 s\n",
      "[8/100,    60/288] loss: 0.11161051, Est. epoch time left: 0:00:00.216731 s\n",
      "[8/100,    70/288] loss: 0.11192226, Est. epoch time left: 0:00:00.195687 s\n",
      "[8/100,    80/288] loss: 0.17007982, Est. epoch time left: 0:00:00.183586 s\n",
      "[8/100,    90/288] loss: 0.16549427, Est. epoch time left: 0:00:00.171833 s\n",
      "[8/100,   100/288] loss: 0.20602720, Est. epoch time left: 0:00:00.168175 s\n",
      "[8/100,   110/288] loss: 0.21309490, Est. epoch time left: 0:00:00.155834 s\n",
      "[8/100,   120/288] loss: 0.15672007, Est. epoch time left: 0:00:00.146238 s\n",
      "[8/100,   130/288] loss: 0.21099839, Est. epoch time left: 0:00:00.136780 s\n",
      "[8/100,   140/288] loss: 0.14394383, Est. epoch time left: 0:00:00.243226 s\n",
      "[8/100,   150/288] loss: 0.19816848, Est. epoch time left: 0:00:00.183954 s\n",
      "[8/100,   160/288] loss: 0.12072788, Est. epoch time left: 0:00:00.149261 s\n",
      "[8/100,   170/288] loss: 0.09627134, Est. epoch time left: 0:00:00.120298 s\n",
      "[8/100,   180/288] loss: 0.13340953, Est. epoch time left: 0:00:00.113605 s\n",
      "[8/100,   190/288] loss: 0.11058109, Est. epoch time left: 0:00:00.092339 s\n",
      "[8/100,   200/288] loss: 0.17236792, Est. epoch time left: 0:00:00.080587 s\n",
      "[8/100,   210/288] loss: 0.11135487, Est. epoch time left: 0:00:00.072787 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[8/100,   220/288] loss: 0.17254431, Est. epoch time left: 0:00:00.068011 s\n",
      "[8/100,   230/288] loss: 0.17663710, Est. epoch time left: 0:00:00.051178 s\n",
      "[8/100,   240/288] loss: 0.14910482, Est. epoch time left: 0:00:00.041771 s\n",
      "[8/100,   250/288] loss: 0.13988216, Est. epoch time left: 0:00:00.050038 s\n",
      "[8/100,   260/288] loss: 0.18438291, Est. epoch time left: 0:00:00.033205 s\n",
      "[8/100,   270/288] loss: 0.13567293, Est. epoch time left: 0:00:00.019205 s\n",
      "[8/100,   280/288] loss: 0.15104216, Est. epoch time left: 0:00:00.007812 s\n",
      "Validation...\n",
      "[8,    10] loss: 0.092\n",
      "[8,    20] loss: 0.193\n",
      "[8,    30] loss: 0.185\n",
      "[9/100,    10/288] loss: 0.14784939, Est. epoch time left: 0:00:00.249943 s\n",
      "[9/100,    20/288] loss: 0.16963779, Est. epoch time left: 0:00:00.464525 s\n",
      "[9/100,    30/288] loss: 0.06738649, Est. epoch time left: 0:00:00.427201 s\n",
      "[9/100,    40/288] loss: 0.15495684, Est. epoch time left: 0:00:00.364937 s\n",
      "[9/100,    50/288] loss: 0.16363304, Est. epoch time left: 0:00:00.312998 s\n",
      "[9/100,    60/288] loss: 0.11214125, Est. epoch time left: 0:00:00.276635 s\n",
      "[9/100,    70/288] loss: 0.14654494, Est. epoch time left: 0:00:00.243140 s\n",
      "[9/100,    80/288] loss: 0.14595489, Est. epoch time left: 0:00:00.224152 s\n",
      "[9/100,    90/288] loss: 0.15193502, Est. epoch time left: 0:00:00.216160 s\n",
      "[9/100,   100/288] loss: 0.16509652, Est. epoch time left: 0:00:00.202240 s\n",
      "[9/100,   110/288] loss: 0.14238296, Est. epoch time left: 0:00:00.192713 s\n",
      "[9/100,   120/288] loss: 0.12367758, Est. epoch time left: 0:00:00.181286 s\n",
      "[9/100,   130/288] loss: 0.15310808, Est. epoch time left: 0:00:00.177050 s\n",
      "[9/100,   140/288] loss: 0.14137597, Est. epoch time left: 0:00:00.160022 s\n",
      "[9/100,   150/288] loss: 0.19498556, Est. epoch time left: 0:00:00.149111 s\n",
      "[9/100,   160/288] loss: 0.09637083, Est. epoch time left: 0:00:00.138885 s\n",
      "[9/100,   170/288] loss: 0.11422282, Est. epoch time left: 0:00:00.127304 s\n",
      "[9/100,   180/288] loss: 0.05676523, Est. epoch time left: 0:00:00.116438 s\n",
      "[9/100,   190/288] loss: 0.17230843, Est. epoch time left: 0:00:00.105400 s\n",
      "[9/100,   200/288] loss: 0.09188009, Est. epoch time left: 0:00:00.095148 s\n",
      "[9/100,   210/288] loss: 0.13081734, Est. epoch time left: 0:00:00.084615 s\n",
      "[9/100,   220/288] loss: 0.10319566, Est. epoch time left: 0:00:00.073005 s\n",
      "[9/100,   230/288] loss: 0.07187847, Est. epoch time left: 0:00:00.065187 s\n",
      "[9/100,   240/288] loss: 0.13461103, Est. epoch time left: 0:00:00.052448 s\n",
      "[9/100,   250/288] loss: 0.07631504, Est. epoch time left: 0:00:00.040751 s\n",
      "[9/100,   260/288] loss: 0.16866219, Est. epoch time left: 0:00:00.030021 s\n",
      "[9/100,   270/288] loss: 0.13314437, Est. epoch time left: 0:00:00.019428 s\n",
      "[9/100,   280/288] loss: 0.06169194, Est. epoch time left: 0:00:00.008629 s\n",
      "Validation...\n",
      "[9,    10] loss: 0.115\n",
      "[9,    20] loss: 0.149\n",
      "[9,    30] loss: 0.119\n",
      "[10/100,    10/288] loss: 0.11763427, Est. epoch time left: 0:00:00.309529 s\n",
      "[10/100,    20/288] loss: 0.14156339, Est. epoch time left: 0:00:00.288108 s\n",
      "[10/100,    30/288] loss: 0.16206226, Est. epoch time left: 0:00:00.520391 s\n",
      "[10/100,    40/288] loss: 0.11353608, Est. epoch time left: 0:00:00.353111 s\n",
      "[10/100,    50/288] loss: 0.12633716, Est. epoch time left: 0:00:00.310728 s\n",
      "[10/100,    60/288] loss: 0.11520574, Est. epoch time left: 0:00:00.537887 s\n",
      "[10/100,    70/288] loss: 0.13863293, Est. epoch time left: 0:00:00.242153 s\n",
      "[10/100,    80/288] loss: 0.09292994, Est. epoch time left: 0:00:00.221325 s\n",
      "[10/100,    90/288] loss: 0.15180201, Est. epoch time left: 0:00:00.194587 s\n",
      "[10/100,   100/288] loss: 0.11808465, Est. epoch time left: 0:00:00.177229 s\n",
      "[10/100,   110/288] loss: 0.11699038, Est. epoch time left: 0:00:00.156301 s\n",
      "[10/100,   120/288] loss: 0.10740595, Est. epoch time left: 0:00:00.146679 s\n",
      "[10/100,   130/288] loss: 0.09017798, Est. epoch time left: 0:00:00.136705 s\n",
      "[10/100,   140/288] loss: 0.07795759, Est. epoch time left: 0:00:00.130240 s\n",
      "[10/100,   150/288] loss: 0.07104901, Est. epoch time left: 0:00:00.124171 s\n",
      "[10/100,   160/288] loss: 0.11039678, Est. epoch time left: 0:00:00.116425 s\n",
      "[10/100,   170/288] loss: 0.09454478, Est. epoch time left: 0:00:00.113378 s\n",
      "[10/100,   180/288] loss: 0.09700332, Est. epoch time left: 0:00:00.100911 s\n",
      "[10/100,   190/288] loss: 0.11225357, Est. epoch time left: 0:00:00.091264 s\n",
      "[10/100,   200/288] loss: 0.06768614, Est. epoch time left: 0:00:00.082748 s\n",
      "[10/100,   210/288] loss: 0.09715425, Est. epoch time left: 0:00:00.072880 s\n",
      "[10/100,   220/288] loss: 0.08545129, Est. epoch time left: 0:00:00.063861 s\n",
      "[10/100,   230/288] loss: 0.06860109, Est. epoch time left: 0:00:00.054221 s\n",
      "[10/100,   240/288] loss: 0.05853144, Est. epoch time left: 0:00:00.044735 s\n",
      "[10/100,   250/288] loss: 0.10903164, Est. epoch time left: 0:00:00.034092 s\n",
      "[10/100,   260/288] loss: 0.11816474, Est. epoch time left: 0:00:00.025475 s\n",
      "[10/100,   270/288] loss: 0.11017059, Est. epoch time left: 0:00:00.016840 s\n",
      "[10/100,   280/288] loss: 0.08590361, Est. epoch time left: 0:00:00.007299 s\n",
      "Validation...\n",
      "[10,    10] loss: 0.103\n",
      "[10,    20] loss: 0.122\n",
      "[10,    30] loss: 0.067\n",
      "[11/100,    10/288] loss: 0.09067599, Est. epoch time left: 0:00:00.618992 s\n",
      "[11/100,    20/288] loss: 0.11152597, Est. epoch time left: 0:00:00.316158 s\n",
      "[11/100,    30/288] loss: 0.06202988, Est. epoch time left: 0:00:00.285231 s\n",
      "[11/100,    40/288] loss: 0.09894016, Est. epoch time left: 0:00:00.260695 s\n",
      "[11/100,    50/288] loss: 0.09297390, Est. epoch time left: 0:00:00.296088 s\n",
      "[11/100,    60/288] loss: 0.06550532, Est. epoch time left: 0:00:00.264785 s\n",
      "[11/100,    70/288] loss: 0.12865959, Est. epoch time left: 0:00:00.221519 s\n",
      "[11/100,    80/288] loss: 0.09582421, Est. epoch time left: 0:00:00.220383 s\n",
      "[11/100,    90/288] loss: 0.08809563, Est. epoch time left: 0:00:00.194634 s\n",
      "[11/100,   100/288] loss: 0.06428375, Est. epoch time left: 0:00:00.186238 s\n",
      "[11/100,   110/288] loss: 0.08728030, Est. epoch time left: 0:00:00.248435 s\n",
      "[11/100,   120/288] loss: 0.09621878, Est. epoch time left: 0:00:00.196867 s\n",
      "[11/100,   130/288] loss: 0.11641532, Est. epoch time left: 0:00:00.185714 s\n",
      "[11/100,   140/288] loss: 0.10502571, Est. epoch time left: 0:00:00.156881 s\n",
      "[11/100,   150/288] loss: 0.10535511, Est. epoch time left: 0:00:00.139569 s\n",
      "[11/100,   160/288] loss: 0.07431139, Est. epoch time left: 0:00:00.129730 s\n",
      "[11/100,   170/288] loss: 0.08006413, Est. epoch time left: 0:00:00.113012 s\n",
      "[11/100,   180/288] loss: 0.08216065, Est. epoch time left: 0:00:00.105005 s\n",
      "[11/100,   190/288] loss: 0.08086267, Est. epoch time left: 0:00:00.095540 s\n",
      "[11/100,   200/288] loss: 0.07498016, Est. epoch time left: 0:00:00.082853 s\n",
      "[11/100,   210/288] loss: 0.06777405, Est. epoch time left: 0:00:00.070797 s\n",
      "[11/100,   220/288] loss: 0.08492392, Est. epoch time left: 0:00:00.059321 s\n",
      "[11/100,   230/288] loss: 0.07561615, Est. epoch time left: 0:00:00.049325 s\n",
      "[11/100,   240/288] loss: 0.07469305, Est. epoch time left: 0:00:00.041508 s\n",
      "[11/100,   250/288] loss: 0.06020109, Est. epoch time left: 0:00:00.033467 s\n",
      "[11/100,   260/288] loss: 0.09444224, Est. epoch time left: 0:00:00.024613 s\n",
      "[11/100,   270/288] loss: 0.07253741, Est. epoch time left: 0:00:00.016201 s\n",
      "[11/100,   280/288] loss: 0.05087000, Est. epoch time left: 0:00:00.007206 s\n",
      "Validation...\n",
      "[11,    10] loss: 0.074\n",
      "[11,    20] loss: 0.057\n",
      "[11,    30] loss: 0.052\n",
      "[12/100,    10/288] loss: 0.04793580, Est. epoch time left: 0:00:00.295478 s\n",
      "[12/100,    20/288] loss: 0.10807313, Est. epoch time left: 0:00:00.259546 s\n",
      "[12/100,    30/288] loss: 0.07143749, Est. epoch time left: 0:00:00.242419 s\n",
      "[12/100,    40/288] loss: 0.03888498, Est. epoch time left: 0:00:00.240355 s\n",
      "[12/100,    50/288] loss: 0.05340478, Est. epoch time left: 0:00:00.224251 s\n",
      "[12/100,    60/288] loss: 0.08831792, Est. epoch time left: 0:00:00.204826 s\n",
      "[12/100,    70/288] loss: 0.07362774, Est. epoch time left: 0:00:00.199897 s\n",
      "[12/100,    80/288] loss: 0.08986973, Est. epoch time left: 0:00:00.180611 s\n",
      "[12/100,    90/288] loss: 0.05803236, Est. epoch time left: 0:00:00.277010 s\n",
      "[12/100,   100/288] loss: 0.08123198, Est. epoch time left: 0:00:00.245852 s\n",
      "[12/100,   110/288] loss: 0.03672515, Est. epoch time left: 0:00:00.222887 s\n",
      "[12/100,   120/288] loss: 0.06664942, Est. epoch time left: 0:00:00.196026 s\n",
      "[12/100,   130/288] loss: 0.06545244, Est. epoch time left: 0:00:00.168159 s\n",
      "[12/100,   140/288] loss: 0.07940748, Est. epoch time left: 0:00:00.157128 s\n",
      "[12/100,   150/288] loss: 0.01509010, Est. epoch time left: 0:00:00.145228 s\n",
      "[12/100,   160/288] loss: 0.06425128, Est. epoch time left: 0:00:00.135010 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12/100,   170/288] loss: 0.09628738, Est. epoch time left: 0:00:00.188944 s\n",
      "[12/100,   180/288] loss: 0.08181094, Est. epoch time left: 0:00:00.164640 s\n",
      "[12/100,   190/288] loss: 0.06317425, Est. epoch time left: 0:00:00.131358 s\n",
      "[12/100,   200/288] loss: 0.03255848, Est. epoch time left: 0:00:00.109058 s\n",
      "[12/100,   210/288] loss: 0.03781903, Est. epoch time left: 0:00:00.091514 s\n",
      "[12/100,   220/288] loss: 0.06778569, Est. epoch time left: 0:00:00.069941 s\n",
      "[12/100,   230/288] loss: 0.06629577, Est. epoch time left: 0:00:00.055050 s\n",
      "[12/100,   240/288] loss: 0.07518806, Est. epoch time left: 0:00:00.041805 s\n",
      "[12/100,   250/288] loss: 0.06182112, Est. epoch time left: 0:00:00.032969 s\n",
      "[12/100,   260/288] loss: 0.05090675, Est. epoch time left: 0:00:00.024460 s\n",
      "[12/100,   270/288] loss: 0.08466695, Est. epoch time left: 0:00:00.016552 s\n",
      "[12/100,   280/288] loss: 0.03503550, Est. epoch time left: 0:00:00.007462 s\n",
      "Validation...\n",
      "[12,    10] loss: 0.034\n",
      "[12,    20] loss: 0.071\n",
      "[12,    30] loss: 0.041\n",
      "[13/100,    10/288] loss: 0.03249433, Est. epoch time left: 0:00:00.271617 s\n",
      "[13/100,    20/288] loss: 0.04511551, Est. epoch time left: 0:00:00.253029 s\n",
      "[13/100,    30/288] loss: 0.02730837, Est. epoch time left: 0:00:00.233746 s\n",
      "[13/100,    40/288] loss: 0.06280524, Est. epoch time left: 0:00:00.362158 s\n",
      "[13/100,    50/288] loss: 0.05620552, Est. epoch time left: 0:00:00.319580 s\n",
      "[13/100,    60/288] loss: 0.06347636, Est. epoch time left: 0:00:00.266416 s\n",
      "[13/100,    70/288] loss: 0.05086091, Est. epoch time left: 0:00:00.242724 s\n",
      "[13/100,    80/288] loss: 0.07479406, Est. epoch time left: 0:00:00.220482 s\n",
      "[13/100,    90/288] loss: 0.02589256, Est. epoch time left: 0:00:00.201479 s\n",
      "[13/100,   100/288] loss: 0.03347795, Est. epoch time left: 0:00:00.191527 s\n",
      "[13/100,   110/288] loss: 0.04290159, Est. epoch time left: 0:00:00.174889 s\n",
      "[13/100,   120/288] loss: 0.07136267, Est. epoch time left: 0:00:00.156652 s\n",
      "[13/100,   130/288] loss: 0.06086653, Est. epoch time left: 0:00:00.150379 s\n",
      "[13/100,   140/288] loss: 0.07834107, Est. epoch time left: 0:00:00.138180 s\n",
      "[13/100,   150/288] loss: 0.04954717, Est. epoch time left: 0:00:00.119104 s\n",
      "[13/100,   160/288] loss: 0.03818857, Est. epoch time left: 0:00:00.111572 s\n",
      "[13/100,   170/288] loss: 0.05457253, Est. epoch time left: 0:00:00.102687 s\n",
      "[13/100,   180/288] loss: 0.04246375, Est. epoch time left: 0:00:00.093959 s\n",
      "[13/100,   190/288] loss: 0.03786051, Est. epoch time left: 0:00:00.085796 s\n",
      "[13/100,   200/288] loss: 0.01481073, Est. epoch time left: 0:00:00.076097 s\n",
      "[13/100,   210/288] loss: 0.06196396, Est. epoch time left: 0:00:00.067878 s\n",
      "[13/100,   220/288] loss: 0.02856979, Est. epoch time left: 0:00:00.060570 s\n",
      "[13/100,   230/288] loss: 0.04315163, Est. epoch time left: 0:00:00.050529 s\n",
      "[13/100,   240/288] loss: 0.04432387, Est. epoch time left: 0:00:00.078381 s\n",
      "[13/100,   250/288] loss: 0.04182862, Est. epoch time left: 0:00:00.051152 s\n",
      "[13/100,   260/288] loss: 0.06433106, Est. epoch time left: 0:00:00.031176 s\n",
      "[13/100,   270/288] loss: 0.04973528, Est. epoch time left: 0:00:00.018115 s\n",
      "[13/100,   280/288] loss: 0.04757752, Est. epoch time left: 0:00:00.007229 s\n",
      "Validation...\n",
      "[13,    10] loss: 0.056\n",
      "[13,    20] loss: 0.051\n",
      "[13,    30] loss: 0.022\n",
      "[14/100,    10/288] loss: 0.03085396, Est. epoch time left: 0:00:00.241857 s\n",
      "[14/100,    20/288] loss: 0.03947048, Est. epoch time left: 0:00:00.262102 s\n",
      "[14/100,    30/288] loss: 0.03410382, Est. epoch time left: 0:00:00.233500 s\n",
      "[14/100,    40/288] loss: 0.03465200, Est. epoch time left: 0:00:00.265957 s\n",
      "[14/100,    50/288] loss: 0.04370398, Est. epoch time left: 0:00:00.252452 s\n",
      "[14/100,    60/288] loss: 0.03357566, Est. epoch time left: 0:00:00.346922 s\n",
      "[14/100,    70/288] loss: 0.03176688, Est. epoch time left: 0:00:00.265697 s\n",
      "[14/100,    80/288] loss: 0.02212060, Est. epoch time left: 0:00:00.347336 s\n",
      "[14/100,    90/288] loss: 0.04145637, Est. epoch time left: 0:00:00.263367 s\n",
      "[14/100,   100/288] loss: 0.07023230, Est. epoch time left: 0:00:00.220707 s\n",
      "[14/100,   110/288] loss: 0.02589996, Est. epoch time left: 0:00:00.186093 s\n",
      "[14/100,   120/288] loss: 0.02179736, Est. epoch time left: 0:00:00.144756 s\n",
      "[14/100,   130/288] loss: 0.05333863, Est. epoch time left: 0:00:00.134520 s\n",
      "[14/100,   140/288] loss: 0.04114434, Est. epoch time left: 0:00:00.129252 s\n",
      "[14/100,   150/288] loss: 0.04569278, Est. epoch time left: 0:00:00.121375 s\n",
      "[14/100,   160/288] loss: 0.02370917, Est. epoch time left: 0:00:00.112305 s\n",
      "[14/100,   170/288] loss: 0.04470709, Est. epoch time left: 0:00:00.104290 s\n",
      "[14/100,   180/288] loss: 0.04521066, Est. epoch time left: 0:00:00.093006 s\n",
      "[14/100,   190/288] loss: 0.03209496, Est. epoch time left: 0:00:00.084908 s\n",
      "[14/100,   200/288] loss: 0.04762892, Est. epoch time left: 0:00:00.077209 s\n",
      "[14/100,   210/288] loss: 0.01816965, Est. epoch time left: 0:00:00.067748 s\n",
      "[14/100,   220/288] loss: 0.04781969, Est. epoch time left: 0:00:00.061348 s\n",
      "[14/100,   230/288] loss: 0.03271867, Est. epoch time left: 0:00:00.050266 s\n",
      "[14/100,   240/288] loss: 0.03140641, Est. epoch time left: 0:00:00.042183 s\n",
      "[14/100,   250/288] loss: 0.03965054, Est. epoch time left: 0:00:00.035433 s\n",
      "[14/100,   260/288] loss: 0.01339586, Est. epoch time left: 0:00:00.027491 s\n",
      "[14/100,   270/288] loss: 0.04786168, Est. epoch time left: 0:00:00.024196 s\n",
      "[14/100,   280/288] loss: 0.02210469, Est. epoch time left: 0:00:00.010117 s\n",
      "Validation...\n",
      "[14,    10] loss: 0.021\n",
      "[14,    20] loss: 0.026\n",
      "[14,    30] loss: 0.044\n",
      "[15/100,    10/288] loss: 0.03985892, Est. epoch time left: 0:00:00.388469 s\n",
      "[15/100,    20/288] loss: 0.03489743, Est. epoch time left: 0:00:00.383952 s\n",
      "[15/100,    30/288] loss: 0.01805434, Est. epoch time left: 0:00:00.300056 s\n",
      "[15/100,    40/288] loss: 0.02818642, Est. epoch time left: 0:00:00.262941 s\n",
      "[15/100,    50/288] loss: 0.02521597, Est. epoch time left: 0:00:00.251828 s\n",
      "[15/100,    60/288] loss: 0.03370501, Est. epoch time left: 0:00:00.231028 s\n",
      "[15/100,    70/288] loss: 0.03024275, Est. epoch time left: 0:00:00.213202 s\n",
      "[15/100,    80/288] loss: 0.01351762, Est. epoch time left: 0:00:00.184280 s\n",
      "[15/100,    90/288] loss: 0.03745613, Est. epoch time left: 0:00:00.172824 s\n",
      "[15/100,   100/288] loss: 0.02135492, Est. epoch time left: 0:00:00.162841 s\n",
      "[15/100,   110/288] loss: 0.05089193, Est. epoch time left: 0:00:00.154179 s\n",
      "[15/100,   120/288] loss: 0.02784378, Est. epoch time left: 0:00:00.146959 s\n",
      "[15/100,   130/288] loss: 0.02959249, Est. epoch time left: 0:00:00.143486 s\n",
      "[15/100,   140/288] loss: 0.02323995, Est. epoch time left: 0:00:00.136204 s\n",
      "[15/100,   150/288] loss: 0.04260382, Est. epoch time left: 0:00:00.125685 s\n",
      "[15/100,   160/288] loss: 0.03623629, Est. epoch time left: 0:00:00.192322 s\n",
      "[15/100,   170/288] loss: 0.03595306, Est. epoch time left: 0:00:00.169025 s\n",
      "[15/100,   180/288] loss: 0.02825008, Est. epoch time left: 0:00:00.101297 s\n",
      "[15/100,   190/288] loss: 0.04138748, Est. epoch time left: 0:00:00.088927 s\n",
      "[15/100,   200/288] loss: 0.02682390, Est. epoch time left: 0:00:00.098064 s\n",
      "[15/100,   210/288] loss: 0.02721723, Est. epoch time left: 0:00:00.087702 s\n",
      "[15/100,   220/288] loss: 0.01256232, Est. epoch time left: 0:00:00.101798 s\n",
      "[15/100,   230/288] loss: 0.01023490, Est. epoch time left: 0:00:00.071755 s\n",
      "[15/100,   240/288] loss: 0.00938911, Est. epoch time left: 0:00:00.059406 s\n",
      "[15/100,   250/288] loss: 0.02435628, Est. epoch time left: 0:00:00.039972 s\n",
      "[15/100,   260/288] loss: 0.01732664, Est. epoch time left: 0:00:00.029867 s\n",
      "[15/100,   270/288] loss: 0.03112653, Est. epoch time left: 0:00:00.018471 s\n",
      "[15/100,   280/288] loss: 0.01999560, Est. epoch time left: 0:00:00.007765 s\n",
      "Validation...\n",
      "[15,    10] loss: 0.015\n",
      "[15,    20] loss: 0.027\n",
      "[15,    30] loss: 0.015\n",
      "[16/100,    10/288] loss: 0.02015791, Est. epoch time left: 0:00:00.343200 s\n",
      "[16/100,    20/288] loss: 0.02690571, Est. epoch time left: 0:00:00.301718 s\n",
      "[16/100,    30/288] loss: 0.01561109, Est. epoch time left: 0:00:00.264379 s\n",
      "[16/100,    40/288] loss: 0.01804343, Est. epoch time left: 0:00:00.305868 s\n",
      "[16/100,    50/288] loss: 0.01594020, Est. epoch time left: 0:00:00.264028 s\n",
      "[16/100,    60/288] loss: 0.01368935, Est. epoch time left: 0:00:00.320395 s\n",
      "[16/100,    70/288] loss: 0.02150127, Est. epoch time left: 0:00:00.287839 s\n",
      "[16/100,    80/288] loss: 0.02445043, Est. epoch time left: 0:00:00.241806 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16/100,    90/288] loss: 0.02851770, Est. epoch time left: 0:00:00.231880 s\n",
      "[16/100,   100/288] loss: 0.02198818, Est. epoch time left: 0:00:00.219093 s\n",
      "[16/100,   110/288] loss: 0.01392277, Est. epoch time left: 0:00:00.204129 s\n",
      "[16/100,   120/288] loss: 0.03866625, Est. epoch time left: 0:00:00.187975 s\n",
      "[16/100,   130/288] loss: 0.03642395, Est. epoch time left: 0:00:00.161228 s\n",
      "[16/100,   140/288] loss: 0.01379617, Est. epoch time left: 0:00:00.138356 s\n",
      "[16/100,   150/288] loss: 0.01359847, Est. epoch time left: 0:00:00.119335 s\n",
      "[16/100,   160/288] loss: 0.02367117, Est. epoch time left: 0:00:00.110016 s\n",
      "[16/100,   170/288] loss: 0.01410769, Est. epoch time left: 0:00:00.103024 s\n",
      "[16/100,   180/288] loss: 0.01921550, Est. epoch time left: 0:00:00.093470 s\n",
      "[16/100,   190/288] loss: 0.01488673, Est. epoch time left: 0:00:00.088740 s\n",
      "[16/100,   200/288] loss: 0.04659928, Est. epoch time left: 0:00:00.075426 s\n",
      "[16/100,   210/288] loss: 0.01157300, Est. epoch time left: 0:00:00.071783 s\n",
      "[16/100,   220/288] loss: 0.03236448, Est. epoch time left: 0:00:00.061364 s\n",
      "[16/100,   230/288] loss: 0.01573430, Est. epoch time left: 0:00:00.052672 s\n",
      "[16/100,   240/288] loss: 0.01817712, Est. epoch time left: 0:00:00.041771 s\n",
      "[16/100,   250/288] loss: 0.01132857, Est. epoch time left: 0:00:00.033648 s\n",
      "[16/100,   260/288] loss: 0.00923014, Est. epoch time left: 0:00:00.036810 s\n",
      "[16/100,   270/288] loss: 0.00693232, Est. epoch time left: 0:00:00.015419 s\n",
      "[16/100,   280/288] loss: 0.01188944, Est. epoch time left: 0:00:00.006832 s\n",
      "Validation...\n",
      "[16,    10] loss: 0.026\n",
      "[16,    20] loss: 0.015\n",
      "[16,    30] loss: 0.009\n",
      "[17/100,    10/288] loss: 0.02030345, Est. epoch time left: 0:00:00.241459 s\n",
      "[17/100,    20/288] loss: 0.01306880, Est. epoch time left: 0:00:00.238908 s\n",
      "[17/100,    30/288] loss: 0.01819475, Est. epoch time left: 0:00:00.226180 s\n",
      "[17/100,    40/288] loss: 0.02341847, Est. epoch time left: 0:00:00.215048 s\n",
      "[17/100,    50/288] loss: 0.00788530, Est. epoch time left: 0:00:00.209611 s\n",
      "[17/100,    60/288] loss: 0.01630989, Est. epoch time left: 0:00:00.195531 s\n",
      "[17/100,    70/288] loss: 0.00472853, Est. epoch time left: 0:00:00.188618 s\n",
      "[17/100,    80/288] loss: 0.02605902, Est. epoch time left: 0:00:00.181057 s\n",
      "[17/100,    90/288] loss: 0.01609226, Est. epoch time left: 0:00:00.174618 s\n",
      "[17/100,   100/288] loss: 0.00429822, Est. epoch time left: 0:00:00.164768 s\n",
      "[17/100,   110/288] loss: 0.00811048, Est. epoch time left: 0:00:00.158720 s\n",
      "[17/100,   120/288] loss: 0.02246189, Est. epoch time left: 0:00:00.148281 s\n",
      "[17/100,   130/288] loss: 0.01447767, Est. epoch time left: 0:00:00.137006 s\n",
      "[17/100,   140/288] loss: 0.01947343, Est. epoch time left: 0:00:00.130029 s\n",
      "[17/100,   150/288] loss: 0.01431600, Est. epoch time left: 0:00:00.126211 s\n",
      "[17/100,   160/288] loss: 0.00657763, Est. epoch time left: 0:00:00.119965 s\n",
      "[17/100,   170/288] loss: 0.00854323, Est. epoch time left: 0:00:00.106569 s\n",
      "[17/100,   180/288] loss: 0.03644892, Est. epoch time left: 0:00:00.093135 s\n",
      "[17/100,   190/288] loss: 0.00576985, Est. epoch time left: 0:00:00.085236 s\n",
      "[17/100,   200/288] loss: 0.01307013, Est. epoch time left: 0:00:00.078489 s\n",
      "[17/100,   210/288] loss: 0.01026569, Est. epoch time left: 0:00:00.068770 s\n",
      "[17/100,   220/288] loss: 0.00334747, Est. epoch time left: 0:00:00.059873 s\n",
      "[17/100,   230/288] loss: 0.01075512, Est. epoch time left: 0:00:00.050280 s\n",
      "[17/100,   240/288] loss: 0.01536736, Est. epoch time left: 0:00:00.042023 s\n",
      "[17/100,   250/288] loss: 0.02334637, Est. epoch time left: 0:00:00.033368 s\n",
      "[17/100,   260/288] loss: 0.00378970, Est. epoch time left: 0:00:00.024293 s\n",
      "[17/100,   270/288] loss: 0.02291793, Est. epoch time left: 0:00:00.015982 s\n",
      "[17/100,   280/288] loss: 0.01507959, Est. epoch time left: 0:00:00.007462 s\n",
      "Validation...\n",
      "[17,    10] loss: 0.011\n",
      "[17,    20] loss: 0.008\n",
      "[17,    30] loss: 0.008\n",
      "[18/100,    10/288] loss: 0.00587241, Est. epoch time left: 0:00:00.421808 s\n",
      "[18/100,    20/288] loss: 0.00913247, Est. epoch time left: 0:00:00.296223 s\n",
      "[18/100,    30/288] loss: 0.01116968, Est. epoch time left: 0:00:00.271945 s\n",
      "[18/100,    40/288] loss: 0.01710846, Est. epoch time left: 0:00:00.243370 s\n",
      "[18/100,    50/288] loss: 0.01504338, Est. epoch time left: 0:00:00.232933 s\n",
      "[18/100,    60/288] loss: 0.00993741, Est. epoch time left: 0:00:00.213306 s\n",
      "[18/100,    70/288] loss: 0.00210676, Est. epoch time left: 0:00:00.196570 s\n",
      "[18/100,    80/288] loss: 0.02372188, Est. epoch time left: 0:00:00.184132 s\n",
      "[18/100,    90/288] loss: 0.00749992, Est. epoch time left: 0:00:00.172116 s\n",
      "[18/100,   100/288] loss: 0.00758688, Est. epoch time left: 0:00:00.166696 s\n",
      "[18/100,   110/288] loss: 0.01160368, Est. epoch time left: 0:00:00.154519 s\n",
      "[18/100,   120/288] loss: 0.01192683, Est. epoch time left: 0:00:00.146959 s\n",
      "[18/100,   130/288] loss: 0.01131877, Est. epoch time left: 0:00:00.175995 s\n",
      "[18/100,   140/288] loss: 0.00642015, Est. epoch time left: 0:00:00.164044 s\n",
      "[18/100,   150/288] loss: 0.00777779, Est. epoch time left: 0:00:00.141346 s\n",
      "[18/100,   160/288] loss: 0.01208121, Est. epoch time left: 0:00:00.141327 s\n",
      "[18/100,   170/288] loss: 0.01708974, Est. epoch time left: 0:00:00.124659 s\n",
      "[18/100,   180/288] loss: 0.01585866, Est. epoch time left: 0:00:00.113528 s\n",
      "[18/100,   190/288] loss: 0.01045344, Est. epoch time left: 0:00:00.104021 s\n",
      "[18/100,   200/288] loss: 0.00683759, Est. epoch time left: 0:00:00.085938 s\n",
      "[18/100,   210/288] loss: 0.01132525, Est. epoch time left: 0:00:00.097893 s\n",
      "[18/100,   220/288] loss: 0.00678511, Est. epoch time left: 0:00:00.085196 s\n",
      "[18/100,   230/288] loss: 0.01199862, Est. epoch time left: 0:00:00.061425 s\n",
      "[18/100,   240/288] loss: 0.01359438, Est. epoch time left: 0:00:00.051052 s\n",
      "[18/100,   250/288] loss: 0.00596453, Est. epoch time left: 0:00:00.066998 s\n",
      "[18/100,   260/288] loss: 0.01001781, Est. epoch time left: 0:00:00.037811 s\n",
      "[18/100,   270/288] loss: 0.00680583, Est. epoch time left: 0:00:00.022136 s\n",
      "[18/100,   280/288] loss: 0.00832035, Est. epoch time left: 0:00:00.009394 s\n",
      "Validation...\n",
      "[18,    10] loss: 0.010\n",
      "[18,    20] loss: 0.006\n",
      "[18,    30] loss: 0.011\n",
      "[19/100,    10/288] loss: 0.01032097, Est. epoch time left: 0:00:00.261874 s\n",
      "[19/100,    20/288] loss: 0.00400178, Est. epoch time left: 0:00:00.241847 s\n",
      "[19/100,    30/288] loss: 0.00793619, Est. epoch time left: 0:00:00.219044 s\n",
      "[19/100,    40/288] loss: 0.00955061, Est. epoch time left: 0:00:00.215521 s\n",
      "[19/100,    50/288] loss: 0.00941350, Est. epoch time left: 0:00:00.209100 s\n",
      "[19/100,    60/288] loss: 0.00262960, Est. epoch time left: 0:00:00.199880 s\n",
      "[19/100,    70/288] loss: 0.00559166, Est. epoch time left: 0:00:00.189086 s\n",
      "[19/100,    80/288] loss: 0.00224378, Est. epoch time left: 0:00:00.183685 s\n",
      "[19/100,    90/288] loss: 0.01026601, Est. epoch time left: 0:00:00.173249 s\n",
      "[19/100,   100/288] loss: 0.00467560, Est. epoch time left: 0:00:00.160779 s\n",
      "[19/100,   110/288] loss: 0.00965429, Est. epoch time left: 0:00:00.157192 s\n",
      "[19/100,   120/288] loss: 0.01511980, Est. epoch time left: 0:00:00.233957 s\n",
      "[19/100,   130/288] loss: 0.00847599, Est. epoch time left: 0:00:00.240788 s\n",
      "[19/100,   140/288] loss: 0.00777086, Est. epoch time left: 0:00:00.209352 s\n",
      "[19/100,   150/288] loss: 0.00310852, Est. epoch time left: 0:00:00.184414 s\n",
      "[19/100,   160/288] loss: 0.01541400, Est. epoch time left: 0:00:00.171600 s\n",
      "[19/100,   170/288] loss: 0.01108611, Est. epoch time left: 0:00:00.138726 s\n",
      "[19/100,   180/288] loss: 0.01233293, Est. epoch time left: 0:00:00.121485 s\n",
      "[19/100,   190/288] loss: 0.00693614, Est. epoch time left: 0:00:00.104301 s\n",
      "[19/100,   200/288] loss: 0.01006030, Est. epoch time left: 0:00:00.086231 s\n",
      "[19/100,   210/288] loss: 0.00963310, Est. epoch time left: 0:00:00.073122 s\n",
      "[19/100,   220/288] loss: 0.00473345, Est. epoch time left: 0:00:00.066520 s\n",
      "[19/100,   230/288] loss: 0.00548472, Est. epoch time left: 0:00:00.054345 s\n",
      "[19/100,   240/288] loss: 0.00459137, Est. epoch time left: 0:00:00.044827 s\n",
      "[19/100,   250/288] loss: 0.00783797, Est. epoch time left: 0:00:00.050527 s\n",
      "[19/100,   260/288] loss: 0.01034058, Est. epoch time left: 0:00:00.025408 s\n",
      "[19/100,   270/288] loss: 0.00511717, Est. epoch time left: 0:00:00.018398 s\n",
      "[19/100,   280/288] loss: 0.00859431, Est. epoch time left: 0:00:00.010704 s\n",
      "Validation...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[19,    10] loss: 0.004\n",
      "[19,    20] loss: 0.009\n",
      "[19,    30] loss: 0.003\n",
      "[20/100,    10/288] loss: 0.00689116, Est. epoch time left: 0:00:00.329612 s\n",
      "[20/100,    20/288] loss: 0.00162613, Est. epoch time left: 0:00:00.284338 s\n",
      "[20/100,    30/288] loss: 0.00534695, Est. epoch time left: 0:00:00.267577 s\n",
      "[20/100,    40/288] loss: 0.00094014, Est. epoch time left: 0:00:00.253126 s\n",
      "[20/100,    50/288] loss: 0.00139526, Est. epoch time left: 0:00:00.226123 s\n",
      "[20/100,    60/288] loss: 0.00213705, Est. epoch time left: 0:00:00.216894 s\n",
      "[20/100,    70/288] loss: 0.00627042, Est. epoch time left: 0:00:00.205822 s\n",
      "[20/100,    80/288] loss: 0.00728211, Est. epoch time left: 0:00:00.186562 s\n",
      "[20/100,    90/288] loss: 0.01089230, Est. epoch time left: 0:00:00.177687 s\n",
      "[20/100,   100/288] loss: 0.00750337, Est. epoch time left: 0:00:00.160958 s\n",
      "[20/100,   110/288] loss: 0.00295090, Est. epoch time left: 0:00:00.154264 s\n",
      "[20/100,   120/288] loss: 0.00181391, Est. epoch time left: 0:00:00.147360 s\n",
      "[20/100,   130/288] loss: 0.01134297, Est. epoch time left: 0:00:00.134859 s\n",
      "[20/100,   140/288] loss: 0.00088790, Est. epoch time left: 0:00:00.128229 s\n",
      "[20/100,   150/288] loss: 0.02104777, Est. epoch time left: 0:00:00.120684 s\n",
      "[20/100,   160/288] loss: 0.00646654, Est. epoch time left: 0:00:00.111542 s\n",
      "[20/100,   170/288] loss: 0.01571938, Est. epoch time left: 0:00:00.106232 s\n",
      "[20/100,   180/288] loss: 0.00392926, Est. epoch time left: 0:00:00.093444 s\n",
      "[20/100,   190/288] loss: 0.00836743, Est. epoch time left: 0:00:00.085866 s\n",
      "[20/100,   200/288] loss: 0.00154483, Est. epoch time left: 0:00:00.129766 s\n",
      "[20/100,   210/288] loss: 0.00361872, Est. epoch time left: 0:00:00.098488 s\n",
      "[20/100,   220/288] loss: 0.00874130, Est. epoch time left: 0:00:00.083332 s\n",
      "[20/100,   230/288] loss: 0.00833569, Est. epoch time left: 0:00:00.064661 s\n",
      "[20/100,   240/288] loss: 0.00712027, Est. epoch time left: 0:00:00.056236 s\n",
      "[20/100,   250/288] loss: 0.00247461, Est. epoch time left: 0:00:00.042808 s\n",
      "[20/100,   260/288] loss: 0.00277757, Est. epoch time left: 0:00:00.031022 s\n",
      "[20/100,   270/288] loss: 0.01028089, Est. epoch time left: 0:00:00.022355 s\n",
      "[20/100,   280/288] loss: 0.00487578, Est. epoch time left: 0:00:00.010065 s\n",
      "Validation...\n",
      "[20,    10] loss: 0.010\n",
      "[20,    20] loss: 0.003\n",
      "[20,    30] loss: 0.003\n",
      "[21/100,    10/288] loss: 0.00311726, Est. epoch time left: 0:00:00.271882 s\n",
      "[21/100,    20/288] loss: 0.00699927, Est. epoch time left: 0:00:00.264019 s\n",
      "[21/100,    30/288] loss: 0.00194890, Est. epoch time left: 0:00:00.445900 s\n",
      "[21/100,    40/288] loss: 0.00307976, Est. epoch time left: 0:00:00.330702 s\n",
      "[21/100,    50/288] loss: 0.00222972, Est. epoch time left: 0:00:00.207852 s\n",
      "[21/100,    60/288] loss: 0.00565957, Est. epoch time left: 0:00:00.428842 s\n",
      "[21/100,    70/288] loss: 0.00149695, Est. epoch time left: 0:00:00.341581 s\n",
      "[21/100,    80/288] loss: 0.00567903, Est. epoch time left: 0:00:00.301613 s\n",
      "[21/100,    90/288] loss: 0.00342747, Est. epoch time left: 0:00:00.264689 s\n",
      "[21/100,   100/288] loss: 0.00727949, Est. epoch time left: 0:00:00.230254 s\n",
      "[21/100,   110/288] loss: 0.00798629, Est. epoch time left: 0:00:00.206463 s\n",
      "[21/100,   120/288] loss: 0.00490342, Est. epoch time left: 0:00:00.219658 s\n",
      "[21/100,   130/288] loss: 0.00273931, Est. epoch time left: 0:00:00.196864 s\n",
      "[21/100,   140/288] loss: 0.01089461, Est. epoch time left: 0:00:00.172866 s\n",
      "[21/100,   150/288] loss: 0.00708451, Est. epoch time left: 0:00:00.153355 s\n",
      "[21/100,   160/288] loss: 0.00410433, Est. epoch time left: 0:00:00.143005 s\n",
      "[21/100,   170/288] loss: 0.00219673, Est. epoch time left: 0:00:00.128935 s\n",
      "[21/100,   180/288] loss: 0.00593261, Est. epoch time left: 0:00:00.110001 s\n",
      "[21/100,   190/288] loss: 0.00290817, Est. epoch time left: 0:00:00.151475 s\n",
      "[21/100,   200/288] loss: 0.00829482, Est. epoch time left: 0:00:00.126074 s\n",
      "[21/100,   210/288] loss: 0.00365793, Est. epoch time left: 0:00:00.092909 s\n",
      "[21/100,   220/288] loss: 0.00532990, Est. epoch time left: 0:00:00.075485 s\n",
      "[21/100,   230/288] loss: 0.00175028, Est. epoch time left: 0:00:00.061508 s\n",
      "[21/100,   240/288] loss: 0.00331399, Est. epoch time left: 0:00:00.051773 s\n",
      "[21/100,   250/288] loss: 0.00342986, Est. epoch time left: 0:00:00.038477 s\n",
      "[21/100,   260/288] loss: 0.00385770, Est. epoch time left: 0:00:00.028879 s\n",
      "[21/100,   270/288] loss: 0.00609916, Est. epoch time left: 0:00:00.018505 s\n",
      "[21/100,   280/288] loss: 0.00588275, Est. epoch time left: 0:00:00.008236 s\n",
      "Validation...\n",
      "[21,    10] loss: 0.006\n",
      "[21,    20] loss: 0.003\n",
      "[21,    30] loss: 0.002\n",
      "[22/100,    10/288] loss: 0.00365478, Est. epoch time left: 0:00:00.294683 s\n",
      "[22/100,    20/288] loss: 0.00246232, Est. epoch time left: 0:00:00.276607 s\n",
      "[22/100,    30/288] loss: 0.00316719, Est. epoch time left: 0:00:00.249985 s\n",
      "[22/100,    40/288] loss: 0.00044794, Est. epoch time left: 0:00:00.243311 s\n",
      "[22/100,    50/288] loss: 0.00294869, Est. epoch time left: 0:00:00.224308 s\n",
      "[22/100,    60/288] loss: 0.00601077, Est. epoch time left: 0:00:00.204826 s\n",
      "[22/100,    70/288] loss: 0.00663321, Est. epoch time left: 0:00:00.188254 s\n",
      "[22/100,    80/288] loss: 0.00344072, Est. epoch time left: 0:00:00.187950 s\n",
      "[22/100,    90/288] loss: 0.00387761, Est. epoch time left: 0:00:00.178489 s\n",
      "[22/100,   100/288] loss: 0.00143690, Est. epoch time left: 0:00:00.169744 s\n",
      "[22/100,   110/288] loss: 0.00421819, Est. epoch time left: 0:00:00.300889 s\n",
      "[22/100,   120/288] loss: 0.00217395, Est. epoch time left: 0:00:00.242929 s\n",
      "[22/100,   130/288] loss: 0.00504488, Est. epoch time left: 0:00:00.207110 s\n",
      "[22/100,   140/288] loss: 0.00645049, Est. epoch time left: 0:00:00.172090 s\n",
      "[22/100,   150/288] loss: 0.01139241, Est. epoch time left: 0:00:00.148979 s\n",
      "[22/100,   160/288] loss: 0.00256306, Est. epoch time left: 0:00:00.136902 s\n",
      "[22/100,   170/288] loss: 0.00594468, Est. epoch time left: 0:00:00.127726 s\n",
      "[22/100,   180/288] loss: 0.00361928, Est. epoch time left: 0:00:00.115897 s\n",
      "[22/100,   190/288] loss: 0.00533603, Est. epoch time left: 0:00:00.091918 s\n",
      "[22/100,   200/288] loss: 0.00253317, Est. epoch time left: 0:00:00.079937 s\n",
      "[22/100,   210/288] loss: 0.01050431, Est. epoch time left: 0:00:00.071616 s\n",
      "[22/100,   220/288] loss: 0.00130506, Est. epoch time left: 0:00:00.061299 s\n",
      "[22/100,   230/288] loss: 0.00226607, Est. epoch time left: 0:00:00.054954 s\n",
      "[22/100,   240/288] loss: 0.00365623, Est. epoch time left: 0:00:00.043911 s\n",
      "[22/100,   250/288] loss: 0.00397794, Est. epoch time left: 0:00:00.035759 s\n",
      "[22/100,   260/288] loss: 0.00619172, Est. epoch time left: 0:00:00.024914 s\n",
      "[22/100,   270/288] loss: 0.00348023, Est. epoch time left: 0:00:00.019089 s\n",
      "[22/100,   280/288] loss: 0.00129267, Est. epoch time left: 0:00:00.008181 s\n",
      "Validation...\n",
      "[22,    10] loss: 0.005\n",
      "[22,    20] loss: 0.003\n",
      "[22,    30] loss: 0.001\n",
      "[23/100,    10/288] loss: 0.00179816, Est. epoch time left: 0:00:00.243647 s\n",
      "[23/100,    20/288] loss: 0.00242841, Est. epoch time left: 0:00:00.236288 s\n",
      "[23/100,    30/288] loss: 0.00805326, Est. epoch time left: 0:00:00.227164 s\n",
      "[23/100,    40/288] loss: 0.00246930, Est. epoch time left: 0:00:00.215994 s\n",
      "[23/100,    50/288] loss: 0.00273426, Est. epoch time left: 0:00:00.207965 s\n",
      "[23/100,    60/288] loss: 0.00563091, Est. epoch time left: 0:00:00.198140 s\n",
      "[23/100,    70/288] loss: 0.00538396, Est. epoch time left: 0:00:00.188670 s\n",
      "[23/100,    80/288] loss: 0.00582223, Est. epoch time left: 0:00:00.180214 s\n",
      "[23/100,    90/288] loss: 0.00287282, Est. epoch time left: 0:00:00.171739 s\n",
      "[23/100,   100/288] loss: 0.00195728, Est. epoch time left: 0:00:00.163737 s\n",
      "[23/100,   110/288] loss: 0.00538069, Est. epoch time left: 0:00:00.155367 s\n",
      "[23/100,   120/288] loss: 0.00522417, Est. epoch time left: 0:00:00.145878 s\n",
      "[23/100,   130/288] loss: 0.00370842, Est. epoch time left: 0:00:00.137986 s\n",
      "[23/100,   140/288] loss: 0.00510229, Est. epoch time left: 0:00:00.140156 s\n",
      "[23/100,   150/288] loss: 0.00662734, Est. epoch time left: 0:00:00.220179 s\n",
      "[23/100,   160/288] loss: 0.00418248, Est. epoch time left: 0:00:00.151093 s\n",
      "[23/100,   170/288] loss: 0.00260698, Est. epoch time left: 0:00:00.130061 s\n",
      "[23/100,   180/288] loss: 0.00139733, Est. epoch time left: 0:00:00.135647 s\n",
      "[23/100,   190/288] loss: 0.00531676, Est. epoch time left: 0:00:00.108811 s\n",
      "[23/100,   200/288] loss: 0.00086798, Est. epoch time left: 0:00:00.094645 s\n",
      "[23/100,   210/288] loss: 0.00241475, Est. epoch time left: 0:00:00.082476 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23/100,   220/288] loss: 0.00379913, Est. epoch time left: 0:00:00.071465 s\n",
      "[23/100,   230/288] loss: 0.00097084, Est. epoch time left: 0:00:00.061190 s\n",
      "[23/100,   240/288] loss: 0.00574049, Est. epoch time left: 0:00:00.048923 s\n",
      "[23/100,   250/288] loss: 0.00433359, Est. epoch time left: 0:00:00.041096 s\n",
      "[23/100,   260/288] loss: 0.00070250, Est. epoch time left: 0:00:00.039540 s\n",
      "[23/100,   270/288] loss: 0.00309405, Est. epoch time left: 0:00:00.023964 s\n",
      "[23/100,   280/288] loss: 0.00445382, Est. epoch time left: 0:00:00.010220 s\n",
      "Validation...\n",
      "[23,    10] loss: 0.004\n",
      "[23,    20] loss: 0.005\n",
      "[23,    30] loss: 0.003\n",
      "[24/100,    10/288] loss: 0.00082595, Est. epoch time left: 0:00:00.344128 s\n",
      "[24/100,    20/288] loss: 0.00070259, Est. epoch time left: 0:00:00.282357 s\n",
      "[24/100,    30/288] loss: 0.00853412, Est. epoch time left: 0:00:00.264748 s\n",
      "[24/100,    40/288] loss: 0.00165317, Est. epoch time left: 0:00:00.243311 s\n",
      "[24/100,    50/288] loss: 0.00208973, Est. epoch time left: 0:00:00.216193 s\n",
      "[24/100,    60/288] loss: 0.00690013, Est. epoch time left: 0:00:00.197379 s\n",
      "[24/100,    70/288] loss: 0.00687009, Est. epoch time left: 0:00:00.188774 s\n",
      "[24/100,    80/288] loss: 0.00476020, Est. epoch time left: 0:00:00.179420 s\n",
      "[24/100,    90/288] loss: 0.00674546, Est. epoch time left: 0:00:00.174618 s\n",
      "[24/100,   100/288] loss: 0.00348362, Est. epoch time left: 0:00:00.164186 s\n",
      "[24/100,   110/288] loss: 0.00586237, Est. epoch time left: 0:00:00.154646 s\n",
      "[24/100,   120/288] loss: 0.00312487, Est. epoch time left: 0:00:00.148682 s\n",
      "[24/100,   130/288] loss: 0.00083285, Est. epoch time left: 0:00:00.136554 s\n",
      "[24/100,   140/288] loss: 0.00285067, Est. epoch time left: 0:00:00.133698 s\n",
      "[24/100,   150/288] loss: 0.00215902, Est. epoch time left: 0:00:00.129337 s\n",
      "[24/100,   160/288] loss: 0.00563819, Est. epoch time left: 0:00:00.123077 s\n",
      "[24/100,   170/288] loss: 0.00133062, Est. epoch time left: 0:00:00.111071 s\n",
      "[24/100,   180/288] loss: 0.00548173, Est. epoch time left: 0:00:00.106215 s\n",
      "[24/100,   190/288] loss: 0.00633158, Est. epoch time left: 0:00:00.091544 s\n",
      "[24/100,   200/288] loss: 0.00082049, Est. epoch time left: 0:00:00.082916 s\n",
      "[24/100,   210/288] loss: 0.00018883, Est. epoch time left: 0:00:00.073048 s\n",
      "[24/100,   220/288] loss: 0.00295527, Est. epoch time left: 0:00:00.063812 s\n",
      "[24/100,   230/288] loss: 0.00254658, Est. epoch time left: 0:00:00.053571 s\n",
      "[24/100,   240/288] loss: 0.00399298, Est. epoch time left: 0:00:00.043705 s\n",
      "[24/100,   250/288] loss: 0.00254419, Est. epoch time left: 0:00:00.034174 s\n",
      "[24/100,   260/288] loss: 0.00303572, Est. epoch time left: 0:00:00.024907 s\n",
      "[24/100,   270/288] loss: 0.00655460, Est. epoch time left: 0:00:00.016565 s\n",
      "[24/100,   280/288] loss: 0.00338775, Est. epoch time left: 0:00:00.007074 s\n",
      "Validation...\n",
      "[24,    10] loss: 0.005\n",
      "[24,    20] loss: 0.004\n",
      "[24,    30] loss: 0.001\n",
      "[25/100,    10/288] loss: 0.00253769, Est. epoch time left: 0:00:00.240664 s\n",
      "[25/100,    20/288] loss: 0.00285266, Est. epoch time left: 0:00:00.234435 s\n",
      "[25/100,    30/288] loss: 0.00199321, Est. epoch time left: 0:00:00.226057 s\n",
      "[25/100,    40/288] loss: 0.00295049, Est. epoch time left: 0:00:00.219660 s\n",
      "[25/100,    50/288] loss: 0.00131641, Est. epoch time left: 0:00:00.401688 s\n",
      "[25/100,    60/288] loss: 0.00109458, Est. epoch time left: 0:00:00.355185 s\n",
      "[25/100,    70/288] loss: 0.00250700, Est. epoch time left: 0:00:00.287319 s\n",
      "[25/100,    80/288] loss: 0.00264579, Est. epoch time left: 0:00:00.253014 s\n",
      "[25/100,    90/288] loss: 0.00409147, Est. epoch time left: 0:00:00.221400 s\n",
      "[25/100,   100/288] loss: 0.00601535, Est. epoch time left: 0:00:00.206140 s\n",
      "[25/100,   110/288] loss: 0.00333891, Est. epoch time left: 0:00:00.192671 s\n",
      "[25/100,   120/288] loss: 0.00619622, Est. epoch time left: 0:00:00.186813 s\n",
      "[25/100,   130/288] loss: 0.00336545, Est. epoch time left: 0:00:00.171851 s\n",
      "[25/100,   140/288] loss: 0.00047105, Est. epoch time left: 0:00:00.159563 s\n",
      "[25/100,   150/288] loss: 0.00494891, Est. epoch time left: 0:00:00.150098 s\n",
      "[25/100,   160/288] loss: 0.00523405, Est. epoch time left: 0:00:00.138184 s\n",
      "[25/100,   170/288] loss: 0.00513737, Est. epoch time left: 0:00:00.127388 s\n",
      "[25/100,   180/288] loss: 0.00357417, Est. epoch time left: 0:00:00.142110 s\n",
      "[25/100,   190/288] loss: 0.00303308, Est. epoch time left: 0:00:00.114746 s\n",
      "[25/100,   200/288] loss: 0.00624886, Est. epoch time left: 0:00:00.097792 s\n",
      "[25/100,   210/288] loss: 0.00465073, Est. epoch time left: 0:00:00.082532 s\n",
      "[25/100,   220/288] loss: 0.00458475, Est. epoch time left: 0:00:00.075923 s\n",
      "[25/100,   230/288] loss: 0.00395766, Est. epoch time left: 0:00:00.061674 s\n",
      "[25/100,   240/288] loss: 0.00270864, Est. epoch time left: 0:00:00.050892 s\n",
      "[25/100,   250/288] loss: 0.00455512, Est. epoch time left: 0:00:00.037354 s\n",
      "[25/100,   260/288] loss: 0.00503825, Est. epoch time left: 0:00:00.026216 s\n",
      "[25/100,   270/288] loss: 0.00356596, Est. epoch time left: 0:00:00.016819 s\n",
      "[25/100,   280/288] loss: 0.00418687, Est. epoch time left: 0:00:00.007015 s\n",
      "Validation...\n",
      "[25,    10] loss: 0.001\n",
      "[25,    20] loss: 0.001\n",
      "[25,    30] loss: 0.006\n",
      "[26/100,    10/288] loss: 0.00346899, Est. epoch time left: 0:00:00.262603 s\n",
      "[26/100,    20/288] loss: 0.00267747, Est. epoch time left: 0:00:00.263572 s\n",
      "[26/100,    30/288] loss: 0.00587775, Est. epoch time left: 0:00:00.236268 s\n",
      "[26/100,    40/288] loss: 0.00275791, Est. epoch time left: 0:00:00.235861 s\n",
      "[26/100,    50/288] loss: 0.00959941, Est. epoch time left: 0:00:00.221981 s\n",
      "[26/100,    60/288] loss: 0.00556123, Est. epoch time left: 0:00:00.205968 s\n",
      "[26/100,    70/288] loss: 0.00371118, Est. epoch time left: 0:00:00.198234 s\n",
      "[26/100,    80/288] loss: 0.00376630, Est. epoch time left: 0:00:00.179371 s\n",
      "[26/100,    90/288] loss: 0.00179636, Est. epoch time left: 0:00:00.172163 s\n",
      "[26/100,   100/288] loss: 0.00251438, Est. epoch time left: 0:00:00.201792 s\n",
      "[26/100,   110/288] loss: 0.00266368, Est. epoch time left: 0:00:00.210495 s\n",
      "[26/100,   120/288] loss: 0.00647172, Est. epoch time left: 0:00:00.238564 s\n",
      "[26/100,   130/288] loss: 0.00413638, Est. epoch time left: 0:00:00.203946 s\n",
      "[26/100,   140/288] loss: 0.00409895, Est. epoch time left: 0:00:00.172654 s\n",
      "[26/100,   150/288] loss: 0.00462404, Est. epoch time left: 0:00:00.143945 s\n",
      "[26/100,   160/288] loss: 0.00305021, Est. epoch time left: 0:00:00.123505 s\n",
      "[26/100,   170/288] loss: 0.00177260, Est. epoch time left: 0:00:00.105078 s\n",
      "[26/100,   180/288] loss: 0.00122054, Est. epoch time left: 0:00:00.098285 s\n",
      "[26/100,   190/288] loss: 0.00301784, Est. epoch time left: 0:00:00.086357 s\n",
      "[26/100,   200/288] loss: 0.00283190, Est. epoch time left: 0:00:00.077147 s\n",
      "[26/100,   210/288] loss: 0.00597876, Est. epoch time left: 0:00:00.067543 s\n",
      "[26/100,   220/288] loss: 0.00164688, Est. epoch time left: 0:00:00.058965 s\n",
      "[26/100,   230/288] loss: 0.00252428, Est. epoch time left: 0:00:00.061619 s\n",
      "[26/100,   240/288] loss: 0.00157192, Est. epoch time left: 0:00:00.047127 s\n",
      "[26/100,   250/288] loss: 0.00160815, Est. epoch time left: 0:00:00.036928 s\n",
      "[26/100,   260/288] loss: 0.00345567, Est. epoch time left: 0:00:00.026329 s\n",
      "[26/100,   270/288] loss: 0.00262260, Est. epoch time left: 0:00:00.016171 s\n",
      "[26/100,   280/288] loss: 0.00198576, Est. epoch time left: 0:00:00.007219 s\n",
      "Validation...\n",
      "[26,    10] loss: 0.002\n",
      "[26,    20] loss: 0.003\n",
      "[26,    30] loss: 0.004\n",
      "[27/100,    10/288] loss: 0.00324605, Est. epoch time left: 0:00:00.240995 s\n",
      "[27/100,    20/288] loss: 0.00325372, Est. epoch time left: 0:00:00.231304 s\n",
      "[27/100,    30/288] loss: 0.00142897, Est. epoch time left: 0:00:00.224334 s\n",
      "[27/100,    40/288] loss: 0.00285035, Est. epoch time left: 0:00:00.218241 s\n",
      "[27/100,    50/288] loss: 0.00375096, Est. epoch time left: 0:00:00.209554 s\n",
      "[27/100,    60/288] loss: 0.00376410, Est. epoch time left: 0:00:00.197162 s\n",
      "[27/100,    70/288] loss: 0.00356758, Est. epoch time left: 0:00:00.188514 s\n",
      "[27/100,    80/288] loss: 0.00354471, Est. epoch time left: 0:00:00.188148 s\n",
      "[27/100,    90/288] loss: 0.00169836, Est. epoch time left: 0:00:00.172683 s\n",
      "[27/100,   100/288] loss: 0.00176776, Est. epoch time left: 0:00:00.164723 s\n",
      "[27/100,   110/288] loss: 0.00336018, Est. epoch time left: 0:00:00.155410 s\n",
      "[27/100,   120/288] loss: 0.00304282, Est. epoch time left: 0:00:00.149443 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[27/100,   130/288] loss: 0.00330387, Est. epoch time left: 0:00:00.272920 s\n",
      "[27/100,   140/288] loss: 0.00538894, Est. epoch time left: 0:00:00.197213 s\n",
      "[27/100,   150/288] loss: 0.00283884, Est. epoch time left: 0:00:00.130192 s\n",
      "[27/100,   160/288] loss: 0.00180497, Est. epoch time left: 0:00:00.111572 s\n",
      "[27/100,   170/288] loss: 0.00514960, Est. epoch time left: 0:00:00.102828 s\n",
      "[27/100,   180/288] loss: 0.00663138, Est. epoch time left: 0:00:00.095530 s\n",
      "[27/100,   190/288] loss: 0.00363630, Est. epoch time left: 0:00:00.085913 s\n",
      "[27/100,   200/288] loss: 0.00179454, Est. epoch time left: 0:00:00.076412 s\n",
      "[27/100,   210/288] loss: 0.00344330, Est. epoch time left: 0:00:00.067171 s\n",
      "[27/100,   220/288] loss: 0.00565649, Est. epoch time left: 0:00:00.080933 s\n",
      "[27/100,   230/288] loss: 0.00243504, Est. epoch time left: 0:00:00.077673 s\n",
      "[27/100,   240/288] loss: 0.00438073, Est. epoch time left: 0:00:00.055023 s\n",
      "[27/100,   250/288] loss: 0.00464466, Est. epoch time left: 0:00:00.042210 s\n",
      "[27/100,   260/288] loss: 0.00314650, Est. epoch time left: 0:00:00.035929 s\n",
      "[27/100,   270/288] loss: 0.00703221, Est. epoch time left: 0:00:00.020535 s\n",
      "[27/100,   280/288] loss: 0.00063640, Est. epoch time left: 0:00:00.008404 s\n",
      "Validation...\n",
      "[27,    10] loss: 0.002\n",
      "[27,    20] loss: 0.005\n",
      "[27,    30] loss: 0.002\n",
      "[28/100,    10/288] loss: 0.00135674, Est. epoch time left: 0:00:00.267309 s\n",
      "[28/100,    20/288] loss: 0.00425128, Est. epoch time left: 0:00:00.236096 s\n",
      "[28/100,    30/288] loss: 0.00187934, Est. epoch time left: 0:00:00.223350 s\n",
      "[28/100,    40/288] loss: 0.00602299, Est. epoch time left: 0:00:00.215876 s\n",
      "[28/100,    50/288] loss: 0.00399200, Est. epoch time left: 0:00:00.252396 s\n",
      "[28/100,    60/288] loss: 0.00134330, Est. epoch time left: 0:00:00.223635 s\n",
      "[28/100,    70/288] loss: 0.00451326, Est. epoch time left: 0:00:00.196934 s\n",
      "[28/100,    80/288] loss: 0.00161947, Est. epoch time left: 0:00:00.276867 s\n",
      "[28/100,    90/288] loss: 0.00310344, Est. epoch time left: 0:00:00.248969 s\n",
      "[28/100,   100/288] loss: 0.00502156, Est. epoch time left: 0:00:00.319541 s\n",
      "[28/100,   110/288] loss: 0.00468043, Est. epoch time left: 0:00:00.267999 s\n",
      "[28/100,   120/288] loss: 0.00187601, Est. epoch time left: 0:00:00.220659 s\n",
      "[28/100,   130/288] loss: 0.00287126, Est. epoch time left: 0:00:00.192042 s\n",
      "[28/100,   140/288] loss: 0.00453670, Est. epoch time left: 0:00:00.159634 s\n",
      "[28/100,   150/288] loss: 0.00434331, Est. epoch time left: 0:00:00.147729 s\n",
      "[28/100,   160/288] loss: 0.00224344, Est. epoch time left: 0:00:00.139648 s\n",
      "[28/100,   170/288] loss: 0.00622342, Est. epoch time left: 0:00:00.128316 s\n",
      "[28/100,   180/288] loss: 0.00183279, Est. epoch time left: 0:00:00.116361 s\n",
      "[28/100,   190/288] loss: 0.00229778, Est. epoch time left: 0:00:00.105423 s\n",
      "[28/100,   200/288] loss: 0.00320594, Est. epoch time left: 0:00:00.154776 s\n",
      "[28/100,   210/288] loss: 0.00274362, Est. epoch time left: 0:00:00.119521 s\n",
      "[28/100,   220/288] loss: 0.00430870, Est. epoch time left: 0:00:00.090676 s\n",
      "[28/100,   230/288] loss: 0.00482607, Est. epoch time left: 0:00:00.071091 s\n",
      "[28/100,   240/288] loss: 0.00180765, Est. epoch time left: 0:00:00.053684 s\n",
      "[28/100,   250/288] loss: 0.00630692, Est. epoch time left: 0:00:00.041032 s\n",
      "[28/100,   260/288] loss: 0.00179568, Est. epoch time left: 0:00:00.030027 s\n",
      "[28/100,   270/288] loss: 0.00193023, Est. epoch time left: 0:00:00.019458 s\n",
      "[28/100,   280/288] loss: 0.00471263, Est. epoch time left: 0:00:00.008690 s\n",
      "Validation...\n",
      "[28,    10] loss: 0.002\n",
      "[28,    20] loss: 0.004\n",
      "[28,    30] loss: 0.004\n",
      "[29/100,    10/288] loss: 0.00570144, Est. epoch time left: 0:00:00.303697 s\n",
      "[29/100,    20/288] loss: 0.00344677, Est. epoch time left: 0:00:00.289002 s\n",
      "[29/100,    30/288] loss: 0.00535862, Est. epoch time left: 0:00:00.277358 s\n",
      "[29/100,    40/288] loss: 0.00218441, Est. epoch time left: 0:00:00.269386 s\n",
      "[29/100,    50/288] loss: 0.00343149, Est. epoch time left: 0:00:00.256254 s\n",
      "[29/100,    60/288] loss: 0.00293050, Est. epoch time left: 0:00:00.247607 s\n",
      "[29/100,    70/288] loss: 0.00222456, Est. epoch time left: 0:00:00.237371 s\n",
      "[29/100,    80/288] loss: 0.00187683, Est. epoch time left: 0:00:00.226482 s\n",
      "[29/100,    90/288] loss: 0.00091362, Est. epoch time left: 0:00:00.213092 s\n",
      "[29/100,   100/288] loss: 0.00294933, Est. epoch time left: 0:00:00.224427 s\n",
      "[29/100,   110/288] loss: 0.00283491, Est. epoch time left: 0:00:00.191313 s\n",
      "[29/100,   120/288] loss: 0.00350653, Est. epoch time left: 0:00:00.177521 s\n",
      "[29/100,   130/288] loss: 0.00116759, Est. epoch time left: 0:00:00.155050 s\n",
      "[29/100,   140/288] loss: 0.00520376, Est. epoch time left: 0:00:00.138885 s\n",
      "[29/100,   150/288] loss: 0.00170893, Est. epoch time left: 0:00:00.120355 s\n",
      "[29/100,   160/288] loss: 0.00286130, Est. epoch time left: 0:00:00.196899 s\n",
      "[29/100,   170/288] loss: 0.00401927, Est. epoch time left: 0:00:00.157828 s\n",
      "[29/100,   180/288] loss: 0.00539063, Est. epoch time left: 0:00:00.128334 s\n",
      "[29/100,   190/288] loss: 0.00677403, Est. epoch time left: 0:00:00.114792 s\n",
      "[29/100,   200/288] loss: 0.00198524, Est. epoch time left: 0:00:00.094728 s\n",
      "[29/100,   210/288] loss: 0.00378233, Est. epoch time left: 0:00:00.082272 s\n",
      "[29/100,   220/288] loss: 0.00463033, Est. epoch time left: 0:00:00.066666 s\n",
      "[29/100,   230/288] loss: 0.00627796, Est. epoch time left: 0:00:00.056198 s\n",
      "[29/100,   240/288] loss: 0.00456734, Est. epoch time left: 0:00:00.042572 s\n",
      "[29/100,   250/288] loss: 0.00505213, Est. epoch time left: 0:00:00.033268 s\n",
      "[29/100,   260/288] loss: 0.00295946, Est. epoch time left: 0:00:00.024266 s\n",
      "[29/100,   270/288] loss: 0.00136361, Est. epoch time left: 0:00:00.015677 s\n",
      "[29/100,   280/288] loss: 0.00345766, Est. epoch time left: 0:00:00.007248 s\n",
      "Validation...\n",
      "[29,    10] loss: 0.002\n",
      "[29,    20] loss: 0.002\n",
      "[29,    30] loss: 0.005\n",
      "[30/100,    10/288] loss: 0.00098574, Est. epoch time left: 0:00:00.283349 s\n",
      "[30/100,    20/288] loss: 0.00367277, Est. epoch time left: 0:00:00.258588 s\n",
      "[30/100,    30/288] loss: 0.00771855, Est. epoch time left: 0:00:00.242173 s\n",
      "[30/100,    40/288] loss: 0.00258590, Est. epoch time left: 0:00:00.231544 s\n",
      "[30/100,    50/288] loss: 0.00395154, Est. epoch time left: 0:00:00.215285 s\n",
      "[30/100,    60/288] loss: 0.00602381, Est. epoch time left: 0:00:00.198847 s\n",
      "[30/100,    70/288] loss: 0.00370695, Est. epoch time left: 0:00:00.190177 s\n",
      "[30/100,    80/288] loss: 0.00196521, Est. epoch time left: 0:00:00.182297 s\n",
      "[30/100,    90/288] loss: 0.00139988, Est. epoch time left: 0:00:00.173532 s\n",
      "[30/100,   100/288] loss: 0.00382443, Est. epoch time left: 0:00:00.164768 s\n",
      "[30/100,   110/288] loss: 0.00150125, Est. epoch time left: 0:00:00.155537 s\n",
      "[30/100,   120/288] loss: 0.00330896, Est. epoch time left: 0:00:00.145477 s\n",
      "[30/100,   130/288] loss: 0.00568432, Est. epoch time left: 0:00:00.139380 s\n",
      "[30/100,   140/288] loss: 0.00491309, Est. epoch time left: 0:00:00.129535 s\n",
      "[30/100,   150/288] loss: 0.00425954, Est. epoch time left: 0:00:00.119960 s\n",
      "[30/100,   160/288] loss: 0.00162766, Est. epoch time left: 0:00:00.113800 s\n",
      "[30/100,   170/288] loss: 0.00556521, Est. epoch time left: 0:00:00.102602 s\n",
      "[30/100,   180/288] loss: 0.00446382, Est. epoch time left: 0:00:00.094139 s\n",
      "[30/100,   190/288] loss: 0.00422860, Est. epoch time left: 0:00:00.086123 s\n",
      "[30/100,   200/288] loss: 0.00465977, Est. epoch time left: 0:00:00.076454 s\n",
      "[30/100,   210/288] loss: 0.00210765, Est. epoch time left: 0:00:00.072917 s\n",
      "[30/100,   220/288] loss: 0.00194173, Est. epoch time left: 0:00:00.063358 s\n",
      "[30/100,   230/288] loss: 0.00109226, Est. epoch time left: 0:00:00.050722 s\n",
      "[30/100,   240/288] loss: 0.00307254, Est. epoch time left: 0:00:00.041840 s\n",
      "[30/100,   250/288] loss: 0.00185209, Est. epoch time left: 0:00:00.034437 s\n",
      "[30/100,   260/288] loss: 0.00491465, Est. epoch time left: 0:00:00.025288 s\n",
      "[30/100,   270/288] loss: 0.00394566, Est. epoch time left: 0:00:00.017750 s\n",
      "[30/100,   280/288] loss: 0.00419428, Est. epoch time left: 0:00:00.007912 s\n",
      "Validation...\n",
      "[30,    10] loss: 0.001\n",
      "[30,    20] loss: 0.002\n",
      "[30,    30] loss: 0.007\n",
      "[31/100,    10/288] loss: 0.00225410, Est. epoch time left: 0:00:00.242056 s\n",
      "[31/100,    20/288] loss: 0.00273618, Est. epoch time left: 0:00:00.236032 s\n",
      "[31/100,    30/288] loss: 0.00792823, Est. epoch time left: 0:00:00.224396 s\n",
      "[31/100,    40/288] loss: 0.00239676, Est. epoch time left: 0:00:00.220310 s\n",
      "[31/100,    50/288] loss: 0.00273765, Est. epoch time left: 0:00:00.204107 s\n",
      "[31/100,    60/288] loss: 0.00351201, Est. epoch time left: 0:00:00.197651 s\n",
      "[31/100,    70/288] loss: 0.00396400, Est. epoch time left: 0:00:00.189190 s\n",
      "[31/100,    80/288] loss: 0.00295645, Est. epoch time left: 0:00:00.180214 s\n",
      "[31/100,    90/288] loss: 0.00313667, Est. epoch time left: 0:00:00.180472 s\n",
      "[31/100,   100/288] loss: 0.00160072, Est. epoch time left: 0:00:00.163468 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[31/100,   110/288] loss: 0.00129749, Est. epoch time left: 0:00:00.164661 s\n",
      "[31/100,   120/288] loss: 0.00191814, Est. epoch time left: 0:00:00.257830 s\n",
      "[31/100,   130/288] loss: 0.00329342, Est. epoch time left: 0:00:00.206884 s\n",
      "[31/100,   140/288] loss: 0.00518969, Est. epoch time left: 0:00:00.185886 s\n",
      "[31/100,   150/288] loss: 0.00585274, Est. epoch time left: 0:00:00.161877 s\n",
      "[31/100,   160/288] loss: 0.00229862, Est. epoch time left: 0:00:00.136902 s\n",
      "[31/100,   170/288] loss: 0.00267382, Est. epoch time left: 0:00:00.226305 s\n",
      "[31/100,   180/288] loss: 0.00467498, Est. epoch time left: 0:00:00.128772 s\n",
      "[31/100,   190/288] loss: 0.00425786, Est. epoch time left: 0:00:00.104745 s\n",
      "[31/100,   200/288] loss: 0.00520082, Est. epoch time left: 0:00:00.090343 s\n",
      "[31/100,   210/288] loss: 0.00280522, Est. epoch time left: 0:00:00.079928 s\n",
      "[31/100,   220/288] loss: 0.00397963, Est. epoch time left: 0:00:00.072340 s\n",
      "[31/100,   230/288] loss: 0.00505765, Est. epoch time left: 0:00:00.059379 s\n",
      "[31/100,   240/288] loss: 0.00326437, Est. epoch time left: 0:00:00.044918 s\n",
      "[31/100,   250/288] loss: 0.00374668, Est. epoch time left: 0:00:00.036312 s\n",
      "[31/100,   260/288] loss: 0.00367605, Est. epoch time left: 0:00:00.026356 s\n",
      "[31/100,   270/288] loss: 0.00240182, Est. epoch time left: 0:00:00.028200 s\n",
      "[31/100,   280/288] loss: 0.00626928, Est. epoch time left: 0:00:00.008160 s\n",
      "Validation...\n",
      "[31,    10] loss: 0.001\n",
      "[31,    20] loss: 0.004\n",
      "[31,    30] loss: 0.004\n",
      "[32/100,    10/288] loss: 0.00557919, Est. epoch time left: 0:00:00.407823 s\n",
      "[32/100,    20/288] loss: 0.00357493, Est. epoch time left: 0:00:00.355454 s\n",
      "[32/100,    30/288] loss: 0.00712897, Est. epoch time left: 0:00:00.312235 s\n",
      "[32/100,    40/288] loss: 0.00447988, Est. epoch time left: 0:00:00.355772 s\n",
      "[32/100,    50/288] loss: 0.00414844, Est. epoch time left: 0:00:00.341994 s\n",
      "[32/100,    60/288] loss: 0.00187938, Est. epoch time left: 0:00:00.275494 s\n",
      "[32/100,    70/288] loss: 0.00417371, Est. epoch time left: 0:00:00.229939 s\n",
      "[32/100,    80/288] loss: 0.00216574, Est. epoch time left: 0:00:00.217110 s\n",
      "[32/100,    90/288] loss: 0.00158364, Est. epoch time left: 0:00:00.210826 s\n",
      "[32/100,   100/288] loss: 0.00105938, Est. epoch time left: 0:00:00.190586 s\n",
      "[32/100,   110/288] loss: 0.00416282, Est. epoch time left: 0:00:00.173743 s\n",
      "[32/100,   120/288] loss: 0.00290923, Est. epoch time left: 0:00:00.163382 s\n",
      "[32/100,   130/288] loss: 0.00458191, Est. epoch time left: 0:00:00.149324 s\n",
      "[32/100,   140/288] loss: 0.00457602, Est. epoch time left: 0:00:00.139556 s\n",
      "[32/100,   150/288] loss: 0.00669971, Est. epoch time left: 0:00:00.130982 s\n",
      "[32/100,   160/288] loss: 0.00265217, Est. epoch time left: 0:00:00.126312 s\n",
      "[32/100,   170/288] loss: 0.00391256, Est. epoch time left: 0:00:00.115853 s\n",
      "[32/100,   180/288] loss: 0.00206870, Est. epoch time left: 0:00:00.105546 s\n",
      "[32/100,   190/288] loss: 0.00288449, Est. epoch time left: 0:00:00.091895 s\n",
      "[32/100,   200/288] loss: 0.00187144, Est. epoch time left: 0:00:00.082434 s\n",
      "[32/100,   210/288] loss: 0.00284466, Est. epoch time left: 0:00:00.076507 s\n",
      "[32/100,   220/288] loss: 0.00451033, Est. epoch time left: 0:00:00.066001 s\n",
      "[32/100,   230/288] loss: 0.00236749, Est. epoch time left: 0:00:00.056737 s\n",
      "[32/100,   240/288] loss: 0.00471160, Est. epoch time left: 0:00:00.047195 s\n",
      "[32/100,   250/288] loss: 0.00462787, Est. epoch time left: 0:00:00.038795 s\n",
      "[32/100,   260/288] loss: 0.00346406, Est. epoch time left: 0:00:00.027811 s\n",
      "[32/100,   270/288] loss: 0.00269841, Est. epoch time left: 0:00:00.016994 s\n",
      "[32/100,   280/288] loss: 0.00189527, Est. epoch time left: 0:00:00.007565 s\n",
      "Validation...\n",
      "[32,    10] loss: 0.002\n",
      "[32,    20] loss: 0.005\n",
      "[32,    30] loss: 0.005\n",
      "[33/100,    10/288] loss: 0.00391484, Est. epoch time left: 0:00:00.347177 s\n",
      "[33/100,    20/288] loss: 0.00263270, Est. epoch time left: 0:00:00.337436 s\n",
      "[33/100,    30/288] loss: 0.00159019, Est. epoch time left: 0:00:00.306699 s\n",
      "[33/100,    40/288] loss: 0.00542499, Est. epoch time left: 0:00:00.268204 s\n",
      "[33/100,    50/288] loss: 0.00249401, Est. epoch time left: 0:00:00.244281 s\n",
      "[33/100,    60/288] loss: 0.00609474, Est. epoch time left: 0:00:00.238149 s\n",
      "[33/100,    70/288] loss: 0.00137556, Est. epoch time left: 0:00:00.222298 s\n",
      "[33/100,    80/288] loss: 0.00076888, Est. epoch time left: 0:00:00.207539 s\n",
      "[33/100,    90/288] loss: 0.00260339, Est. epoch time left: 0:00:00.193218 s\n",
      "[33/100,   100/288] loss: 0.00559458, Est. epoch time left: 0:00:00.194710 s\n",
      "[33/100,   110/288] loss: 0.00221995, Est. epoch time left: 0:00:00.169075 s\n",
      "[33/100,   120/288] loss: 0.00103892, Est. epoch time left: 0:00:00.151846 s\n",
      "[33/100,   130/288] loss: 0.00471087, Est. epoch time left: 0:00:00.137986 s\n",
      "[33/100,   140/288] loss: 0.00290240, Est. epoch time left: 0:00:00.226642 s\n",
      "[33/100,   150/288] loss: 0.00108092, Est. epoch time left: 0:00:00.185369 s\n",
      "[33/100,   160/288] loss: 0.00362779, Est. epoch time left: 0:00:00.167328 s\n",
      "[33/100,   170/288] loss: 0.00153820, Est. epoch time left: 0:00:00.159038 s\n",
      "[33/100,   180/288] loss: 0.00569592, Est. epoch time left: 0:00:00.126892 s\n",
      "[33/100,   190/288] loss: 0.00324304, Est. epoch time left: 0:00:00.097058 s\n",
      "[33/100,   200/288] loss: 0.00146496, Est. epoch time left: 0:00:00.137466 s\n",
      "[33/100,   210/288] loss: 0.00336834, Est. epoch time left: 0:00:00.113105 s\n",
      "[33/100,   220/288] loss: 0.00377654, Est. epoch time left: 0:00:00.129343 s\n",
      "[33/100,   230/288] loss: 0.00463534, Est. epoch time left: 0:00:00.082347 s\n",
      "[33/100,   240/288] loss: 0.00535472, Est. epoch time left: 0:00:00.062840 s\n",
      "[33/100,   250/288] loss: 0.00431526, Est. epoch time left: 0:00:00.047374 s\n",
      "[33/100,   260/288] loss: 0.00453543, Est. epoch time left: 0:00:00.033018 s\n",
      "[33/100,   270/288] loss: 0.00591027, Est. epoch time left: 0:00:00.020166 s\n",
      "[33/100,   280/288] loss: 0.00446244, Est. epoch time left: 0:00:00.009052 s\n",
      "Validation...\n",
      "[33,    10] loss: 0.004\n",
      "[33,    20] loss: 0.003\n",
      "[33,    30] loss: 0.004\n",
      "[34/100,    10/288] loss: 0.00210251, Est. epoch time left: 0:00:00.282421 s\n",
      "[34/100,    20/288] loss: 0.00505115, Est. epoch time left: 0:00:00.263763 s\n",
      "[34/100,    30/288] loss: 0.00191554, Est. epoch time left: 0:00:00.243034 s\n",
      "[34/100,    40/288] loss: 0.00429716, Est. epoch time left: 0:00:00.233141 s\n",
      "[34/100,    50/288] loss: 0.00271265, Est. epoch time left: 0:00:00.228053 s\n",
      "[34/100,    60/288] loss: 0.00114661, Est. epoch time left: 0:00:00.203304 s\n",
      "[34/100,    70/288] loss: 0.00379609, Est. epoch time left: 0:00:00.189034 s\n",
      "[34/100,    80/288] loss: 0.00235103, Est. epoch time left: 0:00:00.180859 s\n",
      "[34/100,    90/288] loss: 0.00414738, Est. epoch time left: 0:00:00.175279 s\n",
      "[34/100,   100/288] loss: 0.00356537, Est. epoch time left: 0:00:00.164275 s\n",
      "[34/100,   110/288] loss: 0.00566432, Est. epoch time left: 0:00:00.155622 s\n",
      "[34/100,   120/288] loss: 0.00398097, Est. epoch time left: 0:00:00.146839 s\n",
      "[34/100,   130/288] loss: 0.00393718, Est. epoch time left: 0:00:00.138249 s\n",
      "[34/100,   140/288] loss: 0.00156152, Est. epoch time left: 0:00:00.148801 s\n",
      "[34/100,   150/288] loss: 0.00291825, Est. epoch time left: 0:00:00.136477 s\n",
      "[34/100,   160/288] loss: 0.00167942, Est. epoch time left: 0:00:00.114960 s\n",
      "[34/100,   170/288] loss: 0.00395654, Est. epoch time left: 0:00:00.106907 s\n",
      "[34/100,   180/288] loss: 0.00429483, Est. epoch time left: 0:00:00.098491 s\n",
      "[34/100,   190/288] loss: 0.00379423, Est. epoch time left: 0:00:00.087222 s\n",
      "[34/100,   200/288] loss: 0.00297523, Est. epoch time left: 0:00:00.081406 s\n",
      "[34/100,   210/288] loss: 0.00115717, Est. epoch time left: 0:00:00.073029 s\n",
      "[34/100,   220/288] loss: 0.00273236, Est. epoch time left: 0:00:00.064331 s\n",
      "[34/100,   230/288] loss: 0.00314334, Est. epoch time left: 0:00:00.053018 s\n",
      "[34/100,   240/288] loss: 0.00540429, Est. epoch time left: 0:00:00.042103 s\n",
      "[34/100,   250/288] loss: 0.00676358, Est. epoch time left: 0:00:00.032933 s\n",
      "[34/100,   260/288] loss: 0.00583130, Est. epoch time left: 0:00:00.024366 s\n",
      "[34/100,   270/288] loss: 0.00388788, Est. epoch time left: 0:00:00.015733 s\n",
      "[34/100,   280/288] loss: 0.00176533, Est. epoch time left: 0:00:00.007244 s\n",
      "Validation...\n",
      "[34,    10] loss: 0.004\n",
      "[34,    20] loss: 0.002\n",
      "[34,    30] loss: 0.002\n",
      "[35/100,    10/288] loss: 0.00424994, Est. epoch time left: 0:00:00.343796 s\n",
      "[35/100,    20/288] loss: 0.00228385, Est. epoch time left: 0:00:00.314305 s\n",
      "[35/100,    30/288] loss: 0.00665132, Est. epoch time left: 0:00:00.272375 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[35/100,    40/288] loss: 0.00212224, Est. epoch time left: 0:00:00.240059 s\n",
      "[35/100,    50/288] loss: 0.00245348, Est. epoch time left: 0:00:00.214718 s\n",
      "[35/100,    60/288] loss: 0.00093595, Est. epoch time left: 0:00:00.236844 s\n",
      "[35/100,    70/288] loss: 0.00468957, Est. epoch time left: 0:00:00.222402 s\n",
      "[35/100,    80/288] loss: 0.00283088, Est. epoch time left: 0:00:00.211357 s\n",
      "[35/100,    90/288] loss: 0.00234713, Est. epoch time left: 0:00:00.193548 s\n",
      "[35/100,   100/288] loss: 0.00411056, Est. epoch time left: 0:00:00.170730 s\n",
      "[35/100,   110/288] loss: 0.00077444, Est. epoch time left: 0:00:00.156598 s\n",
      "[35/100,   120/288] loss: 0.00275519, Est. epoch time left: 0:00:00.146198 s\n",
      "[35/100,   130/288] loss: 0.00994803, Est. epoch time left: 0:00:00.135198 s\n",
      "[35/100,   140/288] loss: 0.00608062, Est. epoch time left: 0:00:00.239062 s\n",
      "[35/100,   150/288] loss: 0.00541014, Est. epoch time left: 0:00:00.195667 s\n",
      "[35/100,   160/288] loss: 0.00272464, Est. epoch time left: 0:00:00.171692 s\n",
      "[35/100,   170/288] loss: 0.00358904, Est. epoch time left: 0:00:00.146294 s\n",
      "[35/100,   180/288] loss: 0.00429215, Est. epoch time left: 0:00:00.148058 s\n",
      "[35/100,   190/288] loss: 0.00203652, Est. epoch time left: 0:00:00.124746 s\n",
      "[35/100,   200/288] loss: 0.00562757, Est. epoch time left: 0:00:00.112268 s\n",
      "[35/100,   210/288] loss: 0.00284820, Est. epoch time left: 0:00:00.092630 s\n",
      "[35/100,   220/288] loss: 0.00332004, Est. epoch time left: 0:00:00.075761 s\n",
      "[35/100,   230/288] loss: 0.00357907, Est. epoch time left: 0:00:00.061384 s\n",
      "[35/100,   240/288] loss: 0.00254729, Est. epoch time left: 0:00:00.048717 s\n",
      "[35/100,   250/288] loss: 0.00321737, Est. epoch time left: 0:00:00.038985 s\n",
      "[35/100,   260/288] loss: 0.00125054, Est. epoch time left: 0:00:00.028445 s\n",
      "[35/100,   270/288] loss: 0.00197286, Est. epoch time left: 0:00:00.018054 s\n",
      "[35/100,   280/288] loss: 0.00221689, Est. epoch time left: 0:00:00.007492 s\n",
      "Validation...\n",
      "[35,    10] loss: 0.002\n",
      "[35,    20] loss: 0.005\n",
      "[35,    30] loss: 0.003\n",
      "[36/100,    10/288] loss: 0.00149492, Est. epoch time left: 0:00:00.365006 s\n",
      "[36/100,    20/288] loss: 0.00132083, Est. epoch time left: 0:00:00.393856 s\n",
      "[36/100,    30/288] loss: 0.00567172, Est. epoch time left: 0:00:00.363167 s\n",
      "[36/100,    40/288] loss: 0.00468246, Est. epoch time left: 0:00:00.327450 s\n",
      "[36/100,    50/288] loss: 0.00163764, Est. epoch time left: 0:00:00.303068 s\n",
      "[36/100,    60/288] loss: 0.00109183, Est. epoch time left: 0:00:00.296096 s\n",
      "[36/100,    70/288] loss: 0.00267049, Est. epoch time left: 0:00:00.242153 s\n",
      "[36/100,    80/288] loss: 0.00327493, Est. epoch time left: 0:00:00.224400 s\n",
      "[36/100,    90/288] loss: 0.00482591, Est. epoch time left: 0:00:00.215499 s\n",
      "[36/100,   100/288] loss: 0.00275066, Est. epoch time left: 0:00:00.214252 s\n",
      "[36/100,   110/288] loss: 0.00267490, Est. epoch time left: 0:00:00.163303 s\n",
      "[36/100,   120/288] loss: 0.00184023, Est. epoch time left: 0:00:00.152327 s\n",
      "[36/100,   130/288] loss: 0.00291282, Est. epoch time left: 0:00:00.142318 s\n",
      "[36/100,   140/288] loss: 0.00529722, Est. epoch time left: 0:00:00.139097 s\n",
      "[36/100,   150/288] loss: 0.00302040, Est. epoch time left: 0:00:00.129304 s\n",
      "[36/100,   160/288] loss: 0.00636549, Est. epoch time left: 0:00:00.119904 s\n",
      "[36/100,   170/288] loss: 0.00294049, Est. epoch time left: 0:00:00.138163 s\n",
      "[36/100,   180/288] loss: 0.00216496, Est. epoch time left: 0:00:00.114429 s\n",
      "[36/100,   190/288] loss: 0.00067613, Est. epoch time left: 0:00:00.131849 s\n",
      "[36/100,   200/288] loss: 0.00750519, Est. epoch time left: 0:00:00.102533 s\n",
      "[36/100,   210/288] loss: 0.00176852, Est. epoch time left: 0:00:00.067896 s\n",
      "[36/100,   220/288] loss: 0.00457270, Est. epoch time left: 0:00:00.060586 s\n",
      "[36/100,   230/288] loss: 0.00288063, Est. epoch time left: 0:00:00.049796 s\n",
      "[36/100,   240/288] loss: 0.00483426, Est. epoch time left: 0:00:00.053341 s\n",
      "[36/100,   250/288] loss: 0.00603567, Est. epoch time left: 0:00:00.037481 s\n",
      "[36/100,   260/288] loss: 0.00365855, Est. epoch time left: 0:00:00.024433 s\n",
      "[36/100,   270/288] loss: 0.00267445, Est. epoch time left: 0:00:00.015728 s\n",
      "[36/100,   280/288] loss: 0.00710224, Est. epoch time left: 0:00:00.011997 s\n",
      "Validation...\n",
      "[36,    10] loss: 0.002\n",
      "[36,    20] loss: 0.001\n",
      "[36,    30] loss: 0.002\n",
      "[37/100,    10/288] loss: 0.00076442, Est. epoch time left: 0:00:00.256372 s\n",
      "[37/100,    20/288] loss: 0.00457286, Est. epoch time left: 0:00:00.232199 s\n",
      "[37/100,    30/288] loss: 0.00289785, Est. epoch time left: 0:00:00.232454 s\n",
      "[37/100,    40/288] loss: 0.00412067, Est. epoch time left: 0:00:00.214634 s\n",
      "[37/100,    50/288] loss: 0.00283326, Est. epoch time left: 0:00:00.206433 s\n",
      "[37/100,    60/288] loss: 0.00290129, Est. epoch time left: 0:00:00.200532 s\n",
      "[37/100,    70/288] loss: 0.00258088, Est. epoch time left: 0:00:00.191633 s\n",
      "[37/100,    80/288] loss: 0.00186824, Est. epoch time left: 0:00:00.182247 s\n",
      "[37/100,    90/288] loss: 0.00545855, Est. epoch time left: 0:00:00.174052 s\n",
      "[37/100,   100/288] loss: 0.00449517, Est. epoch time left: 0:00:00.165037 s\n",
      "[37/100,   110/288] loss: 0.00406308, Est. epoch time left: 0:00:00.174634 s\n",
      "[37/100,   120/288] loss: 0.00982592, Est. epoch time left: 0:00:00.158575 s\n",
      "[37/100,   130/288] loss: 0.00400277, Est. epoch time left: 0:00:00.140246 s\n",
      "[37/100,   140/288] loss: 0.00385394, Est. epoch time left: 0:00:00.129782 s\n",
      "[37/100,   150/288] loss: 0.00394966, Est. epoch time left: 0:00:00.122592 s\n",
      "[37/100,   160/288] loss: 0.00251774, Est. epoch time left: 0:00:00.111542 s\n",
      "[37/100,   170/288] loss: 0.00154014, Est. epoch time left: 0:00:00.103925 s\n",
      "[37/100,   180/288] loss: 0.00199025, Est. epoch time left: 0:00:00.096328 s\n",
      "[37/100,   190/288] loss: 0.00415870, Est. epoch time left: 0:00:00.084885 s\n",
      "[37/100,   200/288] loss: 0.00069891, Est. epoch time left: 0:00:00.076307 s\n",
      "[37/100,   210/288] loss: 0.00419546, Est. epoch time left: 0:00:00.068101 s\n",
      "[37/100,   220/288] loss: 0.00405132, Est. epoch time left: 0:00:00.060505 s\n",
      "[37/100,   230/288] loss: 0.00334561, Est. epoch time left: 0:00:00.050418 s\n",
      "[37/100,   240/288] loss: 0.00530713, Est. epoch time left: 0:00:00.045284 s\n",
      "[37/100,   250/288] loss: 0.00252431, Est. epoch time left: 0:00:00.033893 s\n",
      "[37/100,   260/288] loss: 0.00195572, Est. epoch time left: 0:00:00.040001 s\n",
      "[37/100,   270/288] loss: 0.00684362, Est. epoch time left: 0:00:00.027028 s\n",
      "[37/100,   280/288] loss: 0.00355780, Est. epoch time left: 0:00:00.009636 s\n",
      "Validation...\n",
      "[37,    10] loss: 0.002\n",
      "[37,    20] loss: 0.001\n",
      "[37,    30] loss: 0.007\n",
      "[38/100,    10/288] loss: 0.00216676, Est. epoch time left: 0:00:00.245237 s\n",
      "[38/100,    20/288] loss: 0.00274095, Est. epoch time left: 0:00:00.236160 s\n",
      "[38/100,    30/288] loss: 0.00244961, Est. epoch time left: 0:00:00.226057 s\n",
      "[38/100,    40/288] loss: 0.00213990, Est. epoch time left: 0:00:00.214989 s\n",
      "[38/100,    50/288] loss: 0.00555628, Est. epoch time left: 0:00:00.208476 s\n",
      "[38/100,    60/288] loss: 0.00500418, Est. epoch time left: 0:00:00.198249 s\n",
      "[38/100,    70/288] loss: 0.00622040, Est. epoch time left: 0:00:00.190073 s\n",
      "[38/100,    80/288] loss: 0.00544088, Est. epoch time left: 0:00:00.183388 s\n",
      "[38/100,    90/288] loss: 0.00501901, Est. epoch time left: 0:00:00.171927 s\n",
      "[38/100,   100/288] loss: 0.00693453, Est. epoch time left: 0:00:00.164813 s\n",
      "[38/100,   110/288] loss: 0.00683336, Est. epoch time left: 0:00:00.156131 s\n",
      "[38/100,   120/288] loss: 0.00444215, Est. epoch time left: 0:00:00.145798 s\n",
      "[38/100,   130/288] loss: 0.00358783, Est. epoch time left: 0:00:00.135801 s\n",
      "[38/100,   140/288] loss: 0.00259793, Est. epoch time left: 0:00:00.130205 s\n",
      "[38/100,   150/288] loss: 0.00122785, Est. epoch time left: 0:00:00.120552 s\n",
      "[38/100,   160/288] loss: 0.00095337, Est. epoch time left: 0:00:00.111969 s\n",
      "[38/100,   170/288] loss: 0.00192218, Est. epoch time left: 0:00:00.102659 s\n",
      "[38/100,   180/288] loss: 0.00346272, Est. epoch time left: 0:00:00.095169 s\n",
      "[38/100,   190/288] loss: 0.00260526, Est. epoch time left: 0:00:00.130330 s\n",
      "[38/100,   200/288] loss: 0.00668066, Est. epoch time left: 0:00:00.098862 s\n",
      "[38/100,   210/288] loss: 0.00115459, Est. epoch time left: 0:00:00.079482 s\n",
      "[38/100,   220/288] loss: 0.00382284, Est. epoch time left: 0:00:00.062159 s\n",
      "[38/100,   230/288] loss: 0.00388354, Est. epoch time left: 0:00:00.050169 s\n",
      "[38/100,   240/288] loss: 0.00383509, Est. epoch time left: 0:00:00.041931 s\n",
      "[38/100,   250/288] loss: 0.00192971, Est. epoch time left: 0:00:00.033322 s\n",
      "[38/100,   260/288] loss: 0.00224101, Est. epoch time left: 0:00:00.024553 s\n",
      "[38/100,   270/288] loss: 0.00173649, Est. epoch time left: 0:00:00.015823 s\n",
      "[38/100,   280/288] loss: 0.00134865, Est. epoch time left: 0:00:00.008795 s\n",
      "Validation...\n",
      "[38,    10] loss: 0.001\n",
      "[38,    20] loss: 0.005\n",
      "[38,    30] loss: 0.003\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[39/100,    10/288] loss: 0.00367264, Est. epoch time left: 0:00:00.249943 s\n",
      "[39/100,    20/288] loss: 0.00111488, Est. epoch time left: 0:00:00.239483 s\n",
      "[39/100,    30/288] loss: 0.00068861, Est. epoch time left: 0:00:00.225564 s\n",
      "[39/100,    40/288] loss: 0.00217965, Est. epoch time left: 0:00:00.221434 s\n",
      "[39/100,    50/288] loss: 0.00325277, Est. epoch time left: 0:00:00.207398 s\n",
      "[39/100,    60/288] loss: 0.00553100, Est. epoch time left: 0:00:00.199608 s\n",
      "[39/100,    70/288] loss: 0.00246447, Est. epoch time left: 0:00:00.271415 s\n",
      "[39/100,    80/288] loss: 0.00408375, Est. epoch time left: 0:00:00.268089 s\n",
      "[39/100,    90/288] loss: 0.00423715, Est. epoch time left: 0:00:00.174241 s\n",
      "[39/100,   100/288] loss: 0.00111917, Est. epoch time left: 0:00:00.284624 s\n",
      "[39/100,   110/288] loss: 0.00454960, Est. epoch time left: 0:00:00.194029 s\n",
      "[39/100,   120/288] loss: 0.00291685, Est. epoch time left: 0:00:00.167067 s\n",
      "[39/100,   130/288] loss: 0.00448576, Est. epoch time left: 0:00:00.138099 s\n",
      "[39/100,   140/288] loss: 0.00360508, Est. epoch time left: 0:00:00.127770 s\n",
      "[39/100,   150/288] loss: 0.00241032, Est. epoch time left: 0:00:00.119730 s\n",
      "[39/100,   160/288] loss: 0.00567794, Est. epoch time left: 0:00:00.113129 s\n",
      "[39/100,   170/288] loss: 0.00182939, Est. epoch time left: 0:00:00.103812 s\n",
      "[39/100,   180/288] loss: 0.00282128, Est. epoch time left: 0:00:00.094345 s\n",
      "[39/100,   190/288] loss: 0.00316927, Est. epoch time left: 0:00:00.085890 s\n",
      "[39/100,   200/288] loss: 0.00183816, Est. epoch time left: 0:00:00.077503 s\n",
      "[39/100,   210/288] loss: 0.00285462, Est. epoch time left: 0:00:00.067971 s\n",
      "[39/100,   220/288] loss: 0.00364396, Est. epoch time left: 0:00:00.059581 s\n",
      "[39/100,   230/288] loss: 0.00298910, Est. epoch time left: 0:00:00.050722 s\n",
      "[39/100,   240/288] loss: 0.00200325, Est. epoch time left: 0:00:00.042515 s\n",
      "[39/100,   250/288] loss: 0.00593309, Est. epoch time left: 0:00:00.037381 s\n",
      "[39/100,   260/288] loss: 0.00855577, Est. epoch time left: 0:00:00.024860 s\n",
      "[39/100,   270/288] loss: 0.00291535, Est. epoch time left: 0:00:00.015801 s\n",
      "[39/100,   280/288] loss: 0.00339952, Est. epoch time left: 0:00:00.006924 s\n",
      "Validation...\n",
      "[39,    10] loss: 0.005\n",
      "[39,    20] loss: 0.003\n",
      "[39,    30] loss: 0.002\n",
      "[40/100,    10/288] loss: 0.00311001, Est. epoch time left: 0:00:00.325834 s\n",
      "[40/100,    20/288] loss: 0.00272199, Est. epoch time left: 0:00:00.300951 s\n",
      "[40/100,    30/288] loss: 0.00465698, Est. epoch time left: 0:00:00.263640 s\n",
      "[40/100,    40/288] loss: 0.00412395, Est. epoch time left: 0:00:00.224213 s\n",
      "[40/100,    50/288] loss: 0.00371200, Est. epoch time left: 0:00:00.208306 s\n",
      "[40/100,    60/288] loss: 0.00445860, Est. epoch time left: 0:00:00.197923 s\n",
      "[40/100,    70/288] loss: 0.00346315, Est. epoch time left: 0:00:00.189554 s\n",
      "[40/100,    80/288] loss: 0.00272791, Est. epoch time left: 0:00:00.181503 s\n",
      "[40/100,    90/288] loss: 0.00427185, Est. epoch time left: 0:00:00.169992 s\n",
      "[40/100,   100/288] loss: 0.00445575, Est. epoch time left: 0:00:00.166023 s\n",
      "[40/100,   110/288] loss: 0.00440363, Est. epoch time left: 0:00:00.162327 s\n",
      "[40/100,   120/288] loss: 0.00518832, Est. epoch time left: 0:00:00.153168 s\n",
      "[40/100,   130/288] loss: 0.00382709, Est. epoch time left: 0:00:00.137496 s\n",
      "[40/100,   140/288] loss: 0.00592623, Est. epoch time left: 0:00:00.129323 s\n",
      "[40/100,   150/288] loss: 0.00338338, Est. epoch time left: 0:00:00.166088 s\n",
      "[40/100,   160/288] loss: 0.00264843, Est. epoch time left: 0:00:00.160614 s\n",
      "[40/100,   170/288] loss: 0.00468374, Est. epoch time left: 0:00:00.132283 s\n",
      "[40/100,   180/288] loss: 0.00106820, Est. epoch time left: 0:00:00.098207 s\n",
      "[40/100,   190/288] loss: 0.00420185, Est. epoch time left: 0:00:00.084745 s\n",
      "[40/100,   200/288] loss: 0.00108157, Est. epoch time left: 0:00:00.077944 s\n",
      "[40/100,   210/288] loss: 0.00232743, Est. epoch time left: 0:00:00.068584 s\n",
      "[40/100,   220/288] loss: 0.00429322, Est. epoch time left: 0:00:00.059678 s\n",
      "[40/100,   230/288] loss: 0.00256953, Est. epoch time left: 0:00:00.051344 s\n",
      "[40/100,   240/288] loss: 0.00184944, Est. epoch time left: 0:00:00.042091 s\n",
      "[40/100,   250/288] loss: 0.00145390, Est. epoch time left: 0:00:00.033630 s\n",
      "[40/100,   260/288] loss: 0.00358541, Est. epoch time left: 0:00:00.043686 s\n",
      "[40/100,   270/288] loss: 0.00566685, Est. epoch time left: 0:00:00.022453 s\n",
      "[40/100,   280/288] loss: 0.00183584, Est. epoch time left: 0:00:00.008577 s\n",
      "Validation...\n",
      "[40,    10] loss: 0.003\n",
      "[40,    20] loss: 0.002\n",
      "[40,    30] loss: 0.005\n",
      "[41/100,    10/288] loss: 0.00351495, Est. epoch time left: 0:00:00.238477 s\n",
      "[41/100,    20/288] loss: 0.00455684, Est. epoch time left: 0:00:00.237374 s\n",
      "[41/100,    30/288] loss: 0.00574364, Est. epoch time left: 0:00:00.226795 s\n",
      "[41/100,    40/288] loss: 0.00380941, Est. epoch time left: 0:00:00.222380 s\n",
      "[41/100,    50/288] loss: 0.00296399, Est. epoch time left: 0:00:00.194801 s\n",
      "[41/100,    60/288] loss: 0.00383275, Est. epoch time left: 0:00:00.170743 s\n",
      "[41/100,    70/288] loss: 0.00191819, Est. epoch time left: 0:00:00.182121 s\n",
      "[41/100,    80/288] loss: 0.00181164, Est. epoch time left: 0:00:00.174164 s\n",
      "[41/100,    90/288] loss: 0.00252652, Est. epoch time left: 0:00:00.176648 s\n",
      "[41/100,   100/288] loss: 0.00581468, Est. epoch time left: 0:00:00.165441 s\n",
      "[41/100,   110/288] loss: 0.00404053, Est. epoch time left: 0:00:00.151930 s\n",
      "[41/100,   120/288] loss: 0.00236328, Est. epoch time left: 0:00:00.146479 s\n",
      "[41/100,   130/288] loss: 0.00389368, Est. epoch time left: 0:00:00.137345 s\n",
      "[41/100,   140/288] loss: 0.00238845, Est. epoch time left: 0:00:00.127347 s\n",
      "[41/100,   150/288] loss: 0.00377241, Est. epoch time left: 0:00:00.117953 s\n",
      "[41/100,   160/288] loss: 0.00431692, Est. epoch time left: 0:00:00.111023 s\n",
      "[41/100,   170/288] loss: 0.00600421, Est. epoch time left: 0:00:00.103925 s\n",
      "[41/100,   180/288] loss: 0.00403278, Est. epoch time left: 0:00:00.094216 s\n",
      "[41/100,   190/288] loss: 0.00723624, Est. epoch time left: 0:00:00.086147 s\n",
      "[41/100,   200/288] loss: 0.00118331, Est. epoch time left: 0:00:00.076727 s\n",
      "[41/100,   210/288] loss: 0.00296840, Est. epoch time left: 0:00:00.067841 s\n",
      "[41/100,   220/288] loss: 0.00340173, Est. epoch time left: 0:00:00.059224 s\n",
      "[41/100,   230/288] loss: 0.00209455, Est. epoch time left: 0:00:00.050501 s\n",
      "[41/100,   240/288] loss: 0.00210415, Est. epoch time left: 0:00:00.042252 s\n",
      "[41/100,   250/288] loss: 0.00338597, Est. epoch time left: 0:00:00.032996 s\n",
      "[41/100,   260/288] loss: 0.00495763, Est. epoch time left: 0:00:00.024480 s\n",
      "[41/100,   270/288] loss: 0.00289781, Est. epoch time left: 0:00:00.016089 s\n",
      "[41/100,   280/288] loss: 0.00243019, Est. epoch time left: 0:00:00.007057 s\n",
      "Validation...\n",
      "[41,    10] loss: 0.003\n",
      "[41,    20] loss: 0.006\n",
      "[41,    30] loss: 0.001\n",
      "[42/100,    10/288] loss: 0.00269617, Est. epoch time left: 0:00:00.228932 s\n",
      "[42/100,    20/288] loss: 0.00144642, Est. epoch time left: 0:00:00.189836 s\n",
      "[42/100,    30/288] loss: 0.00240895, Est. epoch time left: 0:00:00.200960 s\n",
      "[42/100,    40/288] loss: 0.00288909, Est. epoch time left: 0:00:00.266312 s\n",
      "[42/100,    50/288] loss: 0.00271346, Est. epoch time left: 0:00:00.195652 s\n",
      "[42/100,    60/288] loss: 0.00135499, Est. epoch time left: 0:00:00.193411 s\n",
      "[42/100,    70/288] loss: 0.00287127, Est. epoch time left: 0:00:00.175105 s\n",
      "[42/100,    80/288] loss: 0.00332227, Est. epoch time left: 0:00:00.189835 s\n",
      "[42/100,    90/288] loss: 0.00534866, Est. epoch time left: 0:00:00.172447 s\n",
      "[42/100,   100/288] loss: 0.00192206, Est. epoch time left: 0:00:00.169788 s\n",
      "[42/100,   110/288] loss: 0.00238858, Est. epoch time left: 0:00:00.142084 s\n",
      "[42/100,   120/288] loss: 0.00359414, Est. epoch time left: 0:00:00.137386 s\n",
      "[42/100,   130/288] loss: 0.00117973, Est. epoch time left: 0:00:00.120055 s\n",
      "[42/100,   140/288] loss: 0.00551901, Est. epoch time left: 0:00:00.208963 s\n",
      "[42/100,   150/288] loss: 0.00573708, Est. epoch time left: 0:00:00.181618 s\n",
      "[42/100,   160/288] loss: 0.00264316, Est. epoch time left: 0:00:00.151764 s\n",
      "[42/100,   170/288] loss: 0.00303006, Est. epoch time left: 0:00:00.124800 s\n",
      "[42/100,   180/288] loss: 0.00586507, Est. epoch time left: 0:00:00.114326 s\n",
      "[42/100,   190/288] loss: 0.00808231, Est. epoch time left: 0:00:00.100096 s\n",
      "[42/100,   200/288] loss: 0.00365009, Est. epoch time left: 0:00:00.084637 s\n",
      "[42/100,   210/288] loss: 0.00479888, Est. epoch time left: 0:00:00.073029 s\n",
      "[42/100,   220/288] loss: 0.00213818, Est. epoch time left: 0:00:00.061559 s\n",
      "[42/100,   230/288] loss: 0.00236730, Est. epoch time left: 0:00:00.054801 s\n",
      "[42/100,   240/288] loss: 0.00241022, Est. epoch time left: 0:00:00.041656 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[42/100,   250/288] loss: 0.00581799, Est. epoch time left: 0:00:00.034364 s\n",
      "[42/100,   260/288] loss: 0.00406956, Est. epoch time left: 0:00:00.027651 s\n",
      "[42/100,   270/288] loss: 0.00470382, Est. epoch time left: 0:00:00.016879 s\n",
      "[42/100,   280/288] loss: 0.00242974, Est. epoch time left: 0:00:00.007545 s\n",
      "Validation...\n",
      "[42,    10] loss: 0.002\n",
      "[42,    20] loss: 0.003\n",
      "[42,    30] loss: 0.006\n",
      "[43/100,    10/288] loss: 0.00506619, Est. epoch time left: 0:00:00.249811 s\n",
      "[43/100,    20/288] loss: 0.00288419, Est. epoch time left: 0:00:00.414047 s\n",
      "[43/100,    30/288] loss: 0.00493274, Est. epoch time left: 0:00:00.283878 s\n",
      "[43/100,    40/288] loss: 0.00459020, Est. epoch time left: 0:00:00.264242 s\n",
      "[43/100,    50/288] loss: 0.00379852, Est. epoch time left: 0:00:00.244111 s\n",
      "[43/100,    60/288] loss: 0.00191037, Est. epoch time left: 0:00:00.215426 s\n",
      "[43/100,    70/288] loss: 0.00322188, Est. epoch time left: 0:00:00.188722 s\n",
      "[43/100,    80/288] loss: 0.00685215, Est. epoch time left: 0:00:00.182297 s\n",
      "[43/100,    90/288] loss: 0.00271937, Est. epoch time left: 0:00:00.172541 s\n",
      "[43/100,   100/288] loss: 0.00261021, Est. epoch time left: 0:00:00.163558 s\n",
      "[43/100,   110/288] loss: 0.00321244, Est. epoch time left: 0:00:00.155198 s\n",
      "[43/100,   120/288] loss: 0.00734522, Est. epoch time left: 0:00:00.154690 s\n",
      "[43/100,   130/288] loss: 0.00419054, Est. epoch time left: 0:00:00.146424 s\n",
      "[43/100,   140/288] loss: 0.00293762, Est. epoch time left: 0:00:00.146613 s\n",
      "[43/100,   150/288] loss: 0.00286362, Est. epoch time left: 0:00:00.129732 s\n",
      "[43/100,   160/288] loss: 0.00316360, Est. epoch time left: 0:00:00.119965 s\n",
      "[43/100,   170/288] loss: 0.00108544, Est. epoch time left: 0:00:00.111887 s\n",
      "[43/100,   180/288] loss: 0.00442011, Est. epoch time left: 0:00:00.156375 s\n",
      "[43/100,   190/288] loss: 0.00433711, Est. epoch time left: 0:00:00.121405 s\n",
      "[43/100,   200/288] loss: 0.00114481, Est. epoch time left: 0:00:00.098085 s\n",
      "[43/100,   210/288] loss: 0.00218176, Est. epoch time left: 0:00:00.089041 s\n",
      "[43/100,   220/288] loss: 0.00159445, Est. epoch time left: 0:00:00.069341 s\n",
      "[43/100,   230/288] loss: 0.00112307, Est. epoch time left: 0:00:00.059545 s\n",
      "[43/100,   240/288] loss: 0.00287769, Est. epoch time left: 0:00:00.059853 s\n",
      "[43/100,   250/288] loss: 0.00164995, Est. epoch time left: 0:00:00.044856 s\n",
      "[43/100,   260/288] loss: 0.00458559, Est. epoch time left: 0:00:00.032684 s\n",
      "[43/100,   270/288] loss: 0.00938424, Est. epoch time left: 0:00:00.019389 s\n",
      "[43/100,   280/288] loss: 0.00271338, Est. epoch time left: 0:00:00.008152 s\n",
      "Validation...\n",
      "[43,    10] loss: 0.002\n",
      "[43,    20] loss: 0.006\n",
      "[43,    30] loss: 0.003\n",
      "[44/100,    10/288] loss: 0.00634768, Est. epoch time left: 0:00:00.287325 s\n",
      "[44/100,    20/288] loss: 0.00278008, Est. epoch time left: 0:00:00.274434 s\n",
      "[44/100,    30/288] loss: 0.00447715, Est. epoch time left: 0:00:00.252814 s\n",
      "[44/100,    40/288] loss: 0.00659081, Est. epoch time left: 0:00:00.227583 s\n",
      "[44/100,    50/288] loss: 0.00302461, Est. epoch time left: 0:00:00.212448 s\n",
      "[44/100,    60/288] loss: 0.00227403, Est. epoch time left: 0:00:00.207762 s\n",
      "[44/100,    70/288] loss: 0.00730464, Est. epoch time left: 0:00:00.189086 s\n",
      "[44/100,    80/288] loss: 0.00155117, Est. epoch time left: 0:00:00.180412 s\n",
      "[44/100,    90/288] loss: 0.00735258, Est. epoch time left: 0:00:00.179433 s\n",
      "[44/100,   100/288] loss: 0.00264918, Est. epoch time left: 0:00:00.187359 s\n",
      "[44/100,   110/288] loss: 0.00229474, Est. epoch time left: 0:00:00.175611 s\n",
      "[44/100,   120/288] loss: 0.00298912, Est. epoch time left: 0:00:00.166746 s\n",
      "[44/100,   130/288] loss: 0.00426517, Est. epoch time left: 0:00:00.143222 s\n",
      "[44/100,   140/288] loss: 0.00353204, Est. epoch time left: 0:00:00.140226 s\n",
      "[44/100,   150/288] loss: 0.00273515, Est. epoch time left: 0:00:00.130028 s\n",
      "[44/100,   160/288] loss: 0.00329970, Est. epoch time left: 0:00:00.119293 s\n",
      "[44/100,   170/288] loss: 0.00241869, Est. epoch time left: 0:00:00.102462 s\n",
      "[44/100,   180/288] loss: 0.00144479, Est. epoch time left: 0:00:00.096148 s\n",
      "[44/100,   190/288] loss: 0.00195078, Est. epoch time left: 0:00:00.092432 s\n",
      "[44/100,   200/288] loss: 0.00573430, Est. epoch time left: 0:00:00.080042 s\n",
      "[44/100,   210/288] loss: 0.00173238, Est. epoch time left: 0:00:00.070202 s\n",
      "[44/100,   220/288] loss: 0.00547200, Est. epoch time left: 0:00:00.062369 s\n",
      "[44/100,   230/288] loss: 0.00561972, Est. epoch time left: 0:00:00.050390 s\n",
      "[44/100,   240/288] loss: 0.00517861, Est. epoch time left: 0:00:00.059258 s\n",
      "[44/100,   250/288] loss: 0.00197290, Est. epoch time left: 0:00:00.047112 s\n",
      "[44/100,   260/288] loss: 0.00186775, Est. epoch time left: 0:00:00.035014 s\n",
      "[44/100,   270/288] loss: 0.00248941, Est. epoch time left: 0:00:00.021149 s\n",
      "[44/100,   280/288] loss: 0.00064741, Est. epoch time left: 0:00:00.011477 s\n",
      "Validation...\n",
      "[44,    10] loss: 0.003\n",
      "[44,    20] loss: 0.003\n",
      "[44,    30] loss: 0.002\n",
      "[45/100,    10/288] loss: 0.00275370, Est. epoch time left: 0:00:00.308137 s\n",
      "[45/100,    20/288] loss: 0.00429662, Est. epoch time left: 0:00:00.264530 s\n",
      "[45/100,    30/288] loss: 0.00363461, Est. epoch time left: 0:00:00.242296 s\n",
      "[45/100,    40/288] loss: 0.00360916, Est. epoch time left: 0:00:00.219364 s\n",
      "[45/100,    50/288] loss: 0.00537435, Est. epoch time left: 0:00:00.208136 s\n",
      "[45/100,    60/288] loss: 0.00312507, Est. epoch time left: 0:00:00.197651 s\n",
      "[45/100,    70/288] loss: 0.00121746, Est. epoch time left: 0:00:00.188670 s\n",
      "[45/100,    80/288] loss: 0.00331682, Est. epoch time left: 0:00:00.180313 s\n",
      "[45/100,    90/288] loss: 0.00251081, Est. epoch time left: 0:00:00.171644 s\n",
      "[45/100,   100/288] loss: 0.00388315, Est. epoch time left: 0:00:00.162662 s\n",
      "[45/100,   110/288] loss: 0.00271160, Est. epoch time left: 0:00:00.156259 s\n",
      "[45/100,   120/288] loss: 0.00214869, Est. epoch time left: 0:00:00.147360 s\n",
      "[45/100,   130/288] loss: 0.00383824, Est. epoch time left: 0:00:00.138965 s\n",
      "[45/100,   140/288] loss: 0.00426639, Est. epoch time left: 0:00:00.128159 s\n",
      "[45/100,   150/288] loss: 0.00494993, Est. epoch time left: 0:00:00.294109 s\n",
      "[45/100,   160/288] loss: 0.00341421, Est. epoch time left: 0:00:00.110626 s\n",
      "[45/100,   170/288] loss: 0.00229397, Est. epoch time left: 0:00:00.102940 s\n",
      "[45/100,   180/288] loss: 0.00417872, Est. epoch time left: 0:00:00.101066 s\n",
      "[45/100,   190/288] loss: 0.00273236, Est. epoch time left: 0:00:00.122433 s\n",
      "[45/100,   200/288] loss: 0.00495166, Est. epoch time left: 0:00:00.098022 s\n",
      "[45/100,   210/288] loss: 0.00099555, Est. epoch time left: 0:00:00.079445 s\n",
      "[45/100,   220/288] loss: 0.00652145, Est. epoch time left: 0:00:00.062337 s\n",
      "[45/100,   230/288] loss: 0.00391540, Est. epoch time left: 0:00:00.050916 s\n",
      "[45/100,   240/288] loss: 0.00423137, Est. epoch time left: 0:00:00.041519 s\n",
      "[45/100,   250/288] loss: 0.00432728, Est. epoch time left: 0:00:00.034500 s\n",
      "[45/100,   260/288] loss: 0.00217030, Est. epoch time left: 0:00:00.024567 s\n",
      "[45/100,   270/288] loss: 0.00588399, Est. epoch time left: 0:00:00.016334 s\n",
      "[45/100,   280/288] loss: 0.00128684, Est. epoch time left: 0:00:00.007000 s\n",
      "Validation...\n",
      "[45,    10] loss: 0.004\n",
      "[45,    20] loss: 0.004\n",
      "[45,    30] loss: 0.001\n",
      "[46/100,    10/288] loss: 0.00408754, Est. epoch time left: 0:00:00.250540 s\n",
      "[46/100,    20/288] loss: 0.00641581, Est. epoch time left: 0:00:00.238013 s\n",
      "[46/100,    30/288] loss: 0.00165693, Est. epoch time left: 0:00:00.226795 s\n",
      "[46/100,    40/288] loss: 0.00122587, Est. epoch time left: 0:00:00.272579 s\n",
      "[46/100,    50/288] loss: 0.00622668, Est. epoch time left: 0:00:00.257105 s\n",
      "[46/100,    60/288] loss: 0.00205786, Est. epoch time left: 0:00:00.250216 s\n",
      "[46/100,    70/288] loss: 0.00132781, Est. epoch time left: 0:00:00.234720 s\n",
      "[46/100,    80/288] loss: 0.00353821, Est. epoch time left: 0:00:00.226532 s\n",
      "[46/100,    90/288] loss: 0.00098834, Est. epoch time left: 0:00:00.215216 s\n",
      "[46/100,   100/288] loss: 0.00559066, Est. epoch time left: 0:00:00.202285 s\n",
      "[46/100,   110/288] loss: 0.00409993, Est. epoch time left: 0:00:00.191016 s\n",
      "[46/100,   120/288] loss: 0.00221150, Est. epoch time left: 0:00:00.183369 s\n",
      "[46/100,   130/288] loss: 0.00147112, Est. epoch time left: 0:00:00.176259 s\n",
      "[46/100,   140/288] loss: 0.00427277, Est. epoch time left: 0:00:00.160092 s\n",
      "[46/100,   150/288] loss: 0.00566377, Est. epoch time left: 0:00:00.140425 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[46/100,   160/288] loss: 0.00389440, Est. epoch time left: 0:00:00.130646 s\n",
      "[46/100,   170/288] loss: 0.00198255, Est. epoch time left: 0:00:00.115713 s\n",
      "[46/100,   180/288] loss: 0.00561148, Est. epoch time left: 0:00:00.107194 s\n",
      "[46/100,   190/288] loss: 0.00643307, Est. epoch time left: 0:00:00.096498 s\n",
      "[46/100,   200/288] loss: 0.00329125, Est. epoch time left: 0:00:00.083714 s\n",
      "[46/100,   210/288] loss: 0.00216478, Est. epoch time left: 0:00:00.069496 s\n",
      "[46/100,   220/288] loss: 0.00324323, Est. epoch time left: 0:00:00.059435 s\n",
      "[46/100,   230/288] loss: 0.00367904, Est. epoch time left: 0:00:00.050750 s\n",
      "[46/100,   240/288] loss: 0.00287667, Est. epoch time left: 0:00:00.042103 s\n",
      "[46/100,   250/288] loss: 0.00136788, Est. epoch time left: 0:00:00.033350 s\n",
      "[46/100,   260/288] loss: 0.00077745, Est. epoch time left: 0:00:00.024366 s\n",
      "[46/100,   270/288] loss: 0.00405692, Est. epoch time left: 0:00:00.015793 s\n",
      "[46/100,   280/288] loss: 0.00448406, Est. epoch time left: 0:00:00.006985 s\n",
      "Validation...\n",
      "[46,    10] loss: 0.001\n",
      "[46,    20] loss: 0.005\n",
      "[46,    30] loss: 0.003\n",
      "[47/100,    10/288] loss: 0.00167103, Est. epoch time left: 0:00:00.246099 s\n",
      "[47/100,    20/288] loss: 0.00343697, Est. epoch time left: 0:00:00.243381 s\n",
      "[47/100,    30/288] loss: 0.00354969, Est. epoch time left: 0:00:00.380083 s\n",
      "[47/100,    40/288] loss: 0.00151611, Est. epoch time left: 0:00:00.315861 s\n",
      "[47/100,    50/288] loss: 0.00433457, Est. epoch time left: 0:00:00.268795 s\n",
      "[47/100,    60/288] loss: 0.00052845, Est. epoch time left: 0:00:00.244454 s\n",
      "[47/100,    70/288] loss: 0.00422743, Est. epoch time left: 0:00:00.233889 s\n",
      "[47/100,    80/288] loss: 0.00254526, Est. epoch time left: 0:00:00.181950 s\n",
      "[47/100,    90/288] loss: 0.00414858, Est. epoch time left: 0:00:00.175421 s\n",
      "[47/100,   100/288] loss: 0.00289110, Est. epoch time left: 0:00:00.164141 s\n",
      "[47/100,   110/288] loss: 0.00160160, Est. epoch time left: 0:00:00.186984 s\n",
      "[47/100,   120/288] loss: 0.00353759, Est. epoch time left: 0:00:00.171673 s\n",
      "[47/100,   130/288] loss: 0.00293589, Est. epoch time left: 0:00:00.156067 s\n",
      "[47/100,   140/288] loss: 0.00340840, Est. epoch time left: 0:00:00.127206 s\n",
      "[47/100,   150/288] loss: 0.00583051, Est. epoch time left: 0:00:00.120256 s\n",
      "[47/100,   160/288] loss: 0.00450246, Est. epoch time left: 0:00:00.112457 s\n",
      "[47/100,   170/288] loss: 0.00688238, Est. epoch time left: 0:00:00.103446 s\n",
      "[47/100,   180/288] loss: 0.00367677, Est. epoch time left: 0:00:00.115176 s\n",
      "[47/100,   190/288] loss: 0.00368447, Est. epoch time left: 0:00:00.094628 s\n",
      "[47/100,   200/288] loss: 0.00420111, Est. epoch time left: 0:00:00.080168 s\n",
      "[47/100,   210/288] loss: 0.00384963, Est. epoch time left: 0:00:00.069347 s\n",
      "[47/100,   220/288] loss: 0.00316016, Est. epoch time left: 0:00:00.090855 s\n",
      "[47/100,   230/288] loss: 0.00278544, Est. epoch time left: 0:00:00.072280 s\n",
      "[47/100,   240/288] loss: 0.00140578, Est. epoch time left: 0:00:00.053375 s\n",
      "[47/100,   250/288] loss: 0.00596398, Est. epoch time left: 0:00:00.037100 s\n",
      "[47/100,   260/288] loss: 0.00215029, Est. epoch time left: 0:00:00.025334 s\n",
      "[47/100,   270/288] loss: 0.00219284, Est. epoch time left: 0:00:00.015411 s\n",
      "[47/100,   280/288] loss: 0.00448806, Est. epoch time left: 0:00:00.007095 s\n",
      "Validation...\n",
      "[47,    10] loss: 0.003\n",
      "[47,    20] loss: 0.005\n",
      "[47,    30] loss: 0.001\n",
      "[48/100,    10/288] loss: 0.00409131, Est. epoch time left: 0:00:00.244442 s\n",
      "[48/100,    20/288] loss: 0.00555094, Est. epoch time left: 0:00:00.240058 s\n",
      "[48/100,    30/288] loss: 0.00350275, Est. epoch time left: 0:00:00.232884 s\n",
      "[48/100,    40/288] loss: 0.00122155, Est. epoch time left: 0:00:00.222202 s\n",
      "[48/100,    50/288] loss: 0.00156768, Est. epoch time left: 0:00:00.225953 s\n",
      "[48/100,    60/288] loss: 0.00265375, Est. epoch time left: 0:00:00.194389 s\n",
      "[48/100,    70/288] loss: 0.00233198, Est. epoch time left: 0:00:00.191737 s\n",
      "[48/100,    80/288] loss: 0.00509655, Est. epoch time left: 0:00:00.181503 s\n",
      "[48/100,    90/288] loss: 0.00198939, Est. epoch time left: 0:00:00.265255 s\n",
      "[48/100,   100/288] loss: 0.00160823, Est. epoch time left: 0:00:00.214970 s\n",
      "[48/100,   110/288] loss: 0.00430095, Est. epoch time left: 0:00:00.183249 s\n",
      "[48/100,   120/288] loss: 0.00202928, Est. epoch time left: 0:00:00.153528 s\n",
      "[48/100,   130/288] loss: 0.00303601, Est. epoch time left: 0:00:00.162848 s\n",
      "[48/100,   140/288] loss: 0.00495871, Est. epoch time left: 0:00:00.142626 s\n",
      "[48/100,   150/288] loss: 0.00398091, Est. epoch time left: 0:00:00.173392 s\n",
      "[48/100,   160/288] loss: 0.00409067, Est. epoch time left: 0:00:00.143738 s\n",
      "[48/100,   170/288] loss: 0.00123921, Est. epoch time left: 0:00:00.119032 s\n",
      "[48/100,   180/288] loss: 0.00139663, Est. epoch time left: 0:00:00.092723 s\n",
      "[48/100,   190/288] loss: 0.00547941, Est. epoch time left: 0:00:00.097456 s\n",
      "[48/100,   200/288] loss: 0.00301406, Est. epoch time left: 0:00:00.083462 s\n",
      "[48/100,   210/288] loss: 0.00515756, Est. epoch time left: 0:00:00.127499 s\n",
      "[48/100,   220/288] loss: 0.00504027, Est. epoch time left: 0:00:00.076539 s\n",
      "[48/100,   230/288] loss: 0.00223744, Est. epoch time left: 0:00:00.062006 s\n",
      "[48/100,   240/288] loss: 0.00123594, Est. epoch time left: 0:00:00.049198 s\n",
      "[48/100,   250/288] loss: 0.00114225, Est. epoch time left: 0:00:00.034002 s\n",
      "[48/100,   260/288] loss: 0.00628513, Est. epoch time left: 0:00:00.024426 s\n",
      "[48/100,   270/288] loss: 0.00665968, Est. epoch time left: 0:00:00.026796 s\n",
      "[48/100,   280/288] loss: 0.00562496, Est. epoch time left: 0:00:00.009785 s\n",
      "Validation...\n",
      "[48,    10] loss: 0.003\n",
      "[48,    20] loss: 0.003\n",
      "[48,    30] loss: 0.005\n",
      "[49/100,    10/288] loss: 0.00387316, Est. epoch time left: 0:00:00.467277 s\n",
      "[49/100,    20/288] loss: 0.00191598, Est. epoch time left: 0:00:00.317756 s\n",
      "[49/100,    30/288] loss: 0.00466963, Est. epoch time left: 0:00:00.273113 s\n",
      "[49/100,    40/288] loss: 0.00275012, Est. epoch time left: 0:00:00.231840 s\n",
      "[49/100,    50/288] loss: 0.00313073, Est. epoch time left: 0:00:00.204618 s\n",
      "[49/100,    60/288] loss: 0.00347056, Est. epoch time left: 0:00:00.207762 s\n",
      "[49/100,    70/288] loss: 0.00062191, Est. epoch time left: 0:00:00.205614 s\n",
      "[49/100,    80/288] loss: 0.00684212, Est. epoch time left: 0:00:00.198959 s\n",
      "[49/100,    90/288] loss: 0.00176586, Est. epoch time left: 0:00:00.176082 s\n",
      "[49/100,   100/288] loss: 0.00376835, Est. epoch time left: 0:00:00.169609 s\n",
      "[49/100,   110/288] loss: 0.00120305, Est. epoch time left: 0:00:00.175950 s\n",
      "[49/100,   120/288] loss: 0.00252814, Est. epoch time left: 0:00:00.164824 s\n",
      "[49/100,   130/288] loss: 0.00588477, Est. epoch time left: 0:00:00.245157 s\n",
      "[49/100,   140/288] loss: 0.00504303, Est. epoch time left: 0:00:00.206176 s\n",
      "[49/100,   150/288] loss: 0.00253725, Est. epoch time left: 0:00:00.186619 s\n",
      "[49/100,   160/288] loss: 0.00599763, Est. epoch time left: 0:00:00.160004 s\n",
      "[49/100,   170/288] loss: 0.00176090, Est. epoch time left: 0:00:00.148066 s\n",
      "[49/100,   180/288] loss: 0.00261815, Est. epoch time left: 0:00:00.120867 s\n",
      "[49/100,   190/288] loss: 0.00336526, Est. epoch time left: 0:00:00.096965 s\n",
      "[49/100,   200/288] loss: 0.00592083, Est. epoch time left: 0:00:00.079308 s\n",
      "[49/100,   210/288] loss: 0.00517360, Est. epoch time left: 0:00:00.067859 s\n",
      "[49/100,   220/288] loss: 0.00341264, Est. epoch time left: 0:00:00.058770 s\n",
      "[49/100,   230/288] loss: 0.00091872, Est. epoch time left: 0:00:00.050363 s\n",
      "[49/100,   240/288] loss: 0.00350310, Est. epoch time left: 0:00:00.041245 s\n",
      "[49/100,   250/288] loss: 0.00622394, Est. epoch time left: 0:00:00.032951 s\n",
      "[49/100,   260/288] loss: 0.00195825, Est. epoch time left: 0:00:00.024400 s\n",
      "[49/100,   270/288] loss: 0.00389935, Est. epoch time left: 0:00:00.015600 s\n",
      "[49/100,   280/288] loss: 0.00407991, Est. epoch time left: 0:00:00.006901 s\n",
      "Validation...\n",
      "[49,    10] loss: 0.006\n",
      "[49,    20] loss: 0.002\n",
      "[49,    30] loss: 0.001\n",
      "[50/100,    10/288] loss: 0.00163898, Est. epoch time left: 0:00:00.263332 s\n",
      "[50/100,    20/288] loss: 0.00445506, Est. epoch time left: 0:00:00.233604 s\n",
      "[50/100,    30/288] loss: 0.00160425, Est. epoch time left: 0:00:00.223965 s\n",
      "[50/100,    40/288] loss: 0.00597280, Est. epoch time left: 0:00:00.215403 s\n",
      "[50/100,    50/288] loss: 0.00163817, Est. epoch time left: 0:00:00.211994 s\n",
      "[50/100,    60/288] loss: 0.00271094, Est. epoch time left: 0:00:00.200369 s\n",
      "[50/100,    70/288] loss: 0.00521673, Est. epoch time left: 0:00:00.189554 s\n",
      "[50/100,    80/288] loss: 0.00185731, Est. epoch time left: 0:00:00.182049 s\n",
      "[50/100,    90/288] loss: 0.00254320, Est. epoch time left: 0:00:00.170794 s\n",
      "[50/100,   100/288] loss: 0.00322172, Est. epoch time left: 0:00:00.165934 s\n",
      "[50/100,   110/288] loss: 0.00254008, Est. epoch time left: 0:00:00.152906 s\n",
      "[50/100,   120/288] loss: 0.00131796, Est. epoch time left: 0:00:00.144396 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[50/100,   130/288] loss: 0.00435073, Est. epoch time left: 0:00:00.155954 s\n",
      "[50/100,   140/288] loss: 0.00452236, Est. epoch time left: 0:00:00.134475 s\n",
      "[50/100,   150/288] loss: 0.00312066, Est. epoch time left: 0:00:00.130159 s\n",
      "[50/100,   160/288] loss: 0.00818587, Est. epoch time left: 0:00:00.117218 s\n",
      "[50/100,   170/288] loss: 0.00376243, Est. epoch time left: 0:00:00.104544 s\n",
      "[50/100,   180/288] loss: 0.00147268, Est. epoch time left: 0:00:00.177721 s\n",
      "[50/100,   190/288] loss: 0.00603868, Est. epoch time left: 0:00:00.138508 s\n",
      "[50/100,   200/288] loss: 0.00300471, Est. epoch time left: 0:00:00.118814 s\n",
      "[50/100,   210/288] loss: 0.00206927, Est. epoch time left: 0:00:00.096126 s\n",
      "[50/100,   220/288] loss: 0.00375727, Est. epoch time left: 0:00:00.079555 s\n",
      "[50/100,   230/288] loss: 0.00458194, Est. epoch time left: 0:00:00.064882 s\n",
      "[50/100,   240/288] loss: 0.00199918, Est. epoch time left: 0:00:00.050823 s\n",
      "[50/100,   250/288] loss: 0.00133980, Est. epoch time left: 0:00:00.038849 s\n",
      "[50/100,   260/288] loss: 0.00431944, Est. epoch time left: 0:00:00.028545 s\n",
      "[50/100,   270/288] loss: 0.00367505, Est. epoch time left: 0:00:00.019067 s\n",
      "[50/100,   280/288] loss: 0.00586425, Est. epoch time left: 0:00:00.008518 s\n",
      "Validation...\n",
      "[50,    10] loss: 0.003\n",
      "[50,    20] loss: 0.004\n",
      "[50,    30] loss: 0.003\n",
      "[51/100,    10/288] loss: 0.00267806, Est. epoch time left: 0:00:00.246563 s\n",
      "[51/100,    20/288] loss: 0.00192415, Est. epoch time left: 0:00:00.239036 s\n",
      "[51/100,    30/288] loss: 0.00208855, Est. epoch time left: 0:00:00.227225 s\n",
      "[51/100,    40/288] loss: 0.00230021, Est. epoch time left: 0:00:00.217531 s\n",
      "[51/100,    50/288] loss: 0.00460072, Est. epoch time left: 0:00:00.204447 s\n",
      "[51/100,    60/288] loss: 0.00322340, Est. epoch time left: 0:00:00.200369 s\n",
      "[51/100,    70/288] loss: 0.00258998, Est. epoch time left: 0:00:00.189190 s\n",
      "[51/100,    80/288] loss: 0.00496227, Est. epoch time left: 0:00:00.180611 s\n",
      "[51/100,    90/288] loss: 0.00132581, Est. epoch time left: 0:00:00.192793 s\n",
      "[51/100,   100/288] loss: 0.00407260, Est. epoch time left: 0:00:00.198206 s\n",
      "[51/100,   110/288] loss: 0.00563545, Est. epoch time left: 0:00:00.173871 s\n",
      "[51/100,   120/288] loss: 0.00431122, Est. epoch time left: 0:00:00.171673 s\n",
      "[51/100,   130/288] loss: 0.00289905, Est. epoch time left: 0:00:00.162396 s\n",
      "[51/100,   140/288] loss: 0.00490374, Est. epoch time left: 0:00:00.150742 s\n",
      "[51/100,   150/288] loss: 0.00438973, Est. epoch time left: 0:00:00.215539 s\n",
      "[51/100,   160/288] loss: 0.00374183, Est. epoch time left: 0:00:00.171356 s\n",
      "[51/100,   170/288] loss: 0.00238991, Est. epoch time left: 0:00:00.147278 s\n",
      "[51/100,   180/288] loss: 0.00112382, Est. epoch time left: 0:00:00.134746 s\n",
      "[51/100,   190/288] loss: 0.00565075, Est. epoch time left: 0:00:00.118834 s\n",
      "[51/100,   200/288] loss: 0.00877785, Est. epoch time left: 0:00:00.098001 s\n",
      "[51/100,   210/288] loss: 0.00137916, Est. epoch time left: 0:00:00.079054 s\n",
      "[51/100,   220/288] loss: 0.00475245, Est. epoch time left: 0:00:00.066893 s\n",
      "[51/100,   230/288] loss: 0.00294732, Est. epoch time left: 0:00:00.056779 s\n",
      "[51/100,   240/288] loss: 0.00101402, Est. epoch time left: 0:00:00.064533 s\n",
      "[51/100,   250/288] loss: 0.00254356, Est. epoch time left: 0:00:00.043497 s\n",
      "[51/100,   260/288] loss: 0.00151446, Est. epoch time left: 0:00:00.029660 s\n",
      "[51/100,   270/288] loss: 0.00597320, Est. epoch time left: 0:00:00.018428 s\n",
      "[51/100,   280/288] loss: 0.00288977, Est. epoch time left: 0:00:00.008236 s\n",
      "Validation...\n",
      "[51,    10] loss: 0.002\n",
      "[51,    20] loss: 0.002\n",
      "[51,    30] loss: 0.003\n",
      "[52/100,    10/288] loss: 0.00418166, Est. epoch time left: 0:00:00.273937 s\n",
      "[52/100,    20/288] loss: 0.00381577, Est. epoch time left: 0:00:00.258141 s\n",
      "[52/100,    30/288] loss: 0.00409338, Est. epoch time left: 0:00:00.239097 s\n",
      "[52/100,    40/288] loss: 0.00500391, Est. epoch time left: 0:00:00.216703 s\n",
      "[52/100,    50/288] loss: 0.00230062, Est. epoch time left: 0:00:00.209838 s\n",
      "[52/100,    60/288] loss: 0.00162234, Est. epoch time left: 0:00:00.200532 s\n",
      "[52/100,    70/288] loss: 0.00326762, Est. epoch time left: 0:00:00.381135 s\n",
      "[52/100,    80/288] loss: 0.00585528, Est. epoch time left: 0:00:00.231640 s\n",
      "[52/100,    90/288] loss: 0.00441329, Est. epoch time left: 0:00:00.224563 s\n",
      "[52/100,   100/288] loss: 0.00273017, Est. epoch time left: 0:00:00.191034 s\n",
      "[52/100,   110/288] loss: 0.00663695, Est. epoch time left: 0:00:00.168990 s\n",
      "[52/100,   120/288] loss: 0.00188315, Est. epoch time left: 0:00:00.152327 s\n",
      "[52/100,   130/288] loss: 0.00288732, Est. epoch time left: 0:00:00.137270 s\n",
      "[52/100,   140/288] loss: 0.00237967, Est. epoch time left: 0:00:00.129993 s\n",
      "[52/100,   150/288] loss: 0.00414128, Est. epoch time left: 0:00:00.118545 s\n",
      "[52/100,   160/288] loss: 0.00463368, Est. epoch time left: 0:00:00.109528 s\n",
      "[52/100,   170/288] loss: 0.00418376, Est. epoch time left: 0:00:00.103784 s\n",
      "[52/100,   180/288] loss: 0.00347769, Est. epoch time left: 0:00:00.093985 s\n",
      "[52/100,   190/288] loss: 0.00376482, Est. epoch time left: 0:00:00.085937 s\n",
      "[52/100,   200/288] loss: 0.00274957, Est. epoch time left: 0:00:00.075258 s\n",
      "[52/100,   210/288] loss: 0.00353766, Est. epoch time left: 0:00:00.066855 s\n",
      "[52/100,   220/288] loss: 0.00418721, Est. epoch time left: 0:00:00.061024 s\n",
      "[52/100,   230/288] loss: 0.00332929, Est. epoch time left: 0:00:00.052354 s\n",
      "[52/100,   240/288] loss: 0.00139461, Est. epoch time left: 0:00:00.045399 s\n",
      "[52/100,   250/288] loss: 0.00177777, Est. epoch time left: 0:00:00.034410 s\n",
      "[52/100,   260/288] loss: 0.00463394, Est. epoch time left: 0:00:00.025488 s\n",
      "[52/100,   270/288] loss: 0.00325792, Est. epoch time left: 0:00:00.015797 s\n",
      "[52/100,   280/288] loss: 0.00283435, Est. epoch time left: 0:00:00.006945 s\n",
      "Validation...\n",
      "[52,    10] loss: 0.004\n",
      "[52,    20] loss: 0.001\n",
      "[52,    30] loss: 0.001\n",
      "[53/100,    10/288] loss: 0.00324720, Est. epoch time left: 0:00:00.244111 s\n",
      "[53/100,    20/288] loss: 0.00409777, Est. epoch time left: 0:00:00.233349 s\n",
      "[53/100,    30/288] loss: 0.00709109, Est. epoch time left: 0:00:00.224519 s\n",
      "[53/100,    40/288] loss: 0.00245422, Est. epoch time left: 0:00:00.215994 s\n",
      "[53/100,    50/288] loss: 0.00425985, Est. epoch time left: 0:00:00.264312 s\n",
      "[53/100,    60/288] loss: 0.00361484, Est. epoch time left: 0:00:00.306044 s\n",
      "[53/100,    70/288] loss: 0.00471678, Est. epoch time left: 0:00:00.242828 s\n",
      "[53/100,    80/288] loss: 0.00173690, Est. epoch time left: 0:00:00.222366 s\n",
      "[53/100,    90/288] loss: 0.00135395, Est. epoch time left: 0:00:00.317655 s\n",
      "[53/100,   100/288] loss: 0.00517881, Est. epoch time left: 0:00:00.264812 s\n",
      "[53/100,   110/288] loss: 0.00435341, Est. epoch time left: 0:00:00.210410 s\n",
      "[53/100,   120/288] loss: 0.00126626, Est. epoch time left: 0:00:00.198669 s\n",
      "[53/100,   130/288] loss: 0.00229424, Est. epoch time left: 0:00:00.176447 s\n",
      "[53/100,   140/288] loss: 0.00423280, Est. epoch time left: 0:00:00.150248 s\n",
      "[53/100,   150/288] loss: 0.00286913, Est. epoch time left: 0:00:00.143682 s\n",
      "[53/100,   160/288] loss: 0.00425399, Est. epoch time left: 0:00:00.125641 s\n",
      "[53/100,   170/288] loss: 0.00141903, Est. epoch time left: 0:00:00.114756 s\n",
      "[53/100,   180/288] loss: 0.00403036, Est. epoch time left: 0:00:00.101400 s\n",
      "[53/100,   190/288] loss: 0.00512036, Est. epoch time left: 0:00:00.088226 s\n",
      "[53/100,   200/288] loss: 0.00123640, Est. epoch time left: 0:00:00.076937 s\n",
      "[53/100,   210/288] loss: 0.00372912, Est. epoch time left: 0:00:00.068343 s\n",
      "[53/100,   220/288] loss: 0.00082714, Est. epoch time left: 0:00:00.059824 s\n",
      "[53/100,   230/288] loss: 0.00316553, Est. epoch time left: 0:00:00.050584 s\n",
      "[53/100,   240/288] loss: 0.00122422, Est. epoch time left: 0:00:00.041965 s\n",
      "[53/100,   250/288] loss: 0.00664959, Est. epoch time left: 0:00:00.032842 s\n",
      "[53/100,   260/288] loss: 0.00525840, Est. epoch time left: 0:00:00.025455 s\n",
      "[53/100,   270/288] loss: 0.00423344, Est. epoch time left: 0:00:00.016201 s\n",
      "[53/100,   280/288] loss: 0.00242222, Est. epoch time left: 0:00:00.007280 s\n",
      "Validation...\n",
      "[53,    10] loss: 0.005\n",
      "[53,    20] loss: 0.001\n",
      "[53,    30] loss: 0.002\n",
      "[54/100,    10/288] loss: 0.00158544, Est. epoch time left: 0:00:00.308800 s\n",
      "[54/100,    20/288] loss: 0.00578168, Est. epoch time left: 0:00:00.273603 s\n",
      "[54/100,    30/288] loss: 0.00208821, Est. epoch time left: 0:00:00.242603 s\n",
      "[54/100,    40/288] loss: 0.00276282, Est. epoch time left: 0:00:00.224922 s\n",
      "[54/100,    50/288] loss: 0.00504360, Est. epoch time left: 0:00:00.223116 s\n",
      "[54/100,    60/288] loss: 0.00382492, Est. epoch time left: 0:00:00.206131 s\n",
      "[54/100,    70/288] loss: 0.00506549, Est. epoch time left: 0:00:00.197558 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[54/100,    80/288] loss: 0.00844805, Est. epoch time left: 0:00:00.184280 s\n",
      "[54/100,    90/288] loss: 0.00113876, Est. epoch time left: 0:00:00.170606 s\n",
      "[54/100,   100/288] loss: 0.00129558, Est. epoch time left: 0:00:00.165799 s\n",
      "[54/100,   110/288] loss: 0.00230428, Est. epoch time left: 0:00:00.161648 s\n",
      "[54/100,   120/288] loss: 0.00196351, Est. epoch time left: 0:00:00.144516 s\n",
      "[54/100,   130/288] loss: 0.00195367, Est. epoch time left: 0:00:00.143599 s\n",
      "[54/100,   140/288] loss: 0.00441669, Est. epoch time left: 0:00:00.133275 s\n",
      "[54/100,   150/288] loss: 0.00724172, Est. epoch time left: 0:00:00.120453 s\n",
      "[54/100,   160/288] loss: 0.00495696, Est. epoch time left: 0:00:00.111542 s\n",
      "[54/100,   170/288] loss: 0.00439856, Est. epoch time left: 0:00:00.103306 s\n",
      "[54/100,   180/288] loss: 0.00426428, Est. epoch time left: 0:00:00.097589 s\n",
      "[54/100,   190/288] loss: 0.00392385, Est. epoch time left: 0:00:00.085399 s\n",
      "[54/100,   200/288] loss: 0.00393524, Est. epoch time left: 0:00:00.077293 s\n",
      "[54/100,   210/288] loss: 0.00265908, Est. epoch time left: 0:00:00.068157 s\n",
      "[54/100,   220/288] loss: 0.00278544, Est. epoch time left: 0:00:00.059970 s\n",
      "[54/100,   230/288] loss: 0.00384121, Est. epoch time left: 0:00:00.050736 s\n",
      "[54/100,   240/288] loss: 0.00272905, Est. epoch time left: 0:00:00.043762 s\n",
      "[54/100,   250/288] loss: 0.00257897, Est. epoch time left: 0:00:00.033630 s\n",
      "[54/100,   260/288] loss: 0.00227911, Est. epoch time left: 0:00:00.024607 s\n",
      "[54/100,   270/288] loss: 0.00315861, Est. epoch time left: 0:00:00.018436 s\n",
      "[54/100,   280/288] loss: 0.00629428, Est. epoch time left: 0:00:00.008539 s\n",
      "Validation...\n",
      "[54,    10] loss: 0.001\n",
      "[54,    20] loss: 0.005\n",
      "[54,    30] loss: 0.004\n",
      "[55/100,    10/288] loss: 0.00201948, Est. epoch time left: 0:00:00.337102 s\n",
      "[55/100,    20/288] loss: 0.00393241, Est. epoch time left: 0:00:00.314497 s\n",
      "[55/100,    30/288] loss: 0.00246751, Est. epoch time left: 0:00:00.276496 s\n",
      "[55/100,    40/288] loss: 0.00438292, Est. epoch time left: 0:00:00.237989 s\n",
      "[55/100,    50/288] loss: 0.00360561, Est. epoch time left: 0:00:00.208703 s\n",
      "[55/100,    60/288] loss: 0.00395644, Est. epoch time left: 0:00:00.205750 s\n",
      "[55/100,    70/288] loss: 0.00597979, Est. epoch time left: 0:00:00.307693 s\n",
      "[55/100,    80/288] loss: 0.00247460, Est. epoch time left: 0:00:00.229309 s\n",
      "[55/100,    90/288] loss: 0.00413452, Est. epoch time left: 0:00:00.200110 s\n",
      "[55/100,   100/288] loss: 0.00673676, Est. epoch time left: 0:00:00.167547 s\n",
      "[55/100,   110/288] loss: 0.00270556, Est. epoch time left: 0:00:00.187154 s\n",
      "[55/100,   120/288] loss: 0.00388779, Est. epoch time left: 0:00:00.159376 s\n",
      "[55/100,   130/288] loss: 0.00310379, Est. epoch time left: 0:00:00.136780 s\n",
      "[55/100,   140/288] loss: 0.00224160, Est. epoch time left: 0:00:00.173607 s\n",
      "[55/100,   150/288] loss: 0.00141543, Est. epoch time left: 0:00:00.138385 s\n",
      "[55/100,   160/288] loss: 0.00314971, Est. epoch time left: 0:00:00.118927 s\n",
      "[55/100,   170/288] loss: 0.00221038, Est. epoch time left: 0:00:00.247067 s\n",
      "[55/100,   180/288] loss: 0.00603188, Est. epoch time left: 0:00:00.097229 s\n",
      "[55/100,   190/288] loss: 0.00317074, Est. epoch time left: 0:00:00.097526 s\n",
      "[55/100,   200/288] loss: 0.00401977, Est. epoch time left: 0:00:00.095840 s\n",
      "[55/100,   210/288] loss: 0.00806122, Est. epoch time left: 0:00:00.076023 s\n",
      "[55/100,   220/288] loss: 0.00263833, Est. epoch time left: 0:00:00.065093 s\n",
      "[55/100,   230/288] loss: 0.00187526, Est. epoch time left: 0:00:00.052464 s\n",
      "[55/100,   240/288] loss: 0.00077401, Est. epoch time left: 0:00:00.042046 s\n",
      "[55/100,   250/288] loss: 0.00219226, Est. epoch time left: 0:00:00.033250 s\n",
      "[55/100,   260/288] loss: 0.00315829, Est. epoch time left: 0:00:00.024373 s\n",
      "[55/100,   270/288] loss: 0.00669460, Est. epoch time left: 0:00:00.015767 s\n",
      "[55/100,   280/288] loss: 0.00438920, Est. epoch time left: 0:00:00.007210 s\n",
      "Validation...\n",
      "[55,    10] loss: 0.003\n",
      "[55,    20] loss: 0.006\n",
      "[55,    30] loss: 0.003\n",
      "[56/100,    10/288] loss: 0.00299470, Est. epoch time left: 0:00:00.222304 s\n",
      "[56/100,    20/288] loss: 0.00631059, Est. epoch time left: 0:00:00.212774 s\n",
      "[56/100,    30/288] loss: 0.00289106, Est. epoch time left: 0:00:00.346251 s\n",
      "[56/100,    40/288] loss: 0.00372863, Est. epoch time left: 0:00:00.218359 s\n",
      "[56/100,    50/288] loss: 0.00185793, Est. epoch time left: 0:00:00.243373 s\n",
      "[56/100,    60/288] loss: 0.00905604, Est. epoch time left: 0:00:00.225918 s\n",
      "[56/100,    70/288] loss: 0.00534354, Est. epoch time left: 0:00:00.205770 s\n",
      "[56/100,    80/288] loss: 0.00335819, Est. epoch time left: 0:00:00.261841 s\n",
      "[56/100,    90/288] loss: 0.00447944, Est. epoch time left: 0:00:00.223619 s\n",
      "[56/100,   100/288] loss: 0.00546524, Est. epoch time left: 0:00:00.203361 s\n",
      "[56/100,   110/288] loss: 0.00203875, Est. epoch time left: 0:00:00.188045 s\n",
      "[56/100,   120/288] loss: 0.00446977, Est. epoch time left: 0:00:00.172274 s\n",
      "[56/100,   130/288] loss: 0.00219859, Est. epoch time left: 0:00:00.148571 s\n",
      "[56/100,   140/288] loss: 0.00241862, Est. epoch time left: 0:00:00.145061 s\n",
      "[56/100,   150/288] loss: 0.00194231, Est. epoch time left: 0:00:00.142399 s\n",
      "[56/100,   160/288] loss: 0.00222436, Est. epoch time left: 0:00:00.126038 s\n",
      "[56/100,   170/288] loss: 0.00144108, Est. epoch time left: 0:00:00.112927 s\n",
      "[56/100,   180/288] loss: 0.00373798, Est. epoch time left: 0:00:00.101066 s\n",
      "[56/100,   190/288] loss: 0.00436690, Est. epoch time left: 0:00:00.087011 s\n",
      "[56/100,   200/288] loss: 0.00141567, Est. epoch time left: 0:00:00.077084 s\n",
      "[56/100,   210/288] loss: 0.00464445, Est. epoch time left: 0:00:00.067301 s\n",
      "[56/100,   220/288] loss: 0.00152647, Est. epoch time left: 0:00:00.061137 s\n",
      "[56/100,   230/288] loss: 0.00479655, Est. epoch time left: 0:00:00.052478 s\n",
      "[56/100,   240/288] loss: 0.00339910, Est. epoch time left: 0:00:00.043236 s\n",
      "[56/100,   250/288] loss: 0.00296191, Est. epoch time left: 0:00:00.034554 s\n",
      "[56/100,   260/288] loss: 0.00245889, Est. epoch time left: 0:00:00.025401 s\n",
      "[56/100,   270/288] loss: 0.00558896, Est. epoch time left: 0:00:00.016849 s\n",
      "[56/100,   280/288] loss: 0.00259153, Est. epoch time left: 0:00:00.011496 s\n",
      "Validation...\n",
      "[56,    10] loss: 0.002\n",
      "[56,    20] loss: 0.001\n",
      "[56,    30] loss: 0.007\n",
      "[57/100,    10/288] loss: 0.00653944, Est. epoch time left: 0:00:00.295080 s\n",
      "[57/100,    20/288] loss: 0.00171436, Est. epoch time left: 0:00:00.349895 s\n",
      "[57/100,    30/288] loss: 0.00374107, Est. epoch time left: 0:00:00.459002 s\n",
      "[57/100,    40/288] loss: 0.00167947, Est. epoch time left: 0:00:00.409105 s\n",
      "[57/100,    50/288] loss: 0.00203666, Est. epoch time left: 0:00:00.345512 s\n",
      "[57/100,    60/288] loss: 0.00556667, Est. epoch time left: 0:00:00.338822 s\n",
      "[57/100,    70/288] loss: 0.00284334, Est. epoch time left: 0:00:00.287215 s\n",
      "[57/100,    80/288] loss: 0.00591043, Est. epoch time left: 0:00:00.254402 s\n",
      "[57/100,    90/288] loss: 0.00212421, Est. epoch time left: 0:00:00.221967 s\n",
      "[57/100,   100/288] loss: 0.00304963, Est. epoch time left: 0:00:00.224875 s\n",
      "[57/100,   110/288] loss: 0.00126336, Est. epoch time left: 0:00:00.199037 s\n",
      "[57/100,   120/288] loss: 0.00466257, Est. epoch time left: 0:00:00.187574 s\n",
      "[57/100,   130/288] loss: 0.00394680, Est. epoch time left: 0:00:00.164166 s\n",
      "[57/100,   140/288] loss: 0.00202504, Est. epoch time left: 0:00:00.151130 s\n",
      "[57/100,   150/288] loss: 0.00429638, Est. epoch time left: 0:00:00.141017 s\n",
      "[57/100,   160/288] loss: 0.00408472, Est. epoch time left: 0:00:00.135223 s\n",
      "[57/100,   170/288] loss: 0.00373949, Est. epoch time left: 0:00:00.115319 s\n",
      "[57/100,   180/288] loss: 0.00396795, Est. epoch time left: 0:00:00.105546 s\n",
      "[57/100,   190/288] loss: 0.00331943, Est. epoch time left: 0:00:00.095843 s\n",
      "[57/100,   200/288] loss: 0.00184331, Est. epoch time left: 0:00:00.091623 s\n",
      "[57/100,   210/288] loss: 0.00410688, Est. epoch time left: 0:00:00.075502 s\n",
      "[57/100,   220/288] loss: 0.00306988, Est. epoch time left: 0:00:00.066341 s\n",
      "[57/100,   230/288] loss: 0.00158932, Est. epoch time left: 0:00:00.057332 s\n",
      "[57/100,   240/288] loss: 0.00331394, Est. epoch time left: 0:00:00.045227 s\n",
      "[57/100,   250/288] loss: 0.00219590, Est. epoch time left: 0:00:00.034464 s\n",
      "[57/100,   260/288] loss: 0.00396408, Est. epoch time left: 0:00:00.024133 s\n",
      "[57/100,   270/288] loss: 0.00343509, Est. epoch time left: 0:00:00.015883 s\n",
      "[57/100,   280/288] loss: 0.00177830, Est. epoch time left: 0:00:00.007286 s\n",
      "Validation...\n",
      "[57,    10] loss: 0.002\n",
      "[57,    20] loss: 0.002\n",
      "[57,    30] loss: 0.004\n",
      "[58/100,    10/288] loss: 0.00311145, Est. epoch time left: 0:00:00.284078 s\n",
      "[58/100,    20/288] loss: 0.00324027, Est. epoch time left: 0:00:00.261399 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[58/100,    30/288] loss: 0.00580034, Est. epoch time left: 0:00:00.241988 s\n",
      "[58/100,    40/288] loss: 0.00413802, Est. epoch time left: 0:00:00.232786 s\n",
      "[58/100,    50/288] loss: 0.00467437, Est. epoch time left: 0:00:00.213753 s\n",
      "[58/100,    60/288] loss: 0.00307110, Est. epoch time left: 0:00:00.200043 s\n",
      "[58/100,    70/288] loss: 0.00108058, Est. epoch time left: 0:00:00.189242 s\n",
      "[58/100,    80/288] loss: 0.00325723, Est. epoch time left: 0:00:00.182198 s\n",
      "[58/100,    90/288] loss: 0.00613500, Est. epoch time left: 0:00:00.172447 s\n",
      "[58/100,   100/288] loss: 0.00150818, Est. epoch time left: 0:00:00.166427 s\n",
      "[58/100,   110/288] loss: 0.00315916, Est. epoch time left: 0:00:00.158550 s\n",
      "[58/100,   120/288] loss: 0.00328394, Est. epoch time left: 0:00:00.145317 s\n",
      "[58/100,   130/288] loss: 0.00143633, Est. epoch time left: 0:00:00.148081 s\n",
      "[58/100,   140/288] loss: 0.00251752, Est. epoch time left: 0:00:00.139697 s\n",
      "[58/100,   150/288] loss: 0.00040234, Est. epoch time left: 0:00:00.124632 s\n",
      "[58/100,   160/288] loss: 0.00088372, Est. epoch time left: 0:00:00.116608 s\n",
      "[58/100,   170/288] loss: 0.00488554, Est. epoch time left: 0:00:00.107048 s\n",
      "[58/100,   180/288] loss: 0.00336008, Est. epoch time left: 0:00:00.098722 s\n",
      "[58/100,   190/288] loss: 0.00538647, Est. epoch time left: 0:00:00.085423 s\n",
      "[58/100,   200/288] loss: 0.00399114, Est. epoch time left: 0:00:00.077314 s\n",
      "[58/100,   210/288] loss: 0.00759835, Est. epoch time left: 0:00:00.068901 s\n",
      "[58/100,   220/288] loss: 0.00265489, Est. epoch time left: 0:00:00.058932 s\n",
      "[58/100,   230/288] loss: 0.00409394, Est. epoch time left: 0:00:00.050376 s\n",
      "[58/100,   240/288] loss: 0.00495586, Est. epoch time left: 0:00:00.041874 s\n",
      "[58/100,   250/288] loss: 0.00382735, Est. epoch time left: 0:00:00.032951 s\n",
      "[58/100,   260/288] loss: 0.00219894, Est. epoch time left: 0:00:00.024607 s\n",
      "[58/100,   270/288] loss: 0.00207079, Est. epoch time left: 0:00:00.015887 s\n",
      "[58/100,   280/288] loss: 0.00396972, Est. epoch time left: 0:00:00.007181 s\n",
      "Validation...\n",
      "[58,    10] loss: 0.002\n",
      "[58,    20] loss: 0.001\n",
      "[58,    30] loss: 0.006\n",
      "[59/100,    10/288] loss: 0.00262105, Est. epoch time left: 0:00:00.240333 s\n",
      "[59/100,    20/288] loss: 0.00201077, Est. epoch time left: 0:00:00.232327 s\n",
      "[59/100,    30/288] loss: 0.00188744, Est. epoch time left: 0:00:00.225011 s\n",
      "[59/100,    40/288] loss: 0.00564561, Est. epoch time left: 0:00:00.215048 s\n",
      "[59/100,    50/288] loss: 0.00052231, Est. epoch time left: 0:00:00.210859 s\n",
      "[59/100,    60/288] loss: 0.00551803, Est. epoch time left: 0:00:00.326374 s\n",
      "[59/100,    70/288] loss: 0.00092099, Est. epoch time left: 0:00:00.277392 s\n",
      "[59/100,    80/288] loss: 0.00698416, Est. epoch time left: 0:00:00.230946 s\n",
      "[59/100,    90/288] loss: 0.00187780, Est. epoch time left: 0:00:00.223100 s\n",
      "[59/100,   100/288] loss: 0.00333385, Est. epoch time left: 0:00:00.202195 s\n",
      "[59/100,   110/288] loss: 0.00269932, Est. epoch time left: 0:00:00.195217 s\n",
      "[59/100,   120/288] loss: 0.00150352, Est. epoch time left: 0:00:00.198750 s\n",
      "[59/100,   130/288] loss: 0.00344866, Est. epoch time left: 0:00:00.184923 s\n",
      "[59/100,   140/288] loss: 0.00115829, Est. epoch time left: 0:00:00.173607 s\n",
      "[59/100,   150/288] loss: 0.00155133, Est. epoch time left: 0:00:00.156974 s\n",
      "[59/100,   160/288] loss: 0.00340201, Est. epoch time left: 0:00:00.136810 s\n",
      "[59/100,   170/288] loss: 0.00197172, Est. epoch time left: 0:00:00.125813 s\n",
      "[59/100,   180/288] loss: 0.00608615, Est. epoch time left: 0:00:00.106730 s\n",
      "[59/100,   190/288] loss: 0.00398826, Est. epoch time left: 0:00:00.084792 s\n",
      "[59/100,   200/288] loss: 0.00707566, Est. epoch time left: 0:00:00.075426 s\n",
      "[59/100,   210/288] loss: 0.00215968, Est. epoch time left: 0:00:00.076376 s\n",
      "[59/100,   220/288] loss: 0.00397865, Est. epoch time left: 0:00:00.061915 s\n",
      "[59/100,   230/288] loss: 0.00398664, Est. epoch time left: 0:00:00.050847 s\n",
      "[59/100,   240/288] loss: 0.00418168, Est. epoch time left: 0:00:00.052071 s\n",
      "[59/100,   250/288] loss: 0.00198574, Est. epoch time left: 0:00:00.039438 s\n",
      "[59/100,   260/288] loss: 0.00527997, Est. epoch time left: 0:00:00.028305 s\n",
      "[59/100,   270/288] loss: 0.00543478, Est. epoch time left: 0:00:00.018368 s\n",
      "[59/100,   280/288] loss: 0.00333591, Est. epoch time left: 0:00:00.007534 s\n",
      "Validation...\n",
      "[59,    10] loss: 0.005\n",
      "[59,    20] loss: 0.002\n",
      "[59,    30] loss: 0.003\n",
      "[60/100,    10/288] loss: 0.00406332, Est. epoch time left: 0:00:00.309397 s\n",
      "[60/100,    20/288] loss: 0.00191760, Est. epoch time left: 0:00:00.285808 s\n",
      "[60/100,    30/288] loss: 0.00334066, Est. epoch time left: 0:00:00.264994 s\n",
      "[60/100,    40/288] loss: 0.00390431, Est. epoch time left: 0:00:00.253304 s\n",
      "[60/100,    50/288] loss: 0.00285571, Est. epoch time left: 0:00:00.223116 s\n",
      "[60/100,    60/288] loss: 0.00159051, Est. epoch time left: 0:00:00.282017 s\n",
      "[60/100,    70/288] loss: 0.00112268, Est. epoch time left: 0:00:00.255354 s\n",
      "[60/100,    80/288] loss: 0.00780151, Est. epoch time left: 0:00:00.231342 s\n",
      "[60/100,    90/288] loss: 0.00190058, Est. epoch time left: 0:00:00.209551 s\n",
      "[60/100,   100/288] loss: 0.00406302, Est. epoch time left: 0:00:00.200582 s\n",
      "[60/100,   110/288] loss: 0.00230529, Est. epoch time left: 0:00:00.204596 s\n",
      "[60/100,   120/288] loss: 0.00197220, Est. epoch time left: 0:00:00.170912 s\n",
      "[60/100,   130/288] loss: 0.00087534, Est. epoch time left: 0:00:00.161643 s\n",
      "[60/100,   140/288] loss: 0.00198895, Est. epoch time left: 0:00:00.145555 s\n",
      "[60/100,   150/288] loss: 0.00290362, Est. epoch time left: 0:00:00.184875 s\n",
      "[60/100,   160/288] loss: 0.00083384, Est. epoch time left: 0:00:00.162689 s\n",
      "[60/100,   170/288] loss: 0.00089832, Est. epoch time left: 0:00:00.146828 s\n",
      "[60/100,   180/288] loss: 0.00433197, Est. epoch time left: 0:00:00.126789 s\n",
      "[60/100,   190/288] loss: 0.00322925, Est. epoch time left: 0:00:00.114161 s\n",
      "[60/100,   200/288] loss: 0.00399517, Est. epoch time left: 0:00:00.111975 s\n",
      "[60/100,   210/288] loss: 0.00543833, Est. epoch time left: 0:00:00.086921 s\n",
      "[60/100,   220/288] loss: 0.00409604, Est. epoch time left: 0:00:00.090887 s\n",
      "[60/100,   230/288] loss: 0.00581351, Est. epoch time left: 0:00:00.083094 s\n",
      "[60/100,   240/288] loss: 0.00903278, Est. epoch time left: 0:00:00.059818 s\n",
      "[60/100,   250/288] loss: 0.00388346, Est. epoch time left: 0:00:00.044493 s\n",
      "[60/100,   260/288] loss: 0.00326805, Est. epoch time left: 0:00:00.030989 s\n",
      "[60/100,   270/288] loss: 0.00946218, Est. epoch time left: 0:00:00.018964 s\n",
      "[60/100,   280/288] loss: 0.00110014, Est. epoch time left: 0:00:00.008425 s\n",
      "Validation...\n",
      "[60,    10] loss: 0.003\n",
      "[60,    20] loss: 0.006\n",
      "[60,    30] loss: 0.001\n",
      "[61/100,    10/288] loss: 0.00203855, Est. epoch time left: 0:00:00.253456 s\n",
      "[61/100,    20/288] loss: 0.00239237, Est. epoch time left: 0:00:00.233157 s\n",
      "[61/100,    30/288] loss: 0.00424629, Est. epoch time left: 0:00:00.226180 s\n",
      "[61/100,    40/288] loss: 0.00161291, Est. epoch time left: 0:00:00.215698 s\n",
      "[61/100,    50/288] loss: 0.00312097, Est. epoch time left: 0:00:00.207682 s\n",
      "[61/100,    60/288] loss: 0.00671772, Est. epoch time left: 0:00:00.207707 s\n",
      "[61/100,    70/288] loss: 0.00416034, Est. epoch time left: 0:00:00.207017 s\n",
      "[61/100,    80/288] loss: 0.00531075, Est. epoch time left: 0:00:00.196976 s\n",
      "[61/100,    90/288] loss: 0.00131388, Est. epoch time left: 0:00:00.186562 s\n",
      "[61/100,   100/288] loss: 0.00311910, Est. epoch time left: 0:00:00.175346 s\n",
      "[61/100,   110/288] loss: 0.00324596, Est. epoch time left: 0:00:00.273601 s\n",
      "[61/100,   120/288] loss: 0.00302563, Est. epoch time left: 0:00:00.220659 s\n",
      "[61/100,   130/288] loss: 0.00568439, Est. epoch time left: 0:00:00.175354 s\n",
      "[61/100,   140/288] loss: 0.00306801, Est. epoch time left: 0:00:00.151765 s\n",
      "[61/100,   150/288] loss: 0.00389838, Est. epoch time left: 0:00:00.135851 s\n",
      "[61/100,   160/288] loss: 0.00620924, Est. epoch time left: 0:00:00.120209 s\n",
      "[61/100,   170/288] loss: 0.00357959, Est. epoch time left: 0:00:00.165903 s\n",
      "[61/100,   180/288] loss: 0.00152960, Est. epoch time left: 0:00:00.141621 s\n",
      "[61/100,   190/288] loss: 0.00137012, Est. epoch time left: 0:00:00.120680 s\n",
      "[61/100,   200/288] loss: 0.00208518, Est. epoch time left: 0:00:00.098064 s\n",
      "[61/100,   210/288] loss: 0.00472961, Est. epoch time left: 0:00:00.082439 s\n",
      "[61/100,   220/288] loss: 0.00412748, Est. epoch time left: 0:00:00.069308 s\n",
      "[61/100,   230/288] loss: 0.00273273, Est. epoch time left: 0:00:00.054428 s\n",
      "[61/100,   240/288] loss: 0.00388703, Est. epoch time left: 0:00:00.045158 s\n",
      "[61/100,   250/288] loss: 0.00446732, Est. epoch time left: 0:00:00.036067 s\n",
      "[61/100,   260/288] loss: 0.00108270, Est. epoch time left: 0:00:00.025261 s\n",
      "[61/100,   270/288] loss: 0.00323119, Est. epoch time left: 0:00:00.016183 s\n",
      "[61/100,   280/288] loss: 0.00461649, Est. epoch time left: 0:00:00.007126 s\n",
      "Validation...\n",
      "[61,    10] loss: 0.003\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[61,    20] loss: 0.002\n",
      "[61,    30] loss: 0.005\n",
      "[62/100,    10/288] loss: 0.00193629, Est. epoch time left: 0:00:00.267508 s\n",
      "[62/100,    20/288] loss: 0.00073504, Est. epoch time left: 0:00:00.359352 s\n",
      "[62/100,    30/288] loss: 0.00358972, Est. epoch time left: 0:00:00.338808 s\n",
      "[62/100,    40/288] loss: 0.00659280, Est. epoch time left: 0:00:00.312904 s\n",
      "[62/100,    50/288] loss: 0.00492921, Est. epoch time left: 0:00:00.266128 s\n",
      "[62/100,    60/288] loss: 0.00404903, Est. epoch time left: 0:00:00.233093 s\n",
      "[62/100,    70/288] loss: 0.00425431, Est. epoch time left: 0:00:00.193036 s\n",
      "[62/100,    80/288] loss: 0.00539706, Est. epoch time left: 0:00:00.181404 s\n",
      "[62/100,    90/288] loss: 0.00343478, Est. epoch time left: 0:00:00.172305 s\n",
      "[62/100,   100/288] loss: 0.00315846, Est. epoch time left: 0:00:00.163782 s\n",
      "[62/100,   110/288] loss: 0.00225204, Est. epoch time left: 0:00:00.157786 s\n",
      "[62/100,   120/288] loss: 0.00699420, Est. epoch time left: 0:00:00.146799 s\n",
      "[62/100,   130/288] loss: 0.00217017, Est. epoch time left: 0:00:00.197806 s\n",
      "[62/100,   140/288] loss: 0.00102097, Est. epoch time left: 0:00:00.174771 s\n",
      "[62/100,   150/288] loss: 0.00295495, Est. epoch time left: 0:00:00.146150 s\n",
      "[62/100,   160/288] loss: 0.00407085, Est. epoch time left: 0:00:00.138336 s\n",
      "[62/100,   170/288] loss: 0.00399069, Est. epoch time left: 0:00:00.149135 s\n",
      "[62/100,   180/288] loss: 0.00336444, Est. epoch time left: 0:00:00.129364 s\n",
      "[62/100,   190/288] loss: 0.00328484, Est. epoch time left: 0:00:00.110236 s\n",
      "[62/100,   200/288] loss: 0.00529395, Est. epoch time left: 0:00:00.089441 s\n",
      "[62/100,   210/288] loss: 0.00234284, Est. epoch time left: 0:00:00.079780 s\n",
      "[62/100,   220/288] loss: 0.00390035, Est. epoch time left: 0:00:00.069389 s\n",
      "[62/100,   230/288] loss: 0.00303837, Est. epoch time left: 0:00:00.056876 s\n",
      "[62/100,   240/288] loss: 0.00159513, Est. epoch time left: 0:00:00.081573 s\n",
      "[62/100,   250/288] loss: 0.00318548, Est. epoch time left: 0:00:00.043397 s\n",
      "[62/100,   260/288] loss: 0.00089618, Est. epoch time left: 0:00:00.026269 s\n",
      "[62/100,   270/288] loss: 0.00663545, Est. epoch time left: 0:00:00.023685 s\n",
      "[62/100,   280/288] loss: 0.00214708, Est. epoch time left: 0:00:00.009621 s\n",
      "Validation...\n",
      "[62,    10] loss: 0.002\n",
      "[62,    20] loss: 0.005\n",
      "[62,    30] loss: 0.001\n",
      "[63/100,    10/288] loss: 0.00592963, Est. epoch time left: 0:00:00.248087 s\n",
      "[63/100,    20/288] loss: 0.00325645, Est. epoch time left: 0:00:00.436666 s\n",
      "[63/100,    30/288] loss: 0.00374663, Est. epoch time left: 0:00:00.223904 s\n",
      "[63/100,    40/288] loss: 0.00256848, Est. epoch time left: 0:00:00.234146 s\n",
      "[63/100,    50/288] loss: 0.00164299, Est. epoch time left: 0:00:00.212391 s\n",
      "[63/100,    60/288] loss: 0.00139419, Est. epoch time left: 0:00:00.201347 s\n",
      "[63/100,    70/288] loss: 0.00668680, Est. epoch time left: 0:00:00.221674 s\n",
      "[63/100,    80/288] loss: 0.00163784, Est. epoch time left: 0:00:00.204266 s\n",
      "[63/100,    90/288] loss: 0.00707918, Est. epoch time left: 0:00:00.192132 s\n",
      "[63/100,   100/288] loss: 0.00191258, Est. epoch time left: 0:00:00.161944 s\n",
      "[63/100,   110/288] loss: 0.00456891, Est. epoch time left: 0:00:00.155664 s\n",
      "[63/100,   120/288] loss: 0.00173561, Est. epoch time left: 0:00:00.144636 s\n",
      "[63/100,   130/288] loss: 0.00054508, Est. epoch time left: 0:00:00.176635 s\n",
      "[63/100,   140/288] loss: 0.00353883, Est. epoch time left: 0:00:00.134686 s\n",
      "[63/100,   150/288] loss: 0.00360455, Est. epoch time left: 0:00:00.161087 s\n",
      "[63/100,   160/288] loss: 0.00132843, Est. epoch time left: 0:00:00.136322 s\n",
      "[63/100,   170/288] loss: 0.00189072, Est. epoch time left: 0:00:00.101787 s\n",
      "[63/100,   180/288] loss: 0.00198532, Est. epoch time left: 0:00:00.094268 s\n",
      "[63/100,   190/288] loss: 0.00352480, Est. epoch time left: 0:00:00.114161 s\n",
      "[63/100,   200/288] loss: 0.00159497, Est. epoch time left: 0:00:00.103876 s\n",
      "[63/100,   210/288] loss: 0.00410071, Est. epoch time left: 0:00:00.087758 s\n",
      "[63/100,   220/288] loss: 0.00321715, Est. epoch time left: 0:00:00.076847 s\n",
      "[63/100,   230/288] loss: 0.00316548, Est. epoch time left: 0:00:00.062227 s\n",
      "[63/100,   240/288] loss: 0.00223902, Est. epoch time left: 0:00:00.052299 s\n",
      "[63/100,   250/288] loss: 0.00401204, Est. epoch time left: 0:00:00.041485 s\n",
      "[63/100,   260/288] loss: 0.00302128, Est. epoch time left: 0:00:00.030221 s\n",
      "[63/100,   270/288] loss: 0.00711611, Est. epoch time left: 0:00:00.019342 s\n",
      "[63/100,   280/288] loss: 0.00423411, Est. epoch time left: 0:00:00.008696 s\n",
      "Validation...\n",
      "[63,    10] loss: 0.004\n",
      "[63,    20] loss: 0.001\n",
      "[63,    30] loss: 0.002\n",
      "[64/100,    10/288] loss: 0.00485343, Est. epoch time left: 0:00:00.298659 s\n",
      "[64/100,    20/288] loss: 0.00332646, Est. epoch time left: 0:00:00.290089 s\n",
      "[64/100,    30/288] loss: 0.00296039, Est. epoch time left: 0:00:00.276804 s\n",
      "[64/100,    40/288] loss: 0.00367326, Est. epoch time left: 0:00:00.269327 s\n",
      "[64/100,    50/288] loss: 0.00329313, Est. epoch time left: 0:00:00.256765 s\n",
      "[64/100,    60/288] loss: 0.00209297, Est. epoch time left: 0:00:00.255652 s\n",
      "[64/100,    70/288] loss: 0.00459509, Est. epoch time left: 0:00:00.236591 s\n",
      "[64/100,    80/288] loss: 0.00219695, Est. epoch time left: 0:00:00.222614 s\n",
      "[64/100,    90/288] loss: 0.00410425, Est. epoch time left: 0:00:00.213375 s\n",
      "[64/100,   100/288] loss: 0.00112484, Est. epoch time left: 0:00:00.211877 s\n",
      "[64/100,   110/288] loss: 0.00686068, Est. epoch time left: 0:00:00.192628 s\n",
      "[64/100,   120/288] loss: 0.00505132, Est. epoch time left: 0:00:00.180725 s\n",
      "[64/100,   130/288] loss: 0.00215347, Est. epoch time left: 0:00:00.171211 s\n",
      "[64/100,   140/288] loss: 0.00446459, Est. epoch time left: 0:00:00.159739 s\n",
      "[64/100,   150/288] loss: 0.00326229, Est. epoch time left: 0:00:00.150887 s\n",
      "[64/100,   160/288] loss: 0.00047191, Est. epoch time left: 0:00:00.142853 s\n",
      "[64/100,   170/288] loss: 0.00384166, Est. epoch time left: 0:00:00.133212 s\n",
      "[64/100,   180/288] loss: 0.00102962, Est. epoch time left: 0:00:00.120429 s\n",
      "[64/100,   190/288] loss: 0.00415563, Est. epoch time left: 0:00:00.105119 s\n",
      "[64/100,   200/288] loss: 0.00645694, Est. epoch time left: 0:00:00.094917 s\n",
      "[64/100,   210/288] loss: 0.00123950, Est. epoch time left: 0:00:00.083815 s\n",
      "[64/100,   220/288] loss: 0.00367831, Est. epoch time left: 0:00:00.090401 s\n",
      "[64/100,   230/288] loss: 0.00401382, Est. epoch time left: 0:00:00.061107 s\n",
      "[64/100,   240/288] loss: 0.00286315, Est. epoch time left: 0:00:00.051098 s\n",
      "[64/100,   250/288] loss: 0.00324570, Est. epoch time left: 0:00:00.040416 s\n",
      "[64/100,   260/288] loss: 0.00192565, Est. epoch time left: 0:00:00.029513 s\n",
      "[64/100,   270/288] loss: 0.00267232, Est. epoch time left: 0:00:00.018535 s\n",
      "[64/100,   280/288] loss: 0.00337830, Est. epoch time left: 0:00:00.011127 s\n",
      "Validation...\n",
      "[64,    10] loss: 0.003\n",
      "[64,    20] loss: 0.003\n",
      "[64,    30] loss: 0.001\n",
      "[65/100,    10/288] loss: 0.00188920, Est. epoch time left: 0:00:00.311319 s\n",
      "[65/100,    20/288] loss: 0.00403912, Est. epoch time left: 0:00:00.283252 s\n",
      "[65/100,    30/288] loss: 0.00095406, Est. epoch time left: 0:00:00.251092 s\n",
      "[65/100,    40/288] loss: 0.00221489, Est. epoch time left: 0:00:00.235388 s\n",
      "[65/100,    50/288] loss: 0.00439712, Est. epoch time left: 0:00:00.216477 s\n",
      "[65/100,    60/288] loss: 0.00596677, Est. epoch time left: 0:00:00.200912 s\n",
      "[65/100,    70/288] loss: 0.00244812, Est. epoch time left: 0:00:00.194647 s\n",
      "[65/100,    80/288] loss: 0.00349546, Est. epoch time left: 0:00:00.239426 s\n",
      "[65/100,    90/288] loss: 0.00488805, Est. epoch time left: 0:00:00.193690 s\n",
      "[65/100,   100/288] loss: 0.00553393, Est. epoch time left: 0:00:00.169206 s\n",
      "[65/100,   110/288] loss: 0.00121634, Est. epoch time left: 0:00:00.168311 s\n",
      "[65/100,   120/288] loss: 0.00299418, Est. epoch time left: 0:00:00.151245 s\n",
      "[65/100,   130/288] loss: 0.00417056, Est. epoch time left: 0:00:00.176748 s\n",
      "[65/100,   140/288] loss: 0.00227545, Est. epoch time left: 0:00:00.156105 s\n",
      "[65/100,   150/288] loss: 0.00785697, Est. epoch time left: 0:00:00.135358 s\n",
      "[65/100,   160/288] loss: 0.00483084, Est. epoch time left: 0:00:00.138214 s\n",
      "[65/100,   170/288] loss: 0.00171489, Est. epoch time left: 0:00:00.127022 s\n",
      "[65/100,   180/288] loss: 0.00296779, Est. epoch time left: 0:00:00.116567 s\n",
      "[65/100,   190/288] loss: 0.00160822, Est. epoch time left: 0:00:00.105657 s\n",
      "[65/100,   200/288] loss: 0.00264487, Est. epoch time left: 0:00:00.094854 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[65/100,   210/288] loss: 0.00370079, Est. epoch time left: 0:00:00.113012 s\n",
      "[65/100,   220/288] loss: 0.00709792, Est. epoch time left: 0:00:00.091552 s\n",
      "[65/100,   230/288] loss: 0.00156771, Est. epoch time left: 0:00:00.076954 s\n",
      "[65/100,   240/288] loss: 0.00306124, Est. epoch time left: 0:00:00.056236 s\n",
      "[65/100,   250/288] loss: 0.00412984, Est. epoch time left: 0:00:00.034210 s\n",
      "[65/100,   260/288] loss: 0.00471699, Est. epoch time left: 0:00:00.024860 s\n",
      "[65/100,   270/288] loss: 0.00212879, Est. epoch time left: 0:00:00.016467 s\n",
      "[65/100,   280/288] loss: 0.00367145, Est. epoch time left: 0:00:00.007334 s\n",
      "Validation...\n",
      "[65,    10] loss: 0.001\n",
      "[65,    20] loss: 0.004\n",
      "[65,    30] loss: 0.004\n",
      "[66/100,    10/288] loss: 0.00307873, Est. epoch time left: 0:00:00.245105 s\n",
      "[66/100,    20/288] loss: 0.00185198, Est. epoch time left: 0:00:00.212519 s\n",
      "[66/100,    30/288] loss: 0.00346987, Est. epoch time left: 0:00:00.205696 s\n",
      "[66/100,    40/288] loss: 0.00201007, Est. epoch time left: 0:00:00.195181 s\n",
      "[66/100,    50/288] loss: 0.00634335, Est. epoch time left: 0:00:00.178799 s\n",
      "[66/100,    60/288] loss: 0.00293393, Est. epoch time left: 0:00:00.202108 s\n",
      "[66/100,    70/288] loss: 0.00304534, Est. epoch time left: 0:00:00.162683 s\n",
      "[66/100,    80/288] loss: 0.00267322, Est. epoch time left: 0:00:00.145401 s\n",
      "[66/100,    90/288] loss: 0.00156940, Est. epoch time left: 0:00:00.188072 s\n",
      "[66/100,   100/288] loss: 0.00212904, Est. epoch time left: 0:00:00.252262 s\n",
      "[66/100,   110/288] loss: 0.00305159, Est. epoch time left: 0:00:00.207567 s\n",
      "[66/100,   120/288] loss: 0.00577326, Est. epoch time left: 0:00:00.173716 s\n",
      "[66/100,   130/288] loss: 0.00133535, Est. epoch time left: 0:00:00.147629 s\n",
      "[66/100,   140/288] loss: 0.00418010, Est. epoch time left: 0:00:00.146190 s\n",
      "[66/100,   150/288] loss: 0.00183999, Est. epoch time left: 0:00:00.126376 s\n",
      "[66/100,   160/288] loss: 0.00454221, Est. epoch time left: 0:00:00.124512 s\n",
      "[66/100,   170/288] loss: 0.00607726, Est. epoch time left: 0:00:00.102546 s\n",
      "[66/100,   180/288] loss: 0.00349363, Est. epoch time left: 0:00:00.099392 s\n",
      "[66/100,   190/288] loss: 0.00234153, Est. epoch time left: 0:00:00.085352 s\n",
      "[66/100,   200/288] loss: 0.00423339, Est. epoch time left: 0:00:00.077524 s\n",
      "[66/100,   210/288] loss: 0.00353065, Est. epoch time left: 0:00:00.070853 s\n",
      "[66/100,   220/288] loss: 0.00262425, Est. epoch time left: 0:00:00.060083 s\n",
      "[66/100,   230/288] loss: 0.00690704, Est. epoch time left: 0:00:00.051635 s\n",
      "[66/100,   240/288] loss: 0.00276072, Est. epoch time left: 0:00:00.069283 s\n",
      "[66/100,   250/288] loss: 0.00306023, Est. epoch time left: 0:00:00.047863 s\n",
      "[66/100,   260/288] loss: 0.00336797, Est. epoch time left: 0:00:00.049954 s\n",
      "[66/100,   270/288] loss: 0.00268043, Est. epoch time left: 0:00:00.028105 s\n",
      "[66/100,   280/288] loss: 0.00259864, Est. epoch time left: 0:00:00.010710 s\n",
      "Validation...\n",
      "[66,    10] loss: 0.005\n",
      "[66,    20] loss: 0.003\n",
      "[66,    30] loss: 0.001\n",
      "[67/100,    10/288] loss: 0.00369824, Est. epoch time left: 0:00:00.273937 s\n",
      "[67/100,    20/288] loss: 0.00139297, Est. epoch time left: 0:00:00.242167 s\n",
      "[67/100,    30/288] loss: 0.00414334, Est. epoch time left: 0:00:00.221074 s\n",
      "[67/100,    40/288] loss: 0.00162751, Est. epoch time left: 0:00:00.227642 s\n",
      "[67/100,    50/288] loss: 0.00364148, Est. epoch time left: 0:00:00.207171 s\n",
      "[67/100,    60/288] loss: 0.00365200, Est. epoch time left: 0:00:00.204772 s\n",
      "[67/100,    70/288] loss: 0.00216095, Est. epoch time left: 0:00:00.192153 s\n",
      "[67/100,    80/288] loss: 0.00846399, Est. epoch time left: 0:00:00.182892 s\n",
      "[67/100,    90/288] loss: 0.00503012, Est. epoch time left: 0:00:00.172211 s\n",
      "[67/100,   100/288] loss: 0.00343028, Est. epoch time left: 0:00:00.163782 s\n",
      "[67/100,   110/288] loss: 0.00293892, Est. epoch time left: 0:00:00.155664 s\n",
      "[67/100,   120/288] loss: 0.00355374, Est. epoch time left: 0:00:00.145077 s\n",
      "[67/100,   130/288] loss: 0.00229284, Est. epoch time left: 0:00:00.135537 s\n",
      "[67/100,   140/288] loss: 0.00399579, Est. epoch time left: 0:00:00.130487 s\n",
      "[67/100,   150/288] loss: 0.00075613, Est. epoch time left: 0:00:00.121342 s\n",
      "[67/100,   160/288] loss: 0.00235033, Est. epoch time left: 0:00:00.170715 s\n",
      "[67/100,   170/288] loss: 0.00155434, Est. epoch time left: 0:00:00.139795 s\n",
      "[67/100,   180/288] loss: 0.00223544, Est. epoch time left: 0:00:00.125450 s\n",
      "[67/100,   190/288] loss: 0.00180882, Est. epoch time left: 0:00:00.113788 s\n",
      "[67/100,   200/288] loss: 0.00435289, Est. epoch time left: 0:00:00.095840 s\n",
      "[67/100,   210/288] loss: 0.00420250, Est. epoch time left: 0:00:00.087460 s\n",
      "[67/100,   220/288] loss: 0.00264994, Est. epoch time left: 0:00:00.072697 s\n",
      "[67/100,   230/288] loss: 0.00589522, Est. epoch time left: 0:00:00.062711 s\n",
      "[67/100,   240/288] loss: 0.00526239, Est. epoch time left: 0:00:00.052265 s\n",
      "[67/100,   250/288] loss: 0.00279211, Est. epoch time left: 0:00:00.040742 s\n",
      "[67/100,   260/288] loss: 0.00514536, Est. epoch time left: 0:00:00.030094 s\n",
      "[67/100,   270/288] loss: 0.00260309, Est. epoch time left: 0:00:00.019505 s\n",
      "[67/100,   280/288] loss: 0.00623556, Est. epoch time left: 0:00:00.008718 s\n",
      "Validation...\n",
      "[67,    10] loss: 0.004\n",
      "[67,    20] loss: 0.002\n",
      "[67,    30] loss: 0.001\n",
      "[68/100,    10/288] loss: 0.00784627, Est. epoch time left: 0:00:00.300449 s\n",
      "[68/100,    20/288] loss: 0.00326582, Est. epoch time left: 0:00:00.505930 s\n",
      "[68/100,    30/288] loss: 0.00173645, Est. epoch time left: 0:00:00.403580 s\n",
      "[68/100,    40/288] loss: 0.00245125, Est. epoch time left: 0:00:00.323843 s\n",
      "[68/100,    50/288] loss: 0.00393878, Est. epoch time left: 0:00:00.288825 s\n",
      "[68/100,    60/288] loss: 0.00430670, Est. epoch time left: 0:00:00.245759 s\n",
      "[68/100,    70/288] loss: 0.00354635, Est. epoch time left: 0:00:00.235032 s\n",
      "[68/100,    80/288] loss: 0.00095878, Est. epoch time left: 0:00:00.223953 s\n",
      "[68/100,    90/288] loss: 0.00295390, Est. epoch time left: 0:00:00.213611 s\n",
      "[68/100,   100/288] loss: 0.00173255, Est. epoch time left: 0:00:00.201792 s\n",
      "[68/100,   110/288] loss: 0.00498140, Est. epoch time left: 0:00:00.195132 s\n",
      "[68/100,   120/288] loss: 0.00239749, Est. epoch time left: 0:00:00.179844 s\n",
      "[68/100,   130/288] loss: 0.00483097, Est. epoch time left: 0:00:00.170156 s\n",
      "[68/100,   140/288] loss: 0.00482353, Est. epoch time left: 0:00:00.159528 s\n",
      "[68/100,   150/288] loss: 0.00229014, Est. epoch time left: 0:00:00.148913 s\n",
      "[68/100,   160/288] loss: 0.00613944, Est. epoch time left: 0:00:00.136658 s\n",
      "[68/100,   170/288] loss: 0.00348169, Est. epoch time left: 0:00:00.128148 s\n",
      "[68/100,   180/288] loss: 0.00533211, Est. epoch time left: 0:00:00.116309 s\n",
      "[68/100,   190/288] loss: 0.00350337, Est. epoch time left: 0:00:00.146686 s\n",
      "[68/100,   200/288] loss: 0.00314885, Est. epoch time left: 0:00:00.109415 s\n",
      "[68/100,   210/288] loss: 0.00193316, Est. epoch time left: 0:00:00.088539 s\n",
      "[68/100,   220/288] loss: 0.00150349, Est. epoch time left: 0:00:00.076750 s\n",
      "[68/100,   230/288] loss: 0.00265071, Est. epoch time left: 0:00:00.059199 s\n",
      "[68/100,   240/288] loss: 0.00276108, Est. epoch time left: 0:00:00.043327 s\n",
      "[68/100,   250/288] loss: 0.00339699, Est. epoch time left: 0:00:00.058699 s\n",
      "[68/100,   260/288] loss: 0.00307404, Est. epoch time left: 0:00:00.024794 s\n",
      "[68/100,   270/288] loss: 0.00150536, Est. epoch time left: 0:00:00.016625 s\n",
      "[68/100,   280/288] loss: 0.00562497, Est. epoch time left: 0:00:00.007019 s\n",
      "Validation...\n",
      "[68,    10] loss: 0.003\n",
      "[68,    20] loss: 0.002\n",
      "[68,    30] loss: 0.004\n",
      "[69/100,    10/288] loss: 0.00288023, Est. epoch time left: 0:00:00.369646 s\n",
      "[69/100,    20/288] loss: 0.00509433, Est. epoch time left: 0:00:00.339033 s\n",
      "[69/100,    30/288] loss: 0.00625494, Est. epoch time left: 0:00:00.298456 s\n",
      "[69/100,    40/288] loss: 0.00468152, Est. epoch time left: 0:00:00.226933 s\n",
      "[69/100,    50/288] loss: 0.00257883, Est. epoch time left: 0:00:00.207795 s\n",
      "[69/100,    60/288] loss: 0.00280531, Est. epoch time left: 0:00:00.285333 s\n",
      "[69/100,    70/288] loss: 0.00184818, Est. epoch time left: 0:00:00.245219 s\n",
      "[69/100,    80/288] loss: 0.00269237, Est. epoch time left: 0:00:00.210365 s\n",
      "[69/100,    90/288] loss: 0.00164070, Est. epoch time left: 0:00:00.203178 s\n",
      "[69/100,   100/288] loss: 0.00162109, Est. epoch time left: 0:00:00.170595 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[69/100,   110/288] loss: 0.00193685, Est. epoch time left: 0:00:00.331827 s\n",
      "[69/100,   120/288] loss: 0.00482582, Est. epoch time left: 0:00:00.148401 s\n",
      "[69/100,   130/288] loss: 0.00380449, Est. epoch time left: 0:00:00.134972 s\n",
      "[69/100,   140/288] loss: 0.00327528, Est. epoch time left: 0:00:00.129817 s\n",
      "[69/100,   150/288] loss: 0.00268659, Est. epoch time left: 0:00:00.163259 s\n",
      "[69/100,   160/288] loss: 0.00394952, Est. epoch time left: 0:00:00.149475 s\n",
      "[69/100,   170/288] loss: 0.00210693, Est. epoch time left: 0:00:00.136953 s\n",
      "[69/100,   180/288] loss: 0.00382940, Est. epoch time left: 0:00:00.115073 s\n",
      "[69/100,   190/288] loss: 0.00335725, Est. epoch time left: 0:00:00.111615 s\n",
      "[69/100,   200/288] loss: 0.00224811, Est. epoch time left: 0:00:00.095652 s\n",
      "[69/100,   210/288] loss: 0.00325347, Est. epoch time left: 0:00:00.086977 s\n",
      "[69/100,   220/288] loss: 0.00253598, Est. epoch time left: 0:00:00.077560 s\n",
      "[69/100,   230/288] loss: 0.00552386, Est. epoch time left: 0:00:00.064550 s\n",
      "[69/100,   240/288] loss: 0.00438337, Est. epoch time left: 0:00:00.053581 s\n",
      "[69/100,   250/288] loss: 0.00507991, Est. epoch time left: 0:00:00.042174 s\n",
      "[69/100,   260/288] loss: 0.00560593, Est. epoch time left: 0:00:00.029507 s\n",
      "[69/100,   270/288] loss: 0.00443174, Est. epoch time left: 0:00:00.018733 s\n",
      "[69/100,   280/288] loss: 0.00175103, Est. epoch time left: 0:00:00.008236 s\n",
      "Validation...\n",
      "[69,    10] loss: 0.004\n",
      "[69,    20] loss: 0.005\n",
      "[69,    30] loss: 0.001\n",
      "[70/100,    10/288] loss: 0.00250980, Est. epoch time left: 0:00:00.373622 s\n",
      "[70/100,    20/288] loss: 0.00209521, Est. epoch time left: 0:00:00.332580 s\n",
      "[70/100,    30/288] loss: 0.00613692, Est. epoch time left: 0:00:00.286769 s\n",
      "[70/100,    40/288] loss: 0.00225371, Est. epoch time left: 0:00:00.367361 s\n",
      "[70/100,    50/288] loss: 0.00370403, Est. epoch time left: 0:00:00.320261 s\n",
      "[70/100,    60/288] loss: 0.00065187, Est. epoch time left: 0:00:00.359262 s\n",
      "[70/100,    70/288] loss: 0.00514060, Est. epoch time left: 0:00:00.269752 s\n",
      "[70/100,    80/288] loss: 0.00703942, Est. epoch time left: 0:00:00.228020 s\n",
      "[70/100,    90/288] loss: 0.00301751, Est. epoch time left: 0:00:00.209410 s\n",
      "[70/100,   100/288] loss: 0.00498318, Est. epoch time left: 0:00:00.153204 s\n",
      "[70/100,   110/288] loss: 0.00310202, Est. epoch time left: 0:00:00.141490 s\n",
      "[70/100,   120/288] loss: 0.00442727, Est. epoch time left: 0:00:00.155451 s\n",
      "[70/100,   130/288] loss: 0.00120327, Est. epoch time left: 0:00:00.139493 s\n",
      "[70/100,   140/288] loss: 0.00524049, Est. epoch time left: 0:00:00.236239 s\n",
      "[70/100,   150/288] loss: 0.00812520, Est. epoch time left: 0:00:00.162271 s\n",
      "[70/100,   160/288] loss: 0.00485725, Est. epoch time left: 0:00:00.143127 s\n",
      "[70/100,   170/288] loss: 0.00062111, Est. epoch time left: 0:00:00.120495 s\n",
      "[70/100,   180/288] loss: 0.00468587, Est. epoch time left: 0:00:00.110850 s\n",
      "[70/100,   190/288] loss: 0.00347654, Est. epoch time left: 0:00:00.097245 s\n",
      "[70/100,   200/288] loss: 0.00094210, Est. epoch time left: 0:00:00.086651 s\n",
      "[70/100,   210/288] loss: 0.00350632, Est. epoch time left: 0:00:00.073103 s\n",
      "[70/100,   220/288] loss: 0.00254298, Est. epoch time left: 0:00:00.070346 s\n",
      "[70/100,   230/288] loss: 0.00491159, Est. epoch time left: 0:00:00.059752 s\n",
      "[70/100,   240/288] loss: 0.00204800, Est. epoch time left: 0:00:00.046841 s\n",
      "[70/100,   250/288] loss: 0.00323798, Est. epoch time left: 0:00:00.036249 s\n",
      "[70/100,   260/288] loss: 0.00272000, Est. epoch time left: 0:00:00.026703 s\n",
      "[70/100,   270/288] loss: 0.00174045, Est. epoch time left: 0:00:00.017733 s\n",
      "[70/100,   280/288] loss: 0.00266887, Est. epoch time left: 0:00:00.007338 s\n",
      "Validation...\n",
      "[70,    10] loss: 0.006\n",
      "[70,    20] loss: 0.001\n",
      "[70,    30] loss: 0.003\n",
      "[71/100,    10/288] loss: 0.00169681, Est. epoch time left: 0:00:00.244508 s\n",
      "[71/100,    20/288] loss: 0.00329150, Est. epoch time left: 0:00:00.289897 s\n",
      "[71/100,    30/288] loss: 0.00160934, Est. epoch time left: 0:00:00.341392 s\n",
      "[71/100,    40/288] loss: 0.00128752, Est. epoch time left: 0:00:00.219009 s\n",
      "[71/100,    50/288] loss: 0.00250263, Est. epoch time left: 0:00:00.220222 s\n",
      "[71/100,    60/288] loss: 0.00628171, Est. epoch time left: 0:00:00.201891 s\n",
      "[71/100,    70/288] loss: 0.00517990, Est. epoch time left: 0:00:00.189190 s\n",
      "[71/100,    80/288] loss: 0.00203491, Est. epoch time left: 0:00:00.167618 s\n",
      "[71/100,    90/288] loss: 0.00303943, Est. epoch time left: 0:00:00.150732 s\n",
      "[71/100,   100/288] loss: 0.00360370, Est. epoch time left: 0:00:00.142760 s\n",
      "[71/100,   110/288] loss: 0.00271529, Est. epoch time left: 0:00:00.129353 s\n",
      "[71/100,   120/288] loss: 0.00305520, Est. epoch time left: 0:00:00.167707 s\n",
      "[71/100,   130/288] loss: 0.00572473, Est. epoch time left: 0:00:00.132260 s\n",
      "[71/100,   140/288] loss: 0.00408853, Est. epoch time left: 0:00:00.116796 s\n",
      "[71/100,   150/288] loss: 0.00471634, Est. epoch time left: 0:00:00.109892 s\n",
      "[71/100,   160/288] loss: 0.00366892, Est. epoch time left: 0:00:00.112152 s\n",
      "[71/100,   170/288] loss: 0.00260882, Est. epoch time left: 0:00:00.127444 s\n",
      "[71/100,   180/288] loss: 0.00526550, Est. epoch time left: 0:00:00.116052 s\n",
      "[71/100,   190/288] loss: 0.00314961, Est. epoch time left: 0:00:00.105680 s\n",
      "[71/100,   200/288] loss: 0.00065343, Est. epoch time left: 0:00:00.095148 s\n",
      "[71/100,   210/288] loss: 0.00282855, Est. epoch time left: 0:00:00.084931 s\n",
      "[71/100,   220/288] loss: 0.00421980, Est. epoch time left: 0:00:00.073167 s\n",
      "[71/100,   230/288] loss: 0.00549182, Est. epoch time left: 0:00:00.063403 s\n",
      "[71/100,   240/288] loss: 0.00471947, Est. epoch time left: 0:00:00.051704 s\n",
      "[71/100,   250/288] loss: 0.00355543, Est. epoch time left: 0:00:00.032996 s\n",
      "[71/100,   260/288] loss: 0.00228549, Est. epoch time left: 0:00:00.026589 s\n",
      "[71/100,   270/288] loss: 0.00433893, Est. epoch time left: 0:00:00.015728 s\n",
      "[71/100,   280/288] loss: 0.00437296, Est. epoch time left: 0:00:00.006945 s\n",
      "Validation...\n",
      "[71,    10] loss: 0.001\n",
      "[71,    20] loss: 0.002\n",
      "[71,    30] loss: 0.008\n",
      "[72/100,    10/288] loss: 0.00447069, Est. epoch time left: 0:00:00.302437 s\n",
      "[72/100,    20/288] loss: 0.00279486, Est. epoch time left: 0:00:00.289514 s\n",
      "[72/100,    30/288] loss: 0.00273049, Est. epoch time left: 0:00:00.280003 s\n",
      "[72/100,    40/288] loss: 0.00206714, Est. epoch time left: 0:00:00.270569 s\n",
      "[72/100,    50/288] loss: 0.00107856, Est. epoch time left: 0:00:00.268227 s\n",
      "[72/100,    60/288] loss: 0.00157393, Est. epoch time left: 0:00:00.230267 s\n",
      "[72/100,    70/288] loss: 0.00602173, Est. epoch time left: 0:00:00.198857 s\n",
      "[72/100,    80/288] loss: 0.00425552, Est. epoch time left: 0:00:00.182743 s\n",
      "[72/100,    90/288] loss: 0.00546825, Est. epoch time left: 0:00:00.172352 s\n",
      "[72/100,   100/288] loss: 0.00796225, Est. epoch time left: 0:00:00.162527 s\n",
      "[72/100,   110/288] loss: 0.00377281, Est. epoch time left: 0:00:00.155198 s\n",
      "[72/100,   120/288] loss: 0.00240699, Est. epoch time left: 0:00:00.146158 s\n",
      "[72/100,   130/288] loss: 0.00411712, Est. epoch time left: 0:00:00.138777 s\n",
      "[72/100,   140/288] loss: 0.00333535, Est. epoch time left: 0:00:00.132216 s\n",
      "[72/100,   150/288] loss: 0.00488479, Est. epoch time left: 0:00:00.149078 s\n",
      "[72/100,   160/288] loss: 0.00199159, Est. epoch time left: 0:00:00.121277 s\n",
      "[72/100,   170/288] loss: 0.00652016, Est. epoch time left: 0:00:00.103981 s\n",
      "[72/100,   180/288] loss: 0.00396768, Est. epoch time left: 0:00:00.097770 s\n",
      "[72/100,   190/288] loss: 0.00239349, Est. epoch time left: 0:00:00.142737 s\n",
      "[72/100,   200/288] loss: 0.00589075, Est. epoch time left: 0:00:00.109163 s\n",
      "[72/100,   210/288] loss: 0.00417303, Est. epoch time left: 0:00:00.097484 s\n",
      "[72/100,   220/288] loss: 0.00171531, Est. epoch time left: 0:00:00.076215 s\n",
      "[72/100,   230/288] loss: 0.00374214, Est. epoch time left: 0:00:00.057968 s\n",
      "[72/100,   240/288] loss: 0.00206242, Est. epoch time left: 0:00:00.042412 s\n",
      "[72/100,   250/288] loss: 0.00106785, Est. epoch time left: 0:00:00.032625 s\n",
      "[72/100,   260/288] loss: 0.00375655, Est. epoch time left: 0:00:00.024440 s\n",
      "[72/100,   270/288] loss: 0.00097358, Est. epoch time left: 0:00:00.021492 s\n",
      "[72/100,   280/288] loss: 0.00515461, Est. epoch time left: 0:00:00.007807 s\n",
      "Validation...\n",
      "[72,    10] loss: 0.008\n",
      "[72,    20] loss: 0.005\n",
      "[72,    30] loss: 0.006\n",
      "[73/100,    10/288] loss: 0.00310213, Est. epoch time left: 0:00:00.241791 s\n",
      "[73/100,    20/288] loss: 0.00724365, Est. epoch time left: 0:00:00.236608 s\n",
      "[73/100,    30/288] loss: 0.00340712, Est. epoch time left: 0:00:00.232208 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[73/100,    40/288] loss: 0.00362702, Est. epoch time left: 0:00:00.217768 s\n",
      "[73/100,    50/288] loss: 0.00623566, Est. epoch time left: 0:00:00.206206 s\n",
      "[73/100,    60/288] loss: 0.00344746, Est. epoch time left: 0:00:00.195803 s\n",
      "[73/100,    70/288] loss: 0.00144568, Est. epoch time left: 0:00:00.197506 s\n",
      "[73/100,    80/288] loss: 0.00354044, Est. epoch time left: 0:00:00.181404 s\n",
      "[73/100,    90/288] loss: 0.00389989, Est. epoch time left: 0:00:00.343808 s\n",
      "[73/100,   100/288] loss: 0.00130409, Est. epoch time left: 0:00:00.164948 s\n",
      "[73/100,   110/288] loss: 0.00124308, Est. epoch time left: 0:00:00.156641 s\n",
      "[73/100,   120/288] loss: 0.00408083, Est. epoch time left: 0:00:00.147240 s\n",
      "[73/100,   130/288] loss: 0.00311668, Est. epoch time left: 0:00:00.137232 s\n",
      "[73/100,   140/288] loss: 0.00484489, Est. epoch time left: 0:00:00.129005 s\n",
      "[73/100,   150/288] loss: 0.00388711, Est. epoch time left: 0:00:00.120091 s\n",
      "[73/100,   160/288] loss: 0.00355157, Est. epoch time left: 0:00:00.112030 s\n",
      "[73/100,   170/288] loss: 0.00427050, Est. epoch time left: 0:00:00.102377 s\n",
      "[73/100,   180/288] loss: 0.00185998, Est. epoch time left: 0:00:00.094319 s\n",
      "[73/100,   190/288] loss: 0.00431200, Est. epoch time left: 0:00:00.085516 s\n",
      "[73/100,   200/288] loss: 0.00181952, Est. epoch time left: 0:00:00.078762 s\n",
      "[73/100,   210/288] loss: 0.00537429, Est. epoch time left: 0:00:00.068380 s\n",
      "[73/100,   220/288] loss: 0.00371493, Est. epoch time left: 0:00:00.059192 s\n",
      "[73/100,   230/288] loss: 0.00526021, Est. epoch time left: 0:00:00.043614 s\n",
      "[73/100,   240/288] loss: 0.00066711, Est. epoch time left: 0:00:00.038750 s\n",
      "[73/100,   250/288] loss: 0.00254000, Est. epoch time left: 0:00:00.029726 s\n",
      "[73/100,   260/288] loss: 0.00367401, Est. epoch time left: 0:00:00.022991 s\n",
      "[73/100,   270/288] loss: 0.00168928, Est. epoch time left: 0:00:00.015527 s\n",
      "[73/100,   280/288] loss: 0.00522150, Est. epoch time left: 0:00:00.005383 s\n",
      "Validation...\n",
      "[73,    10] loss: 0.002\n",
      "[73,    20] loss: 0.002\n",
      "[73,    30] loss: 0.005\n",
      "[74/100,    10/288] loss: 0.00372623, Est. epoch time left: 0:00:00.274931 s\n",
      "[74/100,    20/288] loss: 0.00179610, Est. epoch time left: 0:00:00.241464 s\n",
      "[74/100,    30/288] loss: 0.00161216, Est. epoch time left: 0:00:00.222550 s\n",
      "[74/100,    40/288] loss: 0.00221876, Est. epoch time left: 0:00:00.214989 s\n",
      "[74/100,    50/288] loss: 0.00555806, Est. epoch time left: 0:00:00.207341 s\n",
      "[74/100,    60/288] loss: 0.00317779, Est. epoch time left: 0:00:00.199173 s\n",
      "[74/100,    70/288] loss: 0.00159620, Est. epoch time left: 0:00:00.192880 s\n",
      "[74/100,    80/288] loss: 0.00164493, Est. epoch time left: 0:00:00.210117 s\n",
      "[74/100,    90/288] loss: 0.00197318, Est. epoch time left: 0:00:00.174996 s\n",
      "[74/100,   100/288] loss: 0.00530363, Est. epoch time left: 0:00:00.164768 s\n",
      "[74/100,   110/288] loss: 0.00177179, Est. epoch time left: 0:00:00.160290 s\n",
      "[74/100,   120/288] loss: 0.00271551, Est. epoch time left: 0:00:00.145998 s\n",
      "[74/100,   130/288] loss: 0.00427751, Est. epoch time left: 0:00:00.140924 s\n",
      "[74/100,   140/288] loss: 0.00045716, Est. epoch time left: 0:00:00.131052 s\n",
      "[74/100,   150/288] loss: 0.00377051, Est. epoch time left: 0:00:00.120453 s\n",
      "[74/100,   160/288] loss: 0.00488248, Est. epoch time left: 0:00:00.112274 s\n",
      "[74/100,   170/288] loss: 0.00308640, Est. epoch time left: 0:00:00.105725 s\n",
      "[74/100,   180/288] loss: 0.00415804, Est. epoch time left: 0:00:00.093186 s\n",
      "[74/100,   190/288] loss: 0.00326135, Est. epoch time left: 0:00:00.085843 s\n",
      "[74/100,   200/288] loss: 0.00221505, Est. epoch time left: 0:00:00.077084 s\n",
      "[74/100,   210/288] loss: 0.00261349, Est. epoch time left: 0:00:00.082179 s\n",
      "[74/100,   220/288] loss: 0.00625390, Est. epoch time left: 0:00:00.093578 s\n",
      "[74/100,   230/288] loss: 0.00513749, Est. epoch time left: 0:00:00.050833 s\n",
      "[74/100,   240/288] loss: 0.00134396, Est. epoch time left: 0:00:00.042023 s\n",
      "[74/100,   250/288] loss: 0.00517617, Est. epoch time left: 0:00:00.034192 s\n",
      "[74/100,   260/288] loss: 0.00969514, Est. epoch time left: 0:00:00.024220 s\n",
      "[74/100,   270/288] loss: 0.00505251, Est. epoch time left: 0:00:00.015969 s\n",
      "[74/100,   280/288] loss: 0.00457661, Est. epoch time left: 0:00:00.007103 s\n",
      "Validation...\n",
      "[74,    10] loss: 0.004\n",
      "[74,    20] loss: 0.003\n",
      "[74,    30] loss: 0.002\n",
      "[75/100,    10/288] loss: 0.00139501, Est. epoch time left: 0:00:00.255113 s\n",
      "[75/100,    20/288] loss: 0.00512657, Est. epoch time left: 0:00:00.241272 s\n",
      "[75/100,    30/288] loss: 0.00263379, Est. epoch time left: 0:00:00.236821 s\n",
      "[75/100,    40/288] loss: 0.00316334, Est. epoch time left: 0:00:00.215994 s\n",
      "[75/100,    50/288] loss: 0.00596182, Est. epoch time left: 0:00:00.207738 s\n",
      "[75/100,    60/288] loss: 0.00232531, Est. epoch time left: 0:00:00.283376 s\n",
      "[75/100,    70/288] loss: 0.00178991, Est. epoch time left: 0:00:00.409825 s\n",
      "[75/100,    80/288] loss: 0.00709928, Est. epoch time left: 0:00:00.257774 s\n",
      "[75/100,    90/288] loss: 0.00226248, Est. epoch time left: 0:00:00.202801 s\n",
      "[75/100,   100/288] loss: 0.00163972, Est. epoch time left: 0:00:00.203943 s\n",
      "[75/100,   110/288] loss: 0.00463389, Est. epoch time left: 0:00:00.173573 s\n",
      "[75/100,   120/288] loss: 0.00255667, Est. epoch time left: 0:00:00.152206 s\n",
      "[75/100,   130/288] loss: 0.00479465, Est. epoch time left: 0:00:00.137684 s\n",
      "[75/100,   140/288] loss: 0.00164753, Est. epoch time left: 0:00:00.129217 s\n",
      "[75/100,   150/288] loss: 0.00424026, Est. epoch time left: 0:00:00.184250 s\n",
      "[75/100,   160/288] loss: 0.00141162, Est. epoch time left: 0:00:00.112823 s\n",
      "[75/100,   170/288] loss: 0.00893342, Est. epoch time left: 0:00:00.130426 s\n",
      "[75/100,   180/288] loss: 0.00385880, Est. epoch time left: 0:00:00.118781 s\n",
      "[75/100,   190/288] loss: 0.00145630, Est. epoch time left: 0:00:00.107292 s\n",
      "[75/100,   200/288] loss: 0.00364874, Est. epoch time left: 0:00:00.075594 s\n",
      "[75/100,   210/288] loss: 0.00411515, Est. epoch time left: 0:00:00.067580 s\n",
      "[75/100,   220/288] loss: 0.00213668, Est. epoch time left: 0:00:00.059192 s\n",
      "[75/100,   230/288] loss: 0.00074769, Est. epoch time left: 0:00:00.078282 s\n",
      "[75/100,   240/288] loss: 0.00399368, Est. epoch time left: 0:00:00.056076 s\n",
      "[75/100,   250/288] loss: 0.00272650, Est. epoch time left: 0:00:00.042319 s\n",
      "[75/100,   260/288] loss: 0.00518840, Est. epoch time left: 0:00:00.028585 s\n",
      "[75/100,   270/288] loss: 0.00441382, Est. epoch time left: 0:00:00.018612 s\n",
      "[75/100,   280/288] loss: 0.00485829, Est. epoch time left: 0:00:00.007862 s\n",
      "Validation...\n",
      "[75,    10] loss: 0.003\n",
      "[75,    20] loss: 0.003\n",
      "[75,    30] loss: 0.004\n",
      "[76/100,    10/288] loss: 0.00696010, Est. epoch time left: 0:00:00.302040 s\n",
      "[76/100,    20/288] loss: 0.00169782, Est. epoch time left: 0:00:00.283316 s\n",
      "[76/100,    30/288] loss: 0.00149437, Est. epoch time left: 0:00:00.263456 s\n",
      "[76/100,    40/288] loss: 0.00366117, Est. epoch time left: 0:00:00.243902 s\n",
      "[76/100,    50/288] loss: 0.00096024, Est. epoch time left: 0:00:00.226180 s\n",
      "[76/100,    60/288] loss: 0.00422533, Est. epoch time left: 0:00:00.210480 s\n",
      "[76/100,    70/288] loss: 0.00238302, Est. epoch time left: 0:00:00.190125 s\n",
      "[76/100,    80/288] loss: 0.00321593, Est. epoch time left: 0:00:00.182743 s\n",
      "[76/100,    90/288] loss: 0.00337733, Est. epoch time left: 0:00:00.170606 s\n",
      "[76/100,   100/288] loss: 0.00250777, Est. epoch time left: 0:00:00.170192 s\n",
      "[76/100,   110/288] loss: 0.00127358, Est. epoch time left: 0:00:00.160205 s\n",
      "[76/100,   120/288] loss: 0.00178779, Est. epoch time left: 0:00:00.146078 s\n",
      "[76/100,   130/288] loss: 0.00372993, Est. epoch time left: 0:00:00.139681 s\n",
      "[76/100,   140/288] loss: 0.00509048, Est. epoch time left: 0:00:00.129076 s\n",
      "[76/100,   150/288] loss: 0.00531050, Est. epoch time left: 0:00:00.119894 s\n",
      "[76/100,   160/288] loss: 0.00410380, Est. epoch time left: 0:00:00.112183 s\n",
      "[76/100,   170/288] loss: 0.00500771, Est. epoch time left: 0:00:00.103953 s\n",
      "[76/100,   180/288] loss: 0.00265240, Est. epoch time left: 0:00:00.093985 s\n",
      "[76/100,   190/288] loss: 0.00339145, Est. epoch time left: 0:00:00.085236 s\n",
      "[76/100,   200/288] loss: 0.00208766, Est. epoch time left: 0:00:00.075174 s\n",
      "[76/100,   210/288] loss: 0.00096058, Est. epoch time left: 0:00:00.066911 s\n",
      "[76/100,   220/288] loss: 0.00540377, Est. epoch time left: 0:00:00.058916 s\n",
      "[76/100,   230/288] loss: 0.00375230, Est. epoch time left: 0:00:00.050349 s\n",
      "[76/100,   240/288] loss: 0.00256694, Est. epoch time left: 0:00:00.042377 s\n",
      "[76/100,   250/288] loss: 0.00302028, Est. epoch time left: 0:00:00.033458 s\n",
      "[76/100,   260/288] loss: 0.00568453, Est. epoch time left: 0:00:00.024093 s\n",
      "[76/100,   270/288] loss: 0.00199588, Est. epoch time left: 0:00:00.015625 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[76/100,   280/288] loss: 0.00357157, Est. epoch time left: 0:00:00.010715 s\n",
      "Validation...\n",
      "[76,    10] loss: 0.003\n",
      "[76,    20] loss: 0.003\n",
      "[76,    30] loss: 0.005\n",
      "[77/100,    10/288] loss: 0.00543461, Est. epoch time left: 0:00:00.271683 s\n",
      "[77/100,    20/288] loss: 0.00223904, Est. epoch time left: 0:00:00.236416 s\n",
      "[77/100,    30/288] loss: 0.00205079, Est. epoch time left: 0:00:00.226180 s\n",
      "[77/100,    40/288] loss: 0.00713967, Est. epoch time left: 0:00:00.270214 s\n",
      "[77/100,    50/288] loss: 0.00329744, Est. epoch time left: 0:00:00.356747 s\n",
      "[77/100,    60/288] loss: 0.00490599, Est. epoch time left: 0:00:00.203630 s\n",
      "[77/100,    70/288] loss: 0.00210264, Est. epoch time left: 0:00:00.190177 s\n",
      "[77/100,    80/288] loss: 0.00357243, Est. epoch time left: 0:00:00.184826 s\n",
      "[77/100,    90/288] loss: 0.00344772, Est. epoch time left: 0:00:00.175232 s\n",
      "[77/100,   100/288] loss: 0.00305220, Est. epoch time left: 0:00:00.260196 s\n",
      "[77/100,   110/288] loss: 0.00409479, Est. epoch time left: 0:00:00.225094 s\n",
      "[77/100,   120/288] loss: 0.00135272, Est. epoch time left: 0:00:00.145838 s\n",
      "[77/100,   130/288] loss: 0.00233422, Est. epoch time left: 0:00:00.141677 s\n",
      "[77/100,   140/288] loss: 0.00343899, Est. epoch time left: 0:00:00.129535 s\n",
      "[77/100,   150/288] loss: 0.00383629, Est. epoch time left: 0:00:00.119697 s\n",
      "[77/100,   160/288] loss: 0.00202642, Est. epoch time left: 0:00:00.111053 s\n",
      "[77/100,   170/288] loss: 0.00311282, Est. epoch time left: 0:00:00.103362 s\n",
      "[77/100,   180/288] loss: 0.00635779, Est. epoch time left: 0:00:00.094319 s\n",
      "[77/100,   190/288] loss: 0.00170470, Est. epoch time left: 0:00:00.086310 s\n",
      "[77/100,   200/288] loss: 0.00289626, Est. epoch time left: 0:00:00.077587 s\n",
      "[77/100,   210/288] loss: 0.00399854, Est. epoch time left: 0:00:00.068770 s\n",
      "[77/100,   220/288] loss: 0.00441499, Est. epoch time left: 0:00:00.060408 s\n",
      "[77/100,   230/288] loss: 0.00113544, Est. epoch time left: 0:00:00.062531 s\n",
      "[77/100,   240/288] loss: 0.00361422, Est. epoch time left: 0:00:00.051533 s\n",
      "[77/100,   250/288] loss: 0.00478628, Est. epoch time left: 0:00:00.034129 s\n",
      "[77/100,   260/288] loss: 0.00194670, Est. epoch time left: 0:00:00.024540 s\n",
      "[77/100,   270/288] loss: 0.00416291, Est. epoch time left: 0:00:00.022346 s\n",
      "[77/100,   280/288] loss: 0.00280958, Est. epoch time left: 0:00:00.009037 s\n",
      "Validation...\n",
      "[77,    10] loss: 0.004\n",
      "[77,    20] loss: 0.004\n",
      "[77,    30] loss: 0.001\n",
      "[78/100,    10/288] loss: 0.00426265, Est. epoch time left: 0:00:00.242520 s\n",
      "[78/100,    20/288] loss: 0.00909506, Est. epoch time left: 0:00:00.235649 s\n",
      "[78/100,    30/288] loss: 0.00235082, Est. epoch time left: 0:00:00.221812 s\n",
      "[78/100,    40/288] loss: 0.00224816, Est. epoch time left: 0:00:00.226282 s\n",
      "[78/100,    50/288] loss: 0.00164935, Est. epoch time left: 0:00:00.218122 s\n",
      "[78/100,    60/288] loss: 0.00184462, Est. epoch time left: 0:00:00.205261 s\n",
      "[78/100,    70/288] loss: 0.00597349, Est. epoch time left: 0:00:00.194907 s\n",
      "[78/100,    80/288] loss: 0.00386895, Est. epoch time left: 0:00:00.188644 s\n",
      "[78/100,    90/288] loss: 0.00231514, Est. epoch time left: 0:00:00.173060 s\n",
      "[78/100,   100/288] loss: 0.00372695, Est. epoch time left: 0:00:00.208650 s\n",
      "[78/100,   110/288] loss: 0.00154369, Est. epoch time left: 0:00:00.159993 s\n",
      "[78/100,   120/288] loss: 0.00373151, Est. epoch time left: 0:00:00.132099 s\n",
      "[78/100,   130/288] loss: 0.00391767, Est. epoch time left: 0:00:00.179008 s\n",
      "[78/100,   140/288] loss: 0.00132290, Est. epoch time left: 0:00:00.130170 s\n",
      "[78/100,   150/288] loss: 0.00349849, Est. epoch time left: 0:00:00.106404 s\n",
      "[78/100,   160/288] loss: 0.00193852, Est. epoch time left: 0:00:00.116211 s\n",
      "[78/100,   170/288] loss: 0.00272475, Est. epoch time left: 0:00:00.171979 s\n",
      "[78/100,   180/288] loss: 0.00279112, Est. epoch time left: 0:00:00.141543 s\n",
      "[78/100,   190/288] loss: 0.00211878, Est. epoch time left: 0:00:00.090516 s\n",
      "[78/100,   200/288] loss: 0.00363742, Est. epoch time left: 0:00:00.073517 s\n",
      "[78/100,   210/288] loss: 0.00307341, Est. epoch time left: 0:00:00.064939 s\n",
      "[78/100,   220/288] loss: 0.00235070, Est. epoch time left: 0:00:00.052966 s\n",
      "[78/100,   230/288] loss: 0.00775567, Est. epoch time left: 0:00:00.052464 s\n",
      "[78/100,   240/288] loss: 0.00299025, Est. epoch time left: 0:00:00.042698 s\n",
      "[78/100,   250/288] loss: 0.00463228, Est. epoch time left: 0:00:00.029472 s\n",
      "[78/100,   260/288] loss: 0.00360650, Est. epoch time left: 0:00:00.024453 s\n",
      "[78/100,   270/288] loss: 0.00413117, Est. epoch time left: 0:00:00.013754 s\n",
      "[78/100,   280/288] loss: 0.00263840, Est. epoch time left: 0:00:00.005428 s\n",
      "Validation...\n",
      "[78,    10] loss: 0.002\n",
      "[78,    20] loss: 0.005\n",
      "[78,    30] loss: 0.003\n",
      "[79/100,    10/288] loss: 0.00496357, Est. epoch time left: 0:00:00.209910 s\n",
      "[79/100,    20/288] loss: 0.00253455, Est. epoch time left: 0:00:00.195650 s\n",
      "[79/100,    30/288] loss: 0.00322574, Est. epoch time left: 0:00:00.217937 s\n",
      "[79/100,    40/288] loss: 0.00136599, Est. epoch time left: 0:00:00.222557 s\n",
      "[79/100,    50/288] loss: 0.00175824, Est. epoch time left: 0:00:00.183509 s\n",
      "[79/100,    60/288] loss: 0.00478804, Est. epoch time left: 0:00:00.167318 s\n",
      "[79/100,    70/288] loss: 0.00304831, Est. epoch time left: 0:00:00.163098 s\n",
      "[79/100,    80/288] loss: 0.00193964, Est. epoch time left: 0:00:00.303299 s\n",
      "[79/100,    90/288] loss: 0.00141550, Est. epoch time left: 0:00:00.231172 s\n",
      "[79/100,   100/288] loss: 0.00172315, Est. epoch time left: 0:00:00.200178 s\n",
      "[79/100,   110/288] loss: 0.00534897, Est. epoch time left: 0:00:00.148450 s\n",
      "[79/100,   120/288] loss: 0.00278532, Est. epoch time left: 0:00:00.125090 s\n",
      "[79/100,   130/288] loss: 0.00232491, Est. epoch time left: 0:00:00.114367 s\n",
      "[79/100,   140/288] loss: 0.00111509, Est. epoch time left: 0:00:00.126747 s\n",
      "[79/100,   150/288] loss: 0.00166716, Est. epoch time left: 0:00:00.118841 s\n",
      "[79/100,   160/288] loss: 0.00238485, Est. epoch time left: 0:00:00.171448 s\n",
      "[79/100,   170/288] loss: 0.00612200, Est. epoch time left: 0:00:00.138810 s\n",
      "[79/100,   180/288] loss: 0.00338364, Est. epoch time left: 0:00:00.119399 s\n",
      "[79/100,   190/288] loss: 0.00358390, Est. epoch time left: 0:00:00.106498 s\n",
      "[79/100,   200/288] loss: 0.00436756, Est. epoch time left: 0:00:00.094854 s\n",
      "[79/100,   210/288] loss: 0.00311882, Est. epoch time left: 0:00:00.085675 s\n",
      "[79/100,   220/288] loss: 0.00394076, Est. epoch time left: 0:00:00.073588 s\n",
      "[79/100,   230/288] loss: 0.00476571, Est. epoch time left: 0:00:00.065062 s\n",
      "[79/100,   240/288] loss: 0.00708956, Est. epoch time left: 0:00:00.035763 s\n",
      "[79/100,   250/288] loss: 0.00269239, Est. epoch time left: 0:00:00.031818 s\n",
      "[79/100,   260/288] loss: 0.00495188, Est. epoch time left: 0:00:00.023118 s\n",
      "[79/100,   270/288] loss: 0.00327467, Est. epoch time left: 0:00:00.016037 s\n",
      "[79/100,   280/288] loss: 0.00510612, Est. epoch time left: 0:00:00.009138 s\n",
      "Validation...\n",
      "[79,    10] loss: 0.001\n",
      "[79,    20] loss: 0.006\n",
      "[79,    30] loss: 0.001\n",
      "[80/100,    10/288] loss: 0.00161243, Est. epoch time left: 0:00:00.236091 s\n",
      "[80/100,    20/288] loss: 0.00412094, Est. epoch time left: 0:00:00.213797 s\n",
      "[80/100,    30/288] loss: 0.00161089, Est. epoch time left: 0:00:00.228825 s\n",
      "[80/100,    40/288] loss: 0.00394207, Est. epoch time left: 0:00:00.275713 s\n",
      "[80/100,    50/288] loss: 0.00473147, Est. epoch time left: 0:00:00.191226 s\n",
      "[80/100,    60/288] loss: 0.00213748, Est. epoch time left: 0:00:00.182158 s\n",
      "[80/100,    70/288] loss: 0.00276018, Est. epoch time left: 0:00:00.172246 s\n",
      "[80/100,    80/288] loss: 0.00228883, Est. epoch time left: 0:00:00.166477 s\n",
      "[80/100,    90/288] loss: 0.00432444, Est. epoch time left: 0:00:00.180850 s\n",
      "[80/100,   100/288] loss: 0.00766894, Est. epoch time left: 0:00:00.171492 s\n",
      "[80/100,   110/288] loss: 0.00384403, Est. epoch time left: 0:00:00.157659 s\n",
      "[80/100,   120/288] loss: 0.00503203, Est. epoch time left: 0:00:00.119242 s\n",
      "[80/100,   130/288] loss: 0.00217544, Est. epoch time left: 0:00:00.127099 s\n",
      "[80/100,   140/288] loss: 0.00268637, Est. epoch time left: 0:00:00.132569 s\n",
      "[80/100,   150/288] loss: 0.00347541, Est. epoch time left: 0:00:00.119697 s\n",
      "[80/100,   160/288] loss: 0.00284981, Est. epoch time left: 0:00:00.114685 s\n",
      "[80/100,   170/288] loss: 0.00225630, Est. epoch time left: 0:00:00.106457 s\n",
      "[80/100,   180/288] loss: 0.00475152, Est. epoch time left: 0:00:00.086466 s\n",
      "[80/100,   190/288] loss: 0.00075149, Est. epoch time left: 0:00:00.089909 s\n",
      "[80/100,   200/288] loss: 0.00398728, Est. epoch time left: 0:00:00.074839 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[80/100,   210/288] loss: 0.00366339, Est. epoch time left: 0:00:00.068454 s\n",
      "[80/100,   220/288] loss: 0.00292399, Est. epoch time left: 0:00:00.075907 s\n",
      "[80/100,   230/288] loss: 0.00179669, Est. epoch time left: 0:00:00.062656 s\n",
      "[80/100,   240/288] loss: 0.00491870, Est. epoch time left: 0:00:00.078358 s\n",
      "[80/100,   250/288] loss: 0.00354762, Est. epoch time left: 0:00:00.047112 s\n",
      "[80/100,   260/288] loss: 0.00271772, Est. epoch time left: 0:00:00.026055 s\n",
      "[80/100,   270/288] loss: 0.00314373, Est. epoch time left: 0:00:00.015553 s\n",
      "[80/100,   280/288] loss: 0.00459386, Est. epoch time left: 0:00:00.007221 s\n",
      "Validation...\n",
      "[80,    10] loss: 0.001\n",
      "[80,    20] loss: 0.007\n",
      "[80,    30] loss: 0.001\n",
      "[81/100,    10/288] loss: 0.00721611, Est. epoch time left: 0:00:00.229595 s\n",
      "[81/100,    20/288] loss: 0.00263395, Est. epoch time left: 0:00:00.228876 s\n",
      "[81/100,    30/288] loss: 0.00320774, Est. epoch time left: 0:00:00.225380 s\n",
      "[81/100,    40/288] loss: 0.00299971, Est. epoch time left: 0:00:00.182350 s\n",
      "[81/100,    50/288] loss: 0.00756720, Est. epoch time left: 0:00:00.185268 s\n",
      "[81/100,    60/288] loss: 0.00160561, Est. epoch time left: 0:00:00.179006 s\n",
      "[81/100,    70/288] loss: 0.00604647, Est. epoch time left: 0:00:00.188826 s\n",
      "[81/100,    80/288] loss: 0.00064711, Est. epoch time left: 0:00:00.250385 s\n",
      "[81/100,    90/288] loss: 0.00242762, Est. epoch time left: 0:00:00.157199 s\n",
      "[81/100,   100/288] loss: 0.00165868, Est. epoch time left: 0:00:00.148542 s\n",
      "[81/100,   110/288] loss: 0.00351294, Est. epoch time left: 0:00:00.202050 s\n",
      "[81/100,   120/288] loss: 0.00364912, Est. epoch time left: 0:00:00.182808 s\n",
      "[81/100,   130/288] loss: 0.00237873, Est. epoch time left: 0:00:00.134595 s\n",
      "[81/100,   140/288] loss: 0.00139795, Est. epoch time left: 0:00:00.129323 s\n",
      "[81/100,   150/288] loss: 0.00275480, Est. epoch time left: 0:00:00.120519 s\n",
      "[81/100,   160/288] loss: 0.00510785, Est. epoch time left: 0:00:00.111633 s\n",
      "[81/100,   170/288] loss: 0.00369970, Est. epoch time left: 0:00:00.103362 s\n",
      "[81/100,   180/288] loss: 0.00217489, Est. epoch time left: 0:00:00.100705 s\n",
      "[81/100,   190/288] loss: 0.00324795, Est. epoch time left: 0:00:00.089395 s\n",
      "[81/100,   200/288] loss: 0.00222026, Est. epoch time left: 0:00:00.077587 s\n",
      "[81/100,   210/288] loss: 0.00138137, Est. epoch time left: 0:00:00.068882 s\n",
      "[81/100,   220/288] loss: 0.00277547, Est. epoch time left: 0:00:00.059613 s\n",
      "[81/100,   230/288] loss: 0.00422090, Est. epoch time left: 0:00:00.051248 s\n",
      "[81/100,   240/288] loss: 0.00681451, Est. epoch time left: 0:00:00.041084 s\n",
      "[81/100,   250/288] loss: 0.00425679, Est. epoch time left: 0:00:00.033023 s\n",
      "[81/100,   260/288] loss: 0.00053126, Est. epoch time left: 0:00:00.024246 s\n",
      "[81/100,   270/288] loss: 0.00261251, Est. epoch time left: 0:00:00.029775 s\n",
      "[81/100,   280/288] loss: 0.00554892, Est. epoch time left: 0:00:00.010599 s\n",
      "Validation...\n",
      "[81,    10] loss: 0.001\n",
      "[81,    20] loss: 0.004\n",
      "[81,    30] loss: 0.004\n",
      "[82/100,    10/288] loss: 0.00362747, Est. epoch time left: 0:00:00.376472 s\n",
      "[82/100,    20/288] loss: 0.00599245, Est. epoch time left: 0:00:00.331110 s\n",
      "[82/100,    30/288] loss: 0.00533789, Est. epoch time left: 0:00:00.320477 s\n",
      "[82/100,    40/288] loss: 0.00469998, Est. epoch time left: 0:00:00.264715 s\n",
      "[82/100,    50/288] loss: 0.00374775, Est. epoch time left: 0:00:00.242522 s\n",
      "[82/100,    60/288] loss: 0.00050025, Est. epoch time left: 0:00:00.223200 s\n",
      "[82/100,    70/288] loss: 0.00318072, Est. epoch time left: 0:00:00.214918 s\n",
      "[82/100,    80/288] loss: 0.00228624, Est. epoch time left: 0:00:00.202381 s\n",
      "[82/100,    90/288] loss: 0.00180629, Est. epoch time left: 0:00:00.179717 s\n",
      "[82/100,   100/288] loss: 0.00471419, Est. epoch time left: 0:00:00.166606 s\n",
      "[82/100,   110/288] loss: 0.00298861, Est. epoch time left: 0:00:00.155367 s\n",
      "[82/100,   120/288] loss: 0.00362364, Est. epoch time left: 0:00:00.148161 s\n",
      "[82/100,   130/288] loss: 0.00714619, Est. epoch time left: 0:00:00.136818 s\n",
      "[82/100,   140/288] loss: 0.00186735, Est. epoch time left: 0:00:00.130876 s\n",
      "[82/100,   150/288] loss: 0.00090133, Est. epoch time left: 0:00:00.119894 s\n",
      "[82/100,   160/288] loss: 0.00385798, Est. epoch time left: 0:00:00.190033 s\n",
      "[82/100,   170/288] loss: 0.00438200, Est. epoch time left: 0:00:00.160585 s\n",
      "[82/100,   180/288] loss: 0.00284217, Est. epoch time left: 0:00:00.134514 s\n",
      "[82/100,   190/288] loss: 0.00286026, Est. epoch time left: 0:00:00.114839 s\n",
      "[82/100,   200/288] loss: 0.00629284, Est. epoch time left: 0:00:00.135662 s\n",
      "[82/100,   210/288] loss: 0.00152370, Est. epoch time left: 0:00:00.105499 s\n",
      "[82/100,   220/288] loss: 0.00265549, Est. epoch time left: 0:00:00.061299 s\n",
      "[82/100,   230/288] loss: 0.00071498, Est. epoch time left: 0:00:00.050888 s\n",
      "[82/100,   240/288] loss: 0.00311691, Est. epoch time left: 0:00:00.041611 s\n",
      "[82/100,   250/288] loss: 0.00306813, Est. epoch time left: 0:00:00.034428 s\n",
      "[82/100,   260/288] loss: 0.00437978, Est. epoch time left: 0:00:00.026342 s\n",
      "[82/100,   270/288] loss: 0.00354686, Est. epoch time left: 0:00:00.019256 s\n",
      "[82/100,   280/288] loss: 0.00406216, Est. epoch time left: 0:00:00.008602 s\n",
      "Validation...\n",
      "[82,    10] loss: 0.002\n",
      "[82,    20] loss: 0.004\n",
      "[82,    30] loss: 0.003\n",
      "[83/100,    10/288] loss: 0.00282603, Est. epoch time left: 0:00:00.242785 s\n",
      "[83/100,    20/288] loss: 0.00465511, Est. epoch time left: 0:00:00.232071 s\n",
      "[83/100,    30/288] loss: 0.00565495, Est. epoch time left: 0:00:00.228702 s\n",
      "[83/100,    40/288] loss: 0.00212513, Est. epoch time left: 0:00:00.219128 s\n",
      "[83/100,    50/288] loss: 0.00145038, Est. epoch time left: 0:00:00.217044 s\n",
      "[83/100,    60/288] loss: 0.00254817, Est. epoch time left: 0:00:00.205479 s\n",
      "[83/100,    70/288] loss: 0.00423896, Est. epoch time left: 0:00:00.189970 s\n",
      "[83/100,    80/288] loss: 0.00179551, Est. epoch time left: 0:00:00.182297 s\n",
      "[83/100,    90/288] loss: 0.00301248, Est. epoch time left: 0:00:00.173532 s\n",
      "[83/100,   100/288] loss: 0.00295720, Est. epoch time left: 0:00:00.170999 s\n",
      "[83/100,   110/288] loss: 0.00124377, Est. epoch time left: 0:00:00.162752 s\n",
      "[83/100,   120/288] loss: 0.00423176, Est. epoch time left: 0:00:00.149002 s\n",
      "[83/100,   130/288] loss: 0.00669729, Est. epoch time left: 0:00:00.138927 s\n",
      "[83/100,   140/288] loss: 0.00314911, Est. epoch time left: 0:00:00.128159 s\n",
      "[83/100,   150/288] loss: 0.00663374, Est. epoch time left: 0:00:00.124204 s\n",
      "[83/100,   160/288] loss: 0.00400772, Est. epoch time left: 0:00:00.183685 s\n",
      "[83/100,   170/288] loss: 0.00061233, Est. epoch time left: 0:00:00.146012 s\n",
      "[83/100,   180/288] loss: 0.00343275, Est. epoch time left: 0:00:00.163070 s\n",
      "[83/100,   190/288] loss: 0.00110367, Est. epoch time left: 0:00:00.134980 s\n",
      "[83/100,   200/288] loss: 0.00471908, Est. epoch time left: 0:00:00.115898 s\n",
      "[83/100,   210/288] loss: 0.00536089, Est. epoch time left: 0:00:00.095140 s\n",
      "[83/100,   220/288] loss: 0.00351998, Est. epoch time left: 0:00:00.082019 s\n",
      "[83/100,   230/288] loss: 0.00136113, Est. epoch time left: 0:00:00.051828 s\n",
      "[83/100,   240/288] loss: 0.00513678, Est. epoch time left: 0:00:00.054703 s\n",
      "[83/100,   250/288] loss: 0.00315108, Est. epoch time left: 0:00:00.041059 s\n",
      "[83/100,   260/288] loss: 0.00189101, Est. epoch time left: 0:00:00.028512 s\n",
      "[83/100,   270/288] loss: 0.00417389, Est. epoch time left: 0:00:00.017007 s\n",
      "[83/100,   280/288] loss: 0.00409331, Est. epoch time left: 0:00:00.007475 s\n",
      "Validation...\n",
      "[83,    10] loss: 0.004\n",
      "[83,    20] loss: 0.007\n",
      "[83,    30] loss: 0.005\n",
      "[84/100,    10/288] loss: 0.00433487, Est. epoch time left: 0:00:00.274865 s\n",
      "[84/100,    20/288] loss: 0.00350292, Est. epoch time left: 0:00:00.247023 s\n",
      "[84/100,    30/288] loss: 0.00395691, Est. epoch time left: 0:00:00.236944 s\n",
      "[84/100,    40/288] loss: 0.00256666, Est. epoch time left: 0:00:00.233496 s\n",
      "[84/100,    50/288] loss: 0.00691398, Est. epoch time left: 0:00:00.214321 s\n",
      "[84/100,    60/288] loss: 0.00192696, Est. epoch time left: 0:00:00.206131 s\n",
      "[84/100,    70/288] loss: 0.00166195, Est. epoch time left: 0:00:00.191685 s\n",
      "[84/100,    80/288] loss: 0.00384394, Est. epoch time left: 0:00:00.181900 s\n",
      "[84/100,    90/288] loss: 0.00469224, Est. epoch time left: 0:00:00.173344 s\n",
      "[84/100,   100/288] loss: 0.00205560, Est. epoch time left: 0:00:00.163917 s\n",
      "[84/100,   110/288] loss: 0.00123346, Est. epoch time left: 0:00:00.152566 s\n",
      "[84/100,   120/288] loss: 0.00579652, Est. epoch time left: 0:00:00.146399 s\n",
      "[84/100,   130/288] loss: 0.00469753, Est. epoch time left: 0:00:00.140585 s\n",
      "[84/100,   140/288] loss: 0.00067565, Est. epoch time left: 0:00:00.131617 s\n",
      "[84/100,   150/288] loss: 0.00323573, Est. epoch time left: 0:00:00.120782 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[84/100,   160/288] loss: 0.00328984, Est. epoch time left: 0:00:00.110718 s\n",
      "[84/100,   170/288] loss: 0.00291560, Est. epoch time left: 0:00:00.104206 s\n",
      "[84/100,   180/288] loss: 0.00308671, Est. epoch time left: 0:00:00.094448 s\n",
      "[84/100,   190/288] loss: 0.00471314, Est. epoch time left: 0:00:00.086497 s\n",
      "[84/100,   200/288] loss: 0.00146459, Est. epoch time left: 0:00:00.077000 s\n",
      "[84/100,   210/288] loss: 0.00322635, Est. epoch time left: 0:00:00.067896 s\n",
      "[84/100,   220/288] loss: 0.00202605, Est. epoch time left: 0:00:00.086980 s\n",
      "[84/100,   230/288] loss: 0.00284152, Est. epoch time left: 0:00:00.065394 s\n",
      "[84/100,   240/288] loss: 0.00431404, Est. epoch time left: 0:00:00.051304 s\n",
      "[84/100,   250/288] loss: 0.00415640, Est. epoch time left: 0:00:00.037454 s\n",
      "[84/100,   260/288] loss: 0.00403909, Est. epoch time left: 0:00:00.024507 s\n",
      "[84/100,   270/288] loss: 0.00304093, Est. epoch time left: 0:00:00.015763 s\n",
      "[84/100,   280/288] loss: 0.00364447, Est. epoch time left: 0:00:00.007048 s\n",
      "Validation...\n",
      "[84,    10] loss: 0.002\n",
      "[84,    20] loss: 0.005\n",
      "[84,    30] loss: 0.004\n",
      "[85/100,    10/288] loss: 0.00298439, Est. epoch time left: 0:00:00.296008 s\n",
      "[85/100,    20/288] loss: 0.00157879, Est. epoch time left: 0:00:00.277118 s\n",
      "[85/100,    30/288] loss: 0.00307159, Est. epoch time left: 0:00:00.329643 s\n",
      "[85/100,    40/288] loss: 0.00628650, Est. epoch time left: 0:00:00.297827 s\n",
      "[85/100,    50/288] loss: 0.00334252, Est. epoch time left: 0:00:00.281789 s\n",
      "[85/100,    60/288] loss: 0.00446233, Est. epoch time left: 0:00:00.241247 s\n",
      "[85/100,    70/288] loss: 0.00145335, Est. epoch time left: 0:00:00.224429 s\n",
      "[85/100,    80/288] loss: 0.00237315, Est. epoch time left: 0:00:00.203175 s\n",
      "[85/100,    90/288] loss: 0.00160735, Est. epoch time left: 0:00:00.180614 s\n",
      "[85/100,   100/288] loss: 0.00241786, Est. epoch time left: 0:00:00.234602 s\n",
      "[85/100,   110/288] loss: 0.00425927, Est. epoch time left: 0:00:00.199673 s\n",
      "[85/100,   120/288] loss: 0.00550410, Est. epoch time left: 0:00:00.213329 s\n",
      "[85/100,   130/288] loss: 0.00253473, Est. epoch time left: 0:00:00.154523 s\n",
      "[85/100,   140/288] loss: 0.00214461, Est. epoch time left: 0:00:00.141356 s\n",
      "[85/100,   150/288] loss: 0.00476414, Est. epoch time left: 0:00:00.119631 s\n",
      "[85/100,   160/288] loss: 0.00355304, Est. epoch time left: 0:00:00.112183 s\n",
      "[85/100,   170/288] loss: 0.00347535, Est. epoch time left: 0:00:00.104319 s\n",
      "[85/100,   180/288] loss: 0.00358161, Est. epoch time left: 0:00:00.096070 s\n",
      "[85/100,   190/288] loss: 0.00199970, Est. epoch time left: 0:00:00.105376 s\n",
      "[85/100,   200/288] loss: 0.00116925, Est. epoch time left: 0:00:00.094770 s\n",
      "[85/100,   210/288] loss: 0.00176571, Est. epoch time left: 0:00:00.084206 s\n",
      "[85/100,   220/288] loss: 0.00761480, Est. epoch time left: 0:00:00.072794 s\n",
      "[85/100,   230/288] loss: 0.00563341, Est. epoch time left: 0:00:00.062946 s\n",
      "[85/100,   240/288] loss: 0.00093713, Est. epoch time left: 0:00:00.051636 s\n",
      "[85/100,   250/288] loss: 0.00509243, Est. epoch time left: 0:00:00.042627 s\n",
      "[85/100,   260/288] loss: 0.00170777, Est. epoch time left: 0:00:00.030148 s\n",
      "[85/100,   270/288] loss: 0.00500593, Est. epoch time left: 0:00:00.019359 s\n",
      "[85/100,   280/288] loss: 0.00353984, Est. epoch time left: 0:00:00.008638 s\n",
      "Validation...\n",
      "[85,    10] loss: 0.002\n",
      "[85,    20] loss: 0.002\n",
      "[85,    30] loss: 0.002\n",
      "[86/100,    10/288] loss: 0.00147956, Est. epoch time left: 0:00:00.312379 s\n",
      "[86/100,    20/288] loss: 0.00421960, Est. epoch time left: 0:00:00.495004 s\n",
      "[86/100,    30/288] loss: 0.00461078, Est. epoch time left: 0:00:00.279941 s\n",
      "[86/100,    40/288] loss: 0.00400321, Est. epoch time left: 0:00:00.266844 s\n",
      "[86/100,    50/288] loss: 0.00255411, Est. epoch time left: 0:00:00.259772 s\n",
      "[86/100,    60/288] loss: 0.00377555, Est. epoch time left: 0:00:00.245650 s\n",
      "[86/100,    70/288] loss: 0.00554937, Est. epoch time left: 0:00:00.233837 s\n",
      "[86/100,    80/288] loss: 0.00142663, Est. epoch time left: 0:00:00.294125 s\n",
      "[86/100,    90/288] loss: 0.00154048, Est. epoch time left: 0:00:00.244579 s\n",
      "[86/100,   100/288] loss: 0.00185671, Est. epoch time left: 0:00:00.233840 s\n",
      "[86/100,   110/288] loss: 0.00370858, Est. epoch time left: 0:00:00.198612 s\n",
      "[86/100,   120/288] loss: 0.00459327, Est. epoch time left: 0:00:00.177721 s\n",
      "[86/100,   130/288] loss: 0.00368365, Est. epoch time left: 0:00:00.162886 s\n",
      "[86/100,   140/288] loss: 0.00371013, Est. epoch time left: 0:00:00.151694 s\n",
      "[86/100,   150/288] loss: 0.00551190, Est. epoch time left: 0:00:00.153026 s\n",
      "[86/100,   160/288] loss: 0.00663504, Est. epoch time left: 0:00:00.124847 s\n",
      "[86/100,   170/288] loss: 0.00282515, Est. epoch time left: 0:00:00.112393 s\n",
      "[86/100,   180/288] loss: 0.00170377, Est. epoch time left: 0:00:00.102868 s\n",
      "[86/100,   190/288] loss: 0.00307531, Est. epoch time left: 0:00:00.090703 s\n",
      "[86/100,   200/288] loss: 0.00202340, Est. epoch time left: 0:00:00.080105 s\n",
      "[86/100,   210/288] loss: 0.00313289, Est. epoch time left: 0:00:00.067934 s\n",
      "[86/100,   220/288] loss: 0.00276920, Est. epoch time left: 0:00:00.075696 s\n",
      "[86/100,   230/288] loss: 0.00488091, Est. epoch time left: 0:00:00.066334 s\n",
      "[86/100,   240/288] loss: 0.00454628, Est. epoch time left: 0:00:00.047699 s\n",
      "[86/100,   250/288] loss: 0.00190228, Est. epoch time left: 0:00:00.037363 s\n",
      "[86/100,   260/288] loss: 0.00287692, Est. epoch time left: 0:00:00.025381 s\n",
      "[86/100,   270/288] loss: 0.00420954, Est. epoch time left: 0:00:00.015651 s\n",
      "[86/100,   280/288] loss: 0.00505788, Est. epoch time left: 0:00:00.007116 s\n",
      "Validation...\n",
      "[86,    10] loss: 0.002\n",
      "[86,    20] loss: 0.004\n",
      "[86,    30] loss: 0.003\n",
      "[87/100,    10/288] loss: 0.00247088, Est. epoch time left: 0:00:00.212230 s\n",
      "[87/100,    20/288] loss: 0.00369015, Est. epoch time left: 0:00:00.193989 s\n",
      "[87/100,    30/288] loss: 0.00251257, Est. epoch time left: 0:00:00.211601 s\n",
      "[87/100,    40/288] loss: 0.00439961, Est. epoch time left: 0:00:00.272461 s\n",
      "[87/100,    50/288] loss: 0.00492358, Est. epoch time left: 0:00:00.210235 s\n",
      "[87/100,    60/288] loss: 0.00369329, Est. epoch time left: 0:00:00.202000 s\n",
      "[87/100,    70/288] loss: 0.00215124, Est. epoch time left: 0:00:00.192880 s\n",
      "[87/100,    80/288] loss: 0.00353385, Est. epoch time left: 0:00:00.180363 s\n",
      "[87/100,    90/288] loss: 0.00321620, Est. epoch time left: 0:00:00.171880 s\n",
      "[87/100,   100/288] loss: 0.00381881, Est. epoch time left: 0:00:00.164096 s\n",
      "[87/100,   110/288] loss: 0.00377517, Est. epoch time left: 0:00:00.154901 s\n",
      "[87/100,   120/288] loss: 0.00128174, Est. epoch time left: 0:00:00.146639 s\n",
      "[87/100,   130/288] loss: 0.00138330, Est. epoch time left: 0:00:00.137534 s\n",
      "[87/100,   140/288] loss: 0.00201324, Est. epoch time left: 0:00:00.130664 s\n",
      "[87/100,   150/288] loss: 0.00146807, Est. epoch time left: 0:00:00.121835 s\n",
      "[87/100,   160/288] loss: 0.00392426, Est. epoch time left: 0:00:00.113953 s\n",
      "[87/100,   170/288] loss: 0.00135751, Est. epoch time left: 0:00:00.103868 s\n",
      "[87/100,   180/288] loss: 0.00499635, Est. epoch time left: 0:00:00.107065 s\n",
      "[87/100,   190/288] loss: 0.00241289, Est. epoch time left: 0:00:00.106077 s\n",
      "[87/100,   200/288] loss: 0.00719768, Est. epoch time left: 0:00:00.085182 s\n",
      "[87/100,   210/288] loss: 0.00251416, Est. epoch time left: 0:00:00.081416 s\n",
      "[87/100,   220/288] loss: 0.00574100, Est. epoch time left: 0:00:00.075534 s\n",
      "[87/100,   230/288] loss: 0.00464604, Est. epoch time left: 0:00:00.078932 s\n",
      "[87/100,   240/288] loss: 0.00201176, Est. epoch time left: 0:00:00.052654 s\n",
      "[87/100,   250/288] loss: 0.00621381, Est. epoch time left: 0:00:00.038070 s\n",
      "[87/100,   260/288] loss: 0.00676668, Est. epoch time left: 0:00:00.026142 s\n",
      "[87/100,   270/288] loss: 0.00353817, Est. epoch time left: 0:00:00.015990 s\n",
      "[87/100,   280/288] loss: 0.00484991, Est. epoch time left: 0:00:00.007002 s\n",
      "Validation...\n",
      "[87,    10] loss: 0.004\n",
      "[87,    20] loss: 0.001\n",
      "[87,    30] loss: 0.004\n",
      "[88/100,    10/288] loss: 0.00344430, Est. epoch time left: 0:00:00.258361 s\n",
      "[88/100,    20/288] loss: 0.00255136, Est. epoch time left: 0:00:00.241400 s\n",
      "[88/100,    30/288] loss: 0.00097165, Est. epoch time left: 0:00:00.234853 s\n",
      "[88/100,    40/288] loss: 0.00260123, Est. epoch time left: 0:00:00.206060 s\n",
      "[88/100,    50/288] loss: 0.00120167, Est. epoch time left: 0:00:00.203653 s\n",
      "[88/100,    60/288] loss: 0.00937753, Est. epoch time left: 0:00:00.164111 s\n",
      "[88/100,    70/288] loss: 0.00494747, Est. epoch time left: 0:00:00.203431 s\n",
      "[88/100,    80/288] loss: 0.00089590, Est. epoch time left: 0:00:00.190182 s\n",
      "[88/100,    90/288] loss: 0.00244329, Est. epoch time left: 0:00:00.183635 s\n",
      "[88/100,   100/288] loss: 0.00340400, Est. epoch time left: 0:00:00.169699 s\n",
      "[88/100,   110/288] loss: 0.00357063, Est. epoch time left: 0:00:00.157617 s\n",
      "[88/100,   120/288] loss: 0.00207911, Est. epoch time left: 0:00:00.150364 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[88/100,   130/288] loss: 0.00112593, Est. epoch time left: 0:00:00.140849 s\n",
      "[88/100,   140/288] loss: 0.00286757, Est. epoch time left: 0:00:00.133663 s\n",
      "[88/100,   150/288] loss: 0.00364459, Est. epoch time left: 0:00:00.126277 s\n",
      "[88/100,   160/288] loss: 0.00519891, Est. epoch time left: 0:00:00.110016 s\n",
      "[88/100,   170/288] loss: 0.00420599, Est. epoch time left: 0:00:00.099705 s\n",
      "[88/100,   180/288] loss: 0.00287512, Est. epoch time left: 0:00:00.087187 s\n",
      "[88/100,   190/288] loss: 0.00595972, Est. epoch time left: 0:00:00.065959 s\n",
      "[88/100,   200/288] loss: 0.00198871, Est. epoch time left: 0:00:00.059355 s\n",
      "[88/100,   210/288] loss: 0.00187009, Est. epoch time left: 0:00:00.065237 s\n",
      "[88/100,   220/288] loss: 0.00237207, Est. epoch time left: 0:00:00.048751 s\n",
      "[88/100,   230/288] loss: 0.00335199, Est. epoch time left: 0:00:00.040005 s\n",
      "[88/100,   240/288] loss: 0.00378372, Est. epoch time left: 0:00:00.034355 s\n",
      "[88/100,   250/288] loss: 0.00424080, Est. epoch time left: 0:00:00.029689 s\n",
      "[88/100,   260/288] loss: 0.00246626, Est. epoch time left: 0:00:00.021008 s\n",
      "[88/100,   270/288] loss: 0.00096579, Est. epoch time left: 0:00:00.013956 s\n",
      "[88/100,   280/288] loss: 0.00483481, Est. epoch time left: 0:00:00.006081 s\n",
      "Validation...\n",
      "[88,    10] loss: 0.004\n",
      "[88,    20] loss: 0.002\n",
      "[88,    30] loss: 0.002\n",
      "[89/100,    10/288] loss: 0.00228186, Est. epoch time left: 0:00:00.261211 s\n",
      "[89/100,    20/288] loss: 0.00496670, Est. epoch time left: 0:00:00.239036 s\n",
      "[89/100,    30/288] loss: 0.00168167, Est. epoch time left: 0:00:00.223658 s\n",
      "[89/100,    40/288] loss: 0.00136978, Est. epoch time left: 0:00:00.216763 s\n",
      "[89/100,    50/288] loss: 0.00423658, Est. epoch time left: 0:00:00.209214 s\n",
      "[89/100,    60/288] loss: 0.00280059, Est. epoch time left: 0:00:00.200315 s\n",
      "[89/100,    70/288] loss: 0.00267640, Est. epoch time left: 0:00:00.188826 s\n",
      "[89/100,    80/288] loss: 0.00549998, Est. epoch time left: 0:00:00.181255 s\n",
      "[89/100,    90/288] loss: 0.00174311, Est. epoch time left: 0:00:00.266719 s\n",
      "[89/100,   100/288] loss: 0.00359256, Est. epoch time left: 0:00:00.212549 s\n",
      "[89/100,   110/288] loss: 0.00266068, Est. epoch time left: 0:00:00.187790 s\n",
      "[89/100,   120/288] loss: 0.00198471, Est. epoch time left: 0:00:00.154449 s\n",
      "[89/100,   130/288] loss: 0.00647707, Est. epoch time left: 0:00:00.145407 s\n",
      "[89/100,   140/288] loss: 0.00361605, Est. epoch time left: 0:00:00.130382 s\n",
      "[89/100,   150/288] loss: 0.00182746, Est. epoch time left: 0:00:00.124533 s\n",
      "[89/100,   160/288] loss: 0.00180458, Est. epoch time left: 0:00:00.110413 s\n",
      "[89/100,   170/288] loss: 0.00504460, Est. epoch time left: 0:00:00.100858 s\n",
      "[89/100,   180/288] loss: 0.00583827, Est. epoch time left: 0:00:00.094628 s\n",
      "[89/100,   190/288] loss: 0.00333791, Est. epoch time left: 0:00:00.086684 s\n",
      "[89/100,   200/288] loss: 0.00199945, Est. epoch time left: 0:00:00.078007 s\n",
      "[89/100,   210/288] loss: 0.00562808, Est. epoch time left: 0:00:00.069031 s\n",
      "[89/100,   220/288] loss: 0.00454439, Est. epoch time left: 0:00:00.071870 s\n",
      "[89/100,   230/288] loss: 0.00376021, Est. epoch time left: 0:00:00.051289 s\n",
      "[89/100,   240/288] loss: 0.00235890, Est. epoch time left: 0:00:00.059704 s\n",
      "[89/100,   250/288] loss: 0.00625728, Est. epoch time left: 0:00:00.103845 s\n",
      "[89/100,   260/288] loss: 0.00257169, Est. epoch time left: 0:00:00.024346 s\n",
      "[89/100,   270/288] loss: 0.00145576, Est. epoch time left: 0:00:00.015801 s\n",
      "[89/100,   280/288] loss: 0.00367676, Est. epoch time left: 0:00:00.006952 s\n",
      "Validation...\n",
      "[89,    10] loss: 0.002\n",
      "[89,    20] loss: 0.001\n",
      "[89,    30] loss: 0.005\n",
      "[90/100,    10/288] loss: 0.00259162, Est. epoch time left: 0:00:00.244906 s\n",
      "[90/100,    20/288] loss: 0.00164727, Est. epoch time left: 0:00:00.233477 s\n",
      "[90/100,    30/288] loss: 0.00141493, Est. epoch time left: 0:00:00.423572 s\n",
      "[90/100,    40/288] loss: 0.00444497, Est. epoch time left: 0:00:00.318108 s\n",
      "[90/100,    50/288] loss: 0.00385077, Est. epoch time left: 0:00:00.363670 s\n",
      "[90/100,    60/288] loss: 0.00321377, Est. epoch time left: 0:00:00.318601 s\n",
      "[90/100,    70/288] loss: 0.00181452, Est. epoch time left: 0:00:00.259720 s\n",
      "[90/100,    80/288] loss: 0.00188669, Est. epoch time left: 0:00:00.221127 s\n",
      "[90/100,    90/288] loss: 0.00300921, Est. epoch time left: 0:00:00.195248 s\n",
      "[90/100,   100/288] loss: 0.00380654, Est. epoch time left: 0:00:00.170864 s\n",
      "[90/100,   110/288] loss: 0.00197769, Est. epoch time left: 0:00:00.157362 s\n",
      "[90/100,   120/288] loss: 0.00513898, Est. epoch time left: 0:00:00.146919 s\n",
      "[90/100,   130/288] loss: 0.00089925, Est. epoch time left: 0:00:00.137458 s\n",
      "[90/100,   140/288] loss: 0.00496622, Est. epoch time left: 0:00:00.128123 s\n",
      "[90/100,   150/288] loss: 0.00123519, Est. epoch time left: 0:00:00.120059 s\n",
      "[90/100,   160/288] loss: 0.00340813, Est. epoch time left: 0:00:00.111450 s\n",
      "[90/100,   170/288] loss: 0.00393545, Est. epoch time left: 0:00:00.103053 s\n",
      "[90/100,   180/288] loss: 0.00453313, Est. epoch time left: 0:00:00.096894 s\n",
      "[90/100,   190/288] loss: 0.00308717, Est. epoch time left: 0:00:00.087362 s\n",
      "[90/100,   200/288] loss: 0.00263957, Est. epoch time left: 0:00:00.083189 s\n",
      "[90/100,   210/288] loss: 0.00276203, Est. epoch time left: 0:00:00.070686 s\n",
      "[90/100,   220/288] loss: 0.00391659, Est. epoch time left: 0:00:00.059143 s\n",
      "[90/100,   230/288] loss: 0.00465363, Est. epoch time left: 0:00:00.050432 s\n",
      "[90/100,   240/288] loss: 0.00307862, Est. epoch time left: 0:00:00.043522 s\n",
      "[90/100,   250/288] loss: 0.00606384, Est. epoch time left: 0:00:00.048860 s\n",
      "[90/100,   260/288] loss: 0.00278276, Est. epoch time left: 0:00:00.033666 s\n",
      "[90/100,   270/288] loss: 0.00589764, Est. epoch time left: 0:00:00.021192 s\n",
      "[90/100,   280/288] loss: 0.00553180, Est. epoch time left: 0:00:00.012381 s\n",
      "Validation...\n",
      "[90,    10] loss: 0.005\n",
      "[90,    20] loss: 0.001\n",
      "[90,    30] loss: 0.003\n",
      "[91/100,    10/288] loss: 0.00442750, Est. epoch time left: 0:00:00.326166 s\n",
      "[91/100,    20/288] loss: 0.00225392, Est. epoch time left: 0:00:00.274370 s\n",
      "[91/100,    30/288] loss: 0.00307068, Est. epoch time left: 0:00:00.237313 s\n",
      "[91/100,    40/288] loss: 0.00514472, Est. epoch time left: 0:00:00.216408 s\n",
      "[91/100,    50/288] loss: 0.00223343, Est. epoch time left: 0:00:00.215285 s\n",
      "[91/100,    60/288] loss: 0.00142224, Est. epoch time left: 0:00:00.205750 s\n",
      "[91/100,    70/288] loss: 0.00392706, Est. epoch time left: 0:00:00.191009 s\n",
      "[91/100,    80/288] loss: 0.00283443, Est. epoch time left: 0:00:00.183388 s\n",
      "[91/100,    90/288] loss: 0.00468279, Est. epoch time left: 0:00:00.173013 s\n",
      "[91/100,   100/288] loss: 0.00250434, Est. epoch time left: 0:00:00.247690 s\n",
      "[91/100,   110/288] loss: 0.00408038, Est. epoch time left: 0:00:00.209434 s\n",
      "[91/100,   120/288] loss: 0.00282786, Est. epoch time left: 0:00:00.187855 s\n",
      "[91/100,   130/288] loss: 0.00550558, Est. epoch time left: 0:00:00.147968 s\n",
      "[91/100,   140/288] loss: 0.00464784, Est. epoch time left: 0:00:00.136274 s\n",
      "[91/100,   150/288] loss: 0.00326251, Est. epoch time left: 0:00:00.122987 s\n",
      "[91/100,   160/288] loss: 0.00274844, Est. epoch time left: 0:00:00.150482 s\n",
      "[91/100,   170/288] loss: 0.00075435, Est. epoch time left: 0:00:00.105360 s\n",
      "[91/100,   180/288] loss: 0.00046892, Est. epoch time left: 0:00:00.105932 s\n",
      "[91/100,   190/288] loss: 0.00387394, Est. epoch time left: 0:00:00.089371 s\n",
      "[91/100,   200/288] loss: 0.00353519, Est. epoch time left: 0:00:00.077671 s\n",
      "[91/100,   210/288] loss: 0.00731200, Est. epoch time left: 0:00:00.068659 s\n",
      "[91/100,   220/288] loss: 0.00479082, Est. epoch time left: 0:00:00.058949 s\n",
      "[91/100,   230/288] loss: 0.00281372, Est. epoch time left: 0:00:00.050390 s\n",
      "[91/100,   240/288] loss: 0.00212200, Est. epoch time left: 0:00:00.041794 s\n",
      "[91/100,   250/288] loss: 0.00451188, Est. epoch time left: 0:00:00.033304 s\n",
      "[91/100,   260/288] loss: 0.00376496, Est. epoch time left: 0:00:00.024306 s\n",
      "[91/100,   270/288] loss: 0.00311743, Est. epoch time left: 0:00:00.015613 s\n",
      "[91/100,   280/288] loss: 0.00072548, Est. epoch time left: 0:00:00.006971 s\n",
      "Validation...\n",
      "[91,    10] loss: 0.005\n",
      "[91,    20] loss: 0.004\n",
      "[91,    30] loss: 0.002\n",
      "[92/100,    10/288] loss: 0.00350088, Est. epoch time left: 0:00:00.283481 s\n",
      "[92/100,    20/288] loss: 0.00238634, Est. epoch time left: 0:00:00.245681 s\n",
      "[92/100,    30/288] loss: 0.00369737, Est. epoch time left: 0:00:00.218368 s\n",
      "[92/100,    40/288] loss: 0.00256002, Est. epoch time left: 0:00:00.217295 s\n",
      "[92/100,    50/288] loss: 0.00533533, Est. epoch time left: 0:00:00.213640 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[92/100,    60/288] loss: 0.00189068, Est. epoch time left: 0:00:00.199445 s\n",
      "[92/100,    70/288] loss: 0.00347303, Est. epoch time left: 0:00:00.191685 s\n",
      "[92/100,    80/288] loss: 0.00163200, Est. epoch time left: 0:00:00.181454 s\n",
      "[92/100,    90/288] loss: 0.00294065, Est. epoch time left: 0:00:00.173202 s\n",
      "[92/100,   100/288] loss: 0.00559969, Est. epoch time left: 0:00:00.163110 s\n",
      "[92/100,   110/288] loss: 0.00481859, Est. epoch time left: 0:00:00.154009 s\n",
      "[92/100,   120/288] loss: 0.00350793, Est. epoch time left: 0:00:00.147160 s\n",
      "[92/100,   130/288] loss: 0.00293641, Est. epoch time left: 0:00:00.137308 s\n",
      "[92/100,   140/288] loss: 0.00493677, Est. epoch time left: 0:00:00.126571 s\n",
      "[92/100,   150/288] loss: 0.00098027, Est. epoch time left: 0:00:00.119993 s\n",
      "[92/100,   160/288] loss: 0.00367998, Est. epoch time left: 0:00:00.113251 s\n",
      "[92/100,   170/288] loss: 0.00464596, Est. epoch time left: 0:00:00.102434 s\n",
      "[92/100,   180/288] loss: 0.00324845, Est. epoch time left: 0:00:00.144067 s\n",
      "[92/100,   190/288] loss: 0.00207361, Est. epoch time left: 0:00:00.109021 s\n",
      "[92/100,   200/288] loss: 0.00355753, Est. epoch time left: 0:00:00.086798 s\n",
      "[92/100,   210/288] loss: 0.00406877, Est. epoch time left: 0:00:00.069291 s\n",
      "[92/100,   220/288] loss: 0.00539421, Est. epoch time left: 0:00:00.060699 s\n",
      "[92/100,   230/288] loss: 0.00197334, Est. epoch time left: 0:00:00.051566 s\n",
      "[92/100,   240/288] loss: 0.00253609, Est. epoch time left: 0:00:00.046944 s\n",
      "[92/100,   250/288] loss: 0.00451356, Est. epoch time left: 0:00:00.032987 s\n",
      "[92/100,   260/288] loss: 0.00384794, Est. epoch time left: 0:00:00.023058 s\n",
      "[92/100,   270/288] loss: 0.00594657, Est. epoch time left: 0:00:00.015668 s\n",
      "[92/100,   280/288] loss: 0.00128910, Est. epoch time left: 0:00:00.007050 s\n",
      "Validation...\n",
      "[92,    10] loss: 0.003\n",
      "[92,    20] loss: 0.003\n",
      "[92,    30] loss: 0.003\n",
      "[93/100,    10/288] loss: 0.00682564, Est. epoch time left: 0:00:00.243183 s\n",
      "[93/100,    20/288] loss: 0.00159651, Est. epoch time left: 0:00:00.243444 s\n",
      "[93/100,    30/288] loss: 0.00523361, Est. epoch time left: 0:00:00.229747 s\n",
      "[93/100,    40/288] loss: 0.00274472, Est. epoch time left: 0:00:00.221788 s\n",
      "[93/100,    50/288] loss: 0.00392616, Est. epoch time left: 0:00:00.183849 s\n",
      "[93/100,    60/288] loss: 0.00080711, Est. epoch time left: 0:00:00.179386 s\n",
      "[93/100,    70/288] loss: 0.00344013, Est. epoch time left: 0:00:00.158888 s\n",
      "[93/100,    80/288] loss: 0.00190832, Est. epoch time left: 0:00:00.155220 s\n",
      "[93/100,    90/288] loss: 0.00388214, Est. epoch time left: 0:00:00.167868 s\n",
      "[93/100,   100/288] loss: 0.00346565, Est. epoch time left: 0:00:00.139847 s\n",
      "[93/100,   110/288] loss: 0.00369635, Est. epoch time left: 0:00:00.129777 s\n",
      "[93/100,   120/288] loss: 0.00394993, Est. epoch time left: 0:00:00.139469 s\n",
      "[93/100,   130/288] loss: 0.00307675, Est. epoch time left: 0:00:00.120017 s\n",
      "[93/100,   140/288] loss: 0.00419577, Est. epoch time left: 0:00:00.119020 s\n",
      "[93/100,   150/288] loss: 0.00314425, Est. epoch time left: 0:00:00.138681 s\n",
      "[93/100,   160/288] loss: 0.00252644, Est. epoch time left: 0:00:00.119019 s\n",
      "[93/100,   170/288] loss: 0.00265055, Est. epoch time left: 0:00:00.106597 s\n",
      "[93/100,   180/288] loss: 0.00333769, Est. epoch time left: 0:00:00.085951 s\n",
      "[93/100,   190/288] loss: 0.00099942, Est. epoch time left: 0:00:00.140821 s\n",
      "[93/100,   200/288] loss: 0.00557851, Est. epoch time left: 0:00:00.109604 s\n",
      "[93/100,   210/288] loss: 0.00310912, Est. epoch time left: 0:00:00.071244 s\n",
      "[93/100,   220/288] loss: 0.00156771, Est. epoch time left: 0:00:00.061737 s\n",
      "[93/100,   230/288] loss: 0.00407837, Est. epoch time left: 0:00:00.052852 s\n",
      "[93/100,   240/288] loss: 0.00401776, Est. epoch time left: 0:00:00.041977 s\n",
      "[93/100,   250/288] loss: 0.00089946, Est. epoch time left: 0:00:00.028086 s\n",
      "[93/100,   260/288] loss: 0.00222915, Est. epoch time left: 0:00:00.025308 s\n",
      "[93/100,   270/288] loss: 0.00503102, Est. epoch time left: 0:00:00.016098 s\n",
      "[93/100,   280/288] loss: 0.00257371, Est. epoch time left: 0:00:00.010803 s\n",
      "Validation...\n",
      "[93,    10] loss: 0.003\n",
      "[93,    20] loss: 0.004\n",
      "[93,    30] loss: 0.001\n",
      "[94/100,    10/288] loss: 0.00193566, Est. epoch time left: 0:00:00.227607 s\n",
      "[94/100,    20/288] loss: 0.00134646, Est. epoch time left: 0:00:00.215266 s\n",
      "[94/100,    30/288] loss: 0.00536742, Est. epoch time left: 0:00:00.227533 s\n",
      "[94/100,    40/288] loss: 0.00450862, Est. epoch time left: 0:00:00.204464 s\n",
      "[94/100,    50/288] loss: 0.00330597, Est. epoch time left: 0:00:00.195028 s\n",
      "[94/100,    60/288] loss: 0.00256941, Est. epoch time left: 0:00:00.174494 s\n",
      "[94/100,    70/288] loss: 0.00479178, Est. epoch time left: 0:00:00.164762 s\n",
      "[94/100,    80/288] loss: 0.00258076, Est. epoch time left: 0:00:00.163651 s\n",
      "[94/100,    90/288] loss: 0.00784594, Est. epoch time left: 0:00:00.156396 s\n",
      "[94/100,   100/288] loss: 0.00293226, Est. epoch time left: 0:00:00.155311 s\n",
      "[94/100,   110/288] loss: 0.00472181, Est. epoch time left: 0:00:00.146116 s\n",
      "[94/100,   120/288] loss: 0.00306055, Est. epoch time left: 0:00:00.135103 s\n",
      "[94/100,   130/288] loss: 0.00430566, Est. epoch time left: 0:00:00.110562 s\n",
      "[94/100,   140/288] loss: 0.00158142, Est. epoch time left: 0:00:00.115279 s\n",
      "[94/100,   150/288] loss: 0.00119694, Est. epoch time left: 0:00:00.103937 s\n",
      "[94/100,   160/288] loss: 0.00350718, Est. epoch time left: 0:00:00.112915 s\n",
      "[94/100,   170/288] loss: 0.00360622, Est. epoch time left: 0:00:00.097735 s\n",
      "[94/100,   180/288] loss: 0.00315579, Est. epoch time left: 0:00:00.077737 s\n",
      "[94/100,   190/288] loss: 0.00289872, Est. epoch time left: 0:00:00.084535 s\n",
      "[94/100,   200/288] loss: 0.00192667, Est. epoch time left: 0:00:00.085035 s\n",
      "[94/100,   210/288] loss: 0.00569231, Est. epoch time left: 0:00:00.059714 s\n",
      "[94/100,   220/288] loss: 0.00174017, Est. epoch time left: 0:00:00.051167 s\n",
      "[94/100,   230/288] loss: 0.00107828, Est. epoch time left: 0:00:00.049906 s\n",
      "[94/100,   240/288] loss: 0.00383179, Est. epoch time left: 0:00:00.033474 s\n",
      "[94/100,   250/288] loss: 0.00543673, Est. epoch time left: 0:00:00.029209 s\n",
      "[94/100,   260/288] loss: 0.00433705, Est. epoch time left: 0:00:00.020862 s\n",
      "[94/100,   270/288] loss: 0.00334451, Est. epoch time left: 0:00:00.013548 s\n",
      "[94/100,   280/288] loss: 0.00233233, Est. epoch time left: 0:00:00.006582 s\n",
      "Validation...\n",
      "[94,    10] loss: 0.004\n",
      "[94,    20] loss: 0.001\n",
      "[94,    30] loss: 0.002\n",
      "[95/100,    10/288] loss: 0.00128489, Est. epoch time left: 0:00:00.212561 s\n",
      "[95/100,    20/288] loss: 0.00385323, Est. epoch time left: 0:00:00.213605 s\n",
      "[95/100,    30/288] loss: 0.00294824, Est. epoch time left: 0:00:00.185582 s\n",
      "[95/100,    40/288] loss: 0.00535146, Est. epoch time left: 0:00:00.166386 s\n",
      "[95/100,    50/288] loss: 0.00201041, Est. epoch time left: 0:00:00.160074 s\n",
      "[95/100,    60/288] loss: 0.00362966, Est. epoch time left: 0:00:00.176233 s\n",
      "[95/100,    70/288] loss: 0.00282905, Est. epoch time left: 0:00:00.157173 s\n",
      "[95/100,    80/288] loss: 0.00250522, Est. epoch time left: 0:00:00.159782 s\n",
      "[95/100,    90/288] loss: 0.00143453, Est. epoch time left: 0:00:00.150826 s\n",
      "[95/100,   100/288] loss: 0.00376597, Est. epoch time left: 0:00:00.151814 s\n",
      "[95/100,   110/288] loss: 0.00319721, Est. epoch time left: 0:00:00.149765 s\n",
      "[95/100,   120/288] loss: 0.00275182, Est. epoch time left: 0:00:00.141191 s\n",
      "[95/100,   130/288] loss: 0.00232789, Est. epoch time left: 0:00:00.132109 s\n",
      "[95/100,   140/288] loss: 0.00476777, Est. epoch time left: 0:00:00.099506 s\n",
      "[95/100,   150/288] loss: 0.00419130, Est. epoch time left: 0:00:00.107523 s\n",
      "[95/100,   160/288] loss: 0.00206844, Est. epoch time left: 0:00:00.089935 s\n",
      "[95/100,   170/288] loss: 0.00307492, Est. epoch time left: 0:00:00.096751 s\n",
      "[95/100,   180/288] loss: 0.00358201, Est. epoch time left: 0:00:00.073797 s\n",
      "[95/100,   190/288] loss: 0.00207647, Est. epoch time left: 0:00:00.075048 s\n",
      "[95/100,   200/288] loss: 0.00228028, Est. epoch time left: 0:00:00.066530 s\n",
      "[95/100,   210/288] loss: 0.00297804, Est. epoch time left: 0:00:00.060997 s\n",
      "[95/100,   220/288] loss: 0.00210762, Est. epoch time left: 0:00:00.053696 s\n",
      "[95/100,   230/288] loss: 0.00621398, Est. epoch time left: 0:00:00.042107 s\n",
      "[95/100,   240/288] loss: 0.00600343, Est. epoch time left: 0:00:00.035202 s\n",
      "[95/100,   250/288] loss: 0.00413016, Est. epoch time left: 0:00:00.028321 s\n",
      "[95/100,   260/288] loss: 0.00352192, Est. epoch time left: 0:00:00.022077 s\n",
      "[95/100,   270/288] loss: 0.00494914, Est. epoch time left: 0:00:00.011827 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[95/100,   280/288] loss: 0.00355310, Est. epoch time left: 0:00:00.009439 s\n",
      "Validation...\n",
      "[95,    10] loss: 0.001\n",
      "[95,    20] loss: 0.002\n",
      "[95,    30] loss: 0.006\n",
      "[96/100,    10/288] loss: 0.00516503, Est. epoch time left: 0:00:00.221244 s\n",
      "[96/100,    20/288] loss: 0.00341643, Est. epoch time left: 0:00:00.207471 s\n",
      "[96/100,    30/288] loss: 0.00179293, Est. epoch time left: 0:00:00.228148 s\n",
      "[96/100,    40/288] loss: 0.00152167, Est. epoch time left: 0:00:00.181936 s\n",
      "[96/100,    50/288] loss: 0.00147602, Est. epoch time left: 0:00:00.204618 s\n",
      "[96/100,    60/288] loss: 0.00356552, Est. epoch time left: 0:00:00.198358 s\n",
      "[96/100,    70/288] loss: 0.00473066, Est. epoch time left: 0:00:00.192256 s\n",
      "[96/100,    80/288] loss: 0.00805316, Est. epoch time left: 0:00:00.181999 s\n",
      "[96/100,    90/288] loss: 0.00581545, Est. epoch time left: 0:00:00.169331 s\n",
      "[96/100,   100/288] loss: 0.00287162, Est. epoch time left: 0:00:00.166651 s\n",
      "[96/100,   110/288] loss: 0.00328808, Est. epoch time left: 0:00:00.154519 s\n",
      "[96/100,   120/288] loss: 0.00190979, Est. epoch time left: 0:00:00.151806 s\n",
      "[96/100,   130/288] loss: 0.00486534, Est. epoch time left: 0:00:00.172492 s\n",
      "[96/100,   140/288] loss: 0.00172068, Est. epoch time left: 0:00:00.162492 s\n",
      "[96/100,   150/288] loss: 0.00251852, Est. epoch time left: 0:00:00.148091 s\n",
      "[96/100,   160/288] loss: 0.00588293, Est. epoch time left: 0:00:00.137634 s\n",
      "[96/100,   170/288] loss: 0.00163637, Est. epoch time left: 0:00:00.129836 s\n",
      "[96/100,   180/288] loss: 0.00229134, Est. epoch time left: 0:00:00.116283 s\n",
      "[96/100,   190/288] loss: 0.00621895, Est. epoch time left: 0:00:00.105072 s\n",
      "[96/100,   200/288] loss: 0.00154950, Est. epoch time left: 0:00:00.095757 s\n",
      "[96/100,   210/288] loss: 0.00548175, Est. epoch time left: 0:00:00.084410 s\n",
      "[96/100,   220/288] loss: 0.00265165, Est. epoch time left: 0:00:00.091795 s\n",
      "[96/100,   230/288] loss: 0.00167763, Est. epoch time left: 0:00:00.071838 s\n",
      "[96/100,   240/288] loss: 0.00494082, Est. epoch time left: 0:00:00.050446 s\n",
      "[96/100,   250/288] loss: 0.00248358, Est. epoch time left: 0:00:00.034174 s\n",
      "[96/100,   260/288] loss: 0.00655414, Est. epoch time left: 0:00:00.025688 s\n",
      "[96/100,   270/288] loss: 0.00227227, Est. epoch time left: 0:00:00.015892 s\n",
      "[96/100,   280/288] loss: 0.00650687, Est. epoch time left: 0:00:00.007004 s\n",
      "Validation...\n",
      "[96,    10] loss: 0.004\n",
      "[96,    20] loss: 0.002\n",
      "[96,    30] loss: 0.003\n",
      "[97/100,    10/288] loss: 0.00486397, Est. epoch time left: 0:00:00.208584 s\n",
      "[97/100,    20/288] loss: 0.00237603, Est. epoch time left: 0:00:00.201592 s\n",
      "[97/100,    30/288] loss: 0.00165408, Est. epoch time left: 0:00:00.207357 s\n",
      "[97/100,    40/288] loss: 0.00566995, Est. epoch time left: 0:00:00.200266 s\n",
      "[97/100,    50/288] loss: 0.00351180, Est. epoch time left: 0:00:00.195198 s\n",
      "[97/100,    60/288] loss: 0.00746867, Est. epoch time left: 0:00:00.168406 s\n",
      "[97/100,    70/288] loss: 0.00174068, Est. epoch time left: 0:00:00.182017 s\n",
      "[97/100,    80/288] loss: 0.00562217, Est. epoch time left: 0:00:00.160675 s\n",
      "[97/100,    90/288] loss: 0.00110860, Est. epoch time left: 0:00:00.167065 s\n",
      "[97/100,   100/288] loss: 0.00159914, Est. epoch time left: 0:00:00.151814 s\n",
      "[97/100,   110/288] loss: 0.00352759, Est. epoch time left: 0:00:00.170815 s\n",
      "[97/100,   120/288] loss: 0.00250684, Est. epoch time left: 0:00:00.189617 s\n",
      "[97/100,   130/288] loss: 0.00259478, Est. epoch time left: 0:00:00.169478 s\n",
      "[97/100,   140/288] loss: 0.00415611, Est. epoch time left: 0:00:00.132428 s\n",
      "[97/100,   150/288] loss: 0.00961123, Est. epoch time left: 0:00:00.128975 s\n",
      "[97/100,   160/288] loss: 0.00144491, Est. epoch time left: 0:00:00.110779 s\n",
      "[97/100,   170/288] loss: 0.00220182, Est. epoch time left: 0:00:00.104459 s\n",
      "[97/100,   180/288] loss: 0.00523719, Est. epoch time left: 0:00:00.107348 s\n",
      "[97/100,   190/288] loss: 0.00181987, Est. epoch time left: 0:00:00.076334 s\n",
      "[97/100,   200/288] loss: 0.00504019, Est. epoch time left: 0:00:00.119989 s\n",
      "[97/100,   210/288] loss: 0.00448507, Est. epoch time left: 0:00:00.097465 s\n",
      "[97/100,   220/288] loss: 0.00396601, Est. epoch time left: 0:00:00.075777 s\n",
      "[97/100,   230/288] loss: 0.00361318, Est. epoch time left: 0:00:00.060706 s\n",
      "[97/100,   240/288] loss: 0.00248386, Est. epoch time left: 0:00:00.044586 s\n",
      "[97/100,   250/288] loss: 0.00224299, Est. epoch time left: 0:00:00.045689 s\n",
      "[97/100,   260/288] loss: 0.00264835, Est. epoch time left: 0:00:00.029286 s\n",
      "[97/100,   270/288] loss: 0.00473838, Est. epoch time left: 0:00:00.018569 s\n",
      "[97/100,   280/288] loss: 0.00119657, Est. epoch time left: 0:00:00.008133 s\n",
      "Validation...\n",
      "[97,    10] loss: 0.001\n",
      "[97,    20] loss: 0.004\n",
      "[97,    30] loss: 0.005\n",
      "[98/100,    10/288] loss: 0.00148999, Est. epoch time left: 0:00:00.243912 s\n",
      "[98/100,    20/288] loss: 0.00247240, Est. epoch time left: 0:00:00.314561 s\n",
      "[98/100,    30/288] loss: 0.00247295, Est. epoch time left: 0:00:00.288122 s\n",
      "[98/100,    40/288] loss: 0.00349676, Est. epoch time left: 0:00:00.275417 s\n",
      "[98/100,    50/288] loss: 0.00501095, Est. epoch time left: 0:00:00.205355 s\n",
      "[98/100,    60/288] loss: 0.00226230, Est. epoch time left: 0:00:00.198521 s\n",
      "[98/100,    70/288] loss: 0.00266762, Est. epoch time left: 0:00:00.245999 s\n",
      "[98/100,    80/288] loss: 0.00427425, Est. epoch time left: 0:00:00.212894 s\n",
      "[98/100,    90/288] loss: 0.00157686, Est. epoch time left: 0:00:00.201337 s\n",
      "[98/100,   100/288] loss: 0.00229628, Est. epoch time left: 0:00:00.183414 s\n",
      "[98/100,   110/288] loss: 0.00635201, Est. epoch time left: 0:00:00.169160 s\n",
      "[98/100,   120/288] loss: 0.00140351, Est. epoch time left: 0:00:00.146559 s\n",
      "[98/100,   130/288] loss: 0.00439058, Est. epoch time left: 0:00:00.140736 s\n",
      "[98/100,   140/288] loss: 0.00529691, Est. epoch time left: 0:00:00.127418 s\n",
      "[98/100,   150/288] loss: 0.00211240, Est. epoch time left: 0:00:00.131607 s\n",
      "[98/100,   160/288] loss: 0.00608747, Est. epoch time left: 0:00:00.110046 s\n",
      "[98/100,   170/288] loss: 0.00321564, Est. epoch time left: 0:00:00.102940 s\n",
      "[98/100,   180/288] loss: 0.00352232, Est. epoch time left: 0:00:00.094422 s\n",
      "[98/100,   190/288] loss: 0.00197249, Est. epoch time left: 0:00:00.087058 s\n",
      "[98/100,   200/288] loss: 0.00572801, Est. epoch time left: 0:00:00.077021 s\n",
      "[98/100,   210/288] loss: 0.00405384, Est. epoch time left: 0:00:00.068584 s\n",
      "[98/100,   220/288] loss: 0.00314565, Est. epoch time left: 0:00:00.060894 s\n",
      "[98/100,   230/288] loss: 0.00449896, Est. epoch time left: 0:00:00.049602 s\n",
      "[98/100,   240/288] loss: 0.00420667, Est. epoch time left: 0:00:00.037571 s\n",
      "[98/100,   250/288] loss: 0.00717953, Est. epoch time left: 0:00:00.028666 s\n",
      "[98/100,   260/288] loss: 0.00343597, Est. epoch time left: 0:00:00.020721 s\n",
      "[98/100,   270/288] loss: 0.00266655, Est. epoch time left: 0:00:00.014287 s\n",
      "[98/100,   280/288] loss: 0.00054208, Est. epoch time left: 0:00:00.006544 s\n",
      "Validation...\n",
      "[98,    10] loss: 0.004\n",
      "[98,    20] loss: 0.002\n",
      "[98,    30] loss: 0.003\n",
      "[99/100,    10/288] loss: 0.00214819, Est. epoch time left: 0:00:00.237880 s\n",
      "[99/100,    20/288] loss: 0.00258556, Est. epoch time left: 0:00:00.229835 s\n",
      "[99/100,    30/288] loss: 0.00232743, Est. epoch time left: 0:00:00.225072 s\n",
      "[99/100,    40/288] loss: 0.00272283, Est. epoch time left: 0:00:00.217117 s\n",
      "[99/100,    50/288] loss: 0.00132689, Est. epoch time left: 0:00:00.209554 s\n",
      "[99/100,    60/288] loss: 0.00131623, Est. epoch time left: 0:00:00.220536 s\n",
      "[99/100,    70/288] loss: 0.00392402, Est. epoch time left: 0:00:00.249897 s\n",
      "[99/100,    80/288] loss: 0.00315488, Est. epoch time left: 0:00:00.222317 s\n",
      "[99/100,    90/288] loss: 0.00238173, Est. epoch time left: 0:00:00.222580 s\n",
      "[99/100,   100/288] loss: 0.00207291, Est. epoch time left: 0:00:00.198699 s\n",
      "[99/100,   110/288] loss: 0.00261600, Est. epoch time left: 0:00:00.175016 s\n",
      "[99/100,   120/288] loss: 0.00458534, Est. epoch time left: 0:00:00.151566 s\n",
      "[99/100,   130/288] loss: 0.00690298, Est. epoch time left: 0:00:00.172981 s\n",
      "[99/100,   140/288] loss: 0.00560739, Est. epoch time left: 0:00:00.163974 s\n",
      "[99/100,   150/288] loss: 0.00433035, Est. epoch time left: 0:00:00.150690 s\n",
      "[99/100,   160/288] loss: 0.00634222, Est. epoch time left: 0:00:00.184296 s\n",
      "[99/100,   170/288] loss: 0.00607199, Est. epoch time left: 0:00:00.148882 s\n",
      "[99/100,   180/288] loss: 0.00417169, Est. epoch time left: 0:00:00.129158 s\n",
      "[99/100,   190/288] loss: 0.00181441, Est. epoch time left: 0:00:00.109862 s\n",
      "[99/100,   200/288] loss: 0.00702142, Est. epoch time left: 0:00:00.094435 s\n",
      "[99/100,   210/288] loss: 0.00162799, Est. epoch time left: 0:00:00.083722 s\n",
      "[99/100,   220/288] loss: 0.00439587, Est. epoch time left: 0:00:00.071302 s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[99/100,   230/288] loss: 0.00393771, Est. epoch time left: 0:00:00.061785 s\n",
      "[99/100,   240/288] loss: 0.00290475, Est. epoch time left: 0:00:00.059235 s\n",
      "[99/100,   250/288] loss: 0.00192842, Est. epoch time left: 0:00:00.036584 s\n",
      "[99/100,   260/288] loss: 0.00323723, Est. epoch time left: 0:00:00.026269 s\n",
      "[99/100,   270/288] loss: 0.00370278, Est. epoch time left: 0:00:00.016415 s\n",
      "[99/100,   280/288] loss: 0.00597405, Est. epoch time left: 0:00:00.010721 s\n",
      "Validation...\n",
      "[99,    10] loss: 0.005\n",
      "[99,    20] loss: 0.001\n",
      "[99,    30] loss: 0.004\n",
      "[100/100,    10/288] loss: 0.00279171, Est. epoch time left: 0:00:00.373291 s\n",
      "[100/100,    20/288] loss: 0.00290635, Est. epoch time left: 0:00:00.315647 s\n",
      "[100/100,    30/288] loss: 0.00253655, Est. epoch time left: 0:00:00.275758 s\n",
      "[100/100,    40/288] loss: 0.00118552, Est. epoch time left: 0:00:00.255491 s\n",
      "[100/100,    50/288] loss: 0.00322645, Est. epoch time left: 0:00:00.277817 s\n",
      "[100/100,    60/288] loss: 0.00360670, Est. epoch time left: 0:00:00.215698 s\n",
      "[100/100,    70/288] loss: 0.00168631, Est. epoch time left: 0:00:00.203535 s\n",
      "[100/100,    80/288] loss: 0.00492503, Est. epoch time left: 0:00:00.325912 s\n",
      "[100/100,    90/288] loss: 0.00251815, Est. epoch time left: 0:00:00.274083 s\n",
      "[100/100,   100/288] loss: 0.00554302, Est. epoch time left: 0:00:00.250424 s\n",
      "[100/100,   110/288] loss: 0.00518826, Est. epoch time left: 0:00:00.224500 s\n",
      "[100/100,   120/288] loss: 0.00116896, Est. epoch time left: 0:00:00.165545 s\n",
      "[100/100,   130/288] loss: 0.00288743, Est. epoch time left: 0:00:00.143373 s\n",
      "[100/100,   140/288] loss: 0.00297782, Est. epoch time left: 0:00:00.166126 s\n",
      "[100/100,   150/288] loss: 0.00617921, Est. epoch time left: 0:00:00.139438 s\n",
      "[100/100,   160/288] loss: 0.00511280, Est. epoch time left: 0:00:00.113434 s\n",
      "[100/100,   170/288] loss: 0.00102676, Est. epoch time left: 0:00:00.106654 s\n",
      "[100/100,   180/288] loss: 0.00334027, Est. epoch time left: 0:00:00.099907 s\n",
      "[100/100,   190/288] loss: 0.00985653, Est. epoch time left: 0:00:00.088904 s\n",
      "[100/100,   200/288] loss: 0.00345617, Est. epoch time left: 0:00:00.084049 s\n",
      "[100/100,   210/288] loss: 0.00449849, Est. epoch time left: 0:00:00.073401 s\n",
      "[100/100,   220/288] loss: 0.00542832, Est. epoch time left: 0:00:00.061234 s\n",
      "[100/100,   230/288] loss: 0.00417485, Est. epoch time left: 0:00:00.061702 s\n",
      "[100/100,   240/288] loss: 0.00266826, Est. epoch time left: 0:00:00.045753 s\n",
      "[100/100,   250/288] loss: 0.00233570, Est. epoch time left: 0:00:00.034681 s\n",
      "[100/100,   260/288] loss: 0.00206582, Est. epoch time left: 0:00:00.044707 s\n",
      "[100/100,   270/288] loss: 0.00245555, Est. epoch time left: 0:00:00.021582 s\n",
      "[100/100,   280/288] loss: 0.00172109, Est. epoch time left: 0:00:00.008720 s\n",
      "Validation...\n",
      "[100,    10] loss: 0.002\n",
      "[100,    20] loss: 0.005\n",
      "[100,    30] loss: 0.004\n",
      "Finished Training\n"
     ]
    }
   ],
   "source": [
    "start_epoch = 0\n",
    "epochs_to_run = 100\n",
    "FFnet.train() # Set your network in train mode\n",
    "train_loss = []\n",
    "val_loss = []\n",
    "\n",
    "################################################################################\n",
    "# A lot of things happen in this script, but each step is relatively simple,\n",
    "# so look it over at least once and try to understand the purpose of the different\n",
    "# steps.\n",
    "################################################################################\n",
    "\n",
    "print('Starting training ...')\n",
    "\n",
    "# We iterate over the entire dataset for a number of epochs. One epoch is defined as one pass over the entire dataset, both training and validation.\n",
    "# We decide how many epochs of training to run a priori.\n",
    "for epoch in range(start_epoch, start_epoch+epochs_to_run):\n",
    "    \n",
    "    # These variables are only for keeping track of our current loss\n",
    "    steps_left = steps_per_epoch\n",
    "    accum_loss = 0.0\n",
    "    running_loss=0.0\n",
    "    \n",
    "    # Start training on the train set. For each sample, perform the same actions:\n",
    "    for i, data in enumerate(train_dataloader, 0):\n",
    "        start = time.time()\n",
    "\n",
    "        # 1. Load the batch of data and corresponding labels\n",
    "        inputs, labels = data['data'].float(), data['labels'].float()\n",
    "        \n",
    "        # 2. Make sure to zero your optimizers parameter gradients.\n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        # 3. Perform the forward pass: send the inputs of your data through your network and save the output.\n",
    "        outputs = FFnet(inputs) # Forward pass: propagate input through network and receive output features\n",
    "        \n",
    "        # 4. Compute the loss using your pre-determined criterion (loss-function). Compare outputs of your network with the target labels.\n",
    "        loss = criterion(outputs.squeeze(), labels.squeeze()) # Calculate MSE-loss between network output and target label.\n",
    "        \n",
    "        # 5. Perform backward pass: compute the gradients of your network through backpropagation.\n",
    "        loss.backward()\n",
    "        \n",
    "        # 6. Optimize weights and biases: Update your network using your optimizer and the previously computed gradients.\n",
    "        optimizer.step()\n",
    "        \n",
    "        ### Some time remaining estimation, not part of the learning. ###\n",
    "        end = time.time()\n",
    "        training_step += 1\n",
    "        steps_left -= 1\n",
    "        secs_left = (end-start)*steps_left\n",
    "        time_left = str(datetime.timedelta(seconds = secs_left))\n",
    "        \n",
    "\n",
    "        # print some statistics during training\n",
    "        running_loss += loss.item()\n",
    "        accum_loss += loss.item()\n",
    "        if i % 10 == 9:    # print every 10 mini-batches\n",
    "            print(f'[{epoch + 1}/{epochs_to_run}, {i + 1:5d}/{steps_per_epoch}] loss: {running_loss / 10:.8f}, Est. epoch time left: {time_left} s')\n",
    "            running_loss = 0.0\n",
    "    mean_loss = accum_loss/i\n",
    "    \n",
    "    eval_loss = 0.0\n",
    "    avg_loss = 0.0\n",
    "    \n",
    "    \n",
    "    FFnet.eval()\n",
    "    print(\"Validation...\")\n",
    "    \n",
    "    ### Test your current weights on the validation set. Allows you to notice whether the model is overfitting.\n",
    "    ### Iterate over the entire validation set.\n",
    "    for i, data in enumerate(val_dataloader, 0):\n",
    "        \n",
    "        ### Important: PyTorch normally automatically keeps track of the gradients of trainable parameters. To avoid\n",
    "        ### updating your weights during validation, you need to use the function torch.no_grad() (no gradients).\n",
    "        with torch.no_grad():\n",
    "            \n",
    "            # 1. Load data sample and labels.\n",
    "            inputs, labels = data['data'].float(), data['labels'].float()\n",
    "            \n",
    "            # 2. Perform forward pass (prediction).\n",
    "            outputs = FFnet(inputs)\n",
    "            \n",
    "            # 3. Compute loss.\n",
    "            loss = criterion(outputs,labels.unsqueeze(dim=0))\n",
    "            eval_step += 1\n",
    "            eval_loss += loss.item()\n",
    "            avg_loss += loss.item()\n",
    "            \n",
    "            # NOTE: No weight update made! We do not train on these samples, only test.\n",
    "            \n",
    "            # print some statistics during validation\n",
    "            if i % 10 == 9:    # print every 10 mini-batches\n",
    "                print(f'[{epoch + 1}, {i + 1:5d}] loss: {eval_loss / 10:.3f}')\n",
    "                eval_loss = 0.0\n",
    "    avg_loss = avg_loss/i\n",
    "    train_loss.append(mean_loss)\n",
    "    val_loss.append(avg_loss)\n",
    "\n",
    "# Save the final model\n",
    "torch.save({\n",
    "            'epoch': epoch+1,\n",
    "            'model_state_dict': FFnet.state_dict(),\n",
    "            'optimizer_state_dict': optimizer.state_dict(),\n",
    "            'loss': criterion,\n",
    "            }, './saved_models/{}_e{}.pth'.format('test_FFnet_bls', epoch))\n",
    "print('Finished Training')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b36a166c",
   "metadata": {},
   "source": [
    "### The code we ran above has now created and trained a model using our previously defined neural network. \n",
    "\n",
    "A training loop such as the one above could be written for each model we train, but for simplicity we can define a more general train_model() function that can train any model given certain parameters are provided. It does essentially the same things as the code above, except some values are parameters of the function rather than pre-defined variables.\n",
    "\n",
    "You can look through it if you are interested, but if you understand the code above the difference should be minor. Some code has been added to plot each epoch training/validation loss as it becomes available allowing you to keep track of the training process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "c95f9183",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import display, clear_output # For some interactive plots during training\n",
    "\n",
    "# For future use, we can wrap our training loop in a function and generalize it slightly to use it with different models/datasets\n",
    "\n",
    "def train_model(model, start_epoch, epochs_to_run, train_dataloader, val_dataloader, criterion, optimizer, name='FFnet_test', save_each_epoch=False):\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(1,1,1)\n",
    "    training_step = 0\n",
    "    eval_step=0\n",
    "    steps_per_epoch = int(train_dataloader.__len__()/batch_size)\n",
    "    val_steps_per_epoch = int(val_dataloader.__len__()/batch_size)\n",
    "    train_loss = []\n",
    "    val_loss = []\n",
    "    print('Starting training ...')\n",
    "    for epoch in range(start_epoch, start_epoch+epochs_to_run):\n",
    "        steps_left = steps_per_epoch\n",
    "        accum_loss = 0.0\n",
    "        running_loss=0.0\n",
    "        for i, data in enumerate(train_dataloader, 0):\n",
    "            start = time.time()\n",
    "\n",
    "\n",
    "            inputs, labels = data['data'].float(), data['labels'].float()\n",
    "            #print(labels)\n",
    "            # zero the parameter gradients\n",
    "            optimizer.zero_grad()\n",
    "            # forward + backward + optimize\n",
    "            outputs = model(inputs) # Forward pass: propagate input through network and receive output features\n",
    "            loss = criterion(outputs.squeeze(), labels.squeeze()) # Calculate MSE-loss between network output and target label.\n",
    "            #print(outputs, labels, loss)\n",
    "\n",
    "            loss.backward() # Backward pass: Compute the gradients of your network through backpropagation.\n",
    "            optimizer.step() # Optimize weights and biases: Update your network using your optimizer.\n",
    "\n",
    "            # Some time remaining estimation\n",
    "            end = time.time()\n",
    "            training_step += 1\n",
    "            steps_left -= 1\n",
    "            secs_left = (end-start)*steps_left\n",
    "            time_left = str(datetime.timedelta(seconds = secs_left))\n",
    "\n",
    "\n",
    "            # print some statistics during training\n",
    "            running_loss += loss.item()\n",
    "            accum_loss += loss.item()\n",
    "            if i % 10 == 9:    # print every 10 mini-batches\n",
    "                print(f'[{epoch + 1}/{epochs_to_run}, {i + 1:5d}/{steps_per_epoch}] loss: {running_loss / 10:.8f}, Est. epoch time left: {time_left} s')\n",
    "                running_loss = 0.0\n",
    "        mean_loss = accum_loss/i\n",
    "\n",
    "        eval_loss = 0.0\n",
    "        avg_loss = 0.0\n",
    "        model.eval()\n",
    "        print(\"Validation...\")\n",
    "\n",
    "        for i, data in enumerate(val_dataloader, 0):\n",
    "            with torch.no_grad():\n",
    "\n",
    "                inputs, labels = data['data'].float(), data['labels'].float()\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs,labels.unsqueeze(dim=0))\n",
    "                eval_step += 1\n",
    "                eval_loss += loss.item()\n",
    "                avg_loss += loss.item()\n",
    "                if i % 10 == 9:    # print every 10 mini-batches\n",
    "                    print(f'[{epoch + 1}, {i + 1:5d}] loss: {eval_loss / 10:.8f}')\n",
    "                    eval_loss = 0.0\n",
    "        avg_loss = avg_loss/i\n",
    "        \n",
    "        # Save mean losses per epoch to monitor training. Validation loss used to ensure overfitting has not taken over.\n",
    "        train_loss.append(mean_loss)\n",
    "        val_loss.append(avg_loss)\n",
    "        if save_each_epoch:\n",
    "            torch.save({\n",
    "                'epoch': epoch+1,\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'loss': criterion,\n",
    "                }, './saved_models/{}_e{}.pth'.format('{}'.format(name), epoch))\n",
    "        ## For plotting\n",
    "        clear_output(wait=True)\n",
    "        ax.cla()\n",
    "        ax.plot(train_loss,'b', label='train')\n",
    "        ax.plot(val_loss,'r', label='val')\n",
    "        ax.set_title('Training')\n",
    "        ax.set_xlabel('Epoch')\n",
    "        ax.set_ylabel('train/val loss')\n",
    "        ax.legend()\n",
    "        display(fig)\n",
    "        \n",
    "    torch.save({\n",
    "                'epoch': epoch+1,\n",
    "                'model_state_dict': model.state_dict(),\n",
    "                'optimizer_state_dict': optimizer.state_dict(),\n",
    "                'loss': criterion,\n",
    "                }, './saved_models/{}_e{}.pth'.format('{}'.format(name), epoch))\n",
    "    clear_output(wait=True)\n",
    "    ax.set_title('Final Training curve')\n",
    "    print('Finished Training')\n",
    "    return train_loss, val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b958070c",
   "metadata": {},
   "source": [
    "### With this function defined, we can train a new model through the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6f4555c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished Training\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Re-initialize your optimizer and network, and train the network again but now just by calling train_model() with it as input\n",
    "\n",
    "FFnet = SimpleFeedForwardNet()\n",
    "optimizer = optim.Adam(FFnet.parameters()) # Using default learning rates and Beta coefficients\n",
    "\n",
    "start_epoch = 0\n",
    "epochs_to_run = 50\n",
    "FFnet.train() # Set your network in train mode\n",
    "train_loss, val_loss = train_model(FFnet, \n",
    "                                  start_epoch, \n",
    "                                  epochs_to_run, \n",
    "                                  train_dataloader, \n",
    "                                  val_dataloader, \n",
    "                                  criterion, \n",
    "                                  optimizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "30176f52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[-0.6602]]]) tensor([[[-0.6111]]])\n",
      "torch.Size([1, 1, 1]) torch.Size([1, 1, 1])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbfd5926748>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(outputs, labels.unsqueeze(dim=0))\n",
    "print(outputs.size(), labels.unsqueeze(dim=0).size())\n",
    "plt.plot(train_loss)\n",
    "plt.plot(val_loss, '--')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bf9ac54",
   "metadata": {},
   "source": [
    "## Testing\n",
    "After training our model on the training set, we can see from the training curve above that the model has converged to a low loss. We can also see that the model seems to avoid overfitting to the training set, as the performance is equal on both the training and validation sets. The next step is to evaluate the model on our test set, which the model has not seen at all so far.\n",
    "\n",
    "The test and validation set are essentially the same to the model; neither has been used for training the weights. The reason for splitting them up is to keep a check available in the case of hyperparameter tuning. Because we have access to both the training and validation losses during training, we, as programmers, can optimize our hyperparameters to ensure good performance on the validation set. In a worst case scenario, we may end up overfitting the hyperparameters of our model to our validation set, leading to less than optimal performance in operation. Therefore, it is common practice to keep a completely separate test set to actually test your finished model on that neither the programmer or the model has used for optimization.\n",
    "\n",
    "We will now let our trained network go through the entire test set and predict the phase offset, and observe the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b2f05d27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean loss on test set: 0.002936258930538843\n",
      "Mean prediction error in degrees on test set: 1.8816011048491217\n"
     ]
    }
   ],
   "source": [
    "# Testing\n",
    "\n",
    "FFnet.eval() # Set our network to .eval() to make sure certain layers are in eval mode. Not actually necessary when only using linear layers, but would be necessary if dropout or Batch Normalization layers are used.\n",
    "\n",
    "### Initialize some arrays to store our test results.\n",
    "preds=np.array([])\n",
    "true=np.array([])\n",
    "losses=np.array([])\n",
    "results = torch.empty(2,1)\n",
    "\n",
    "# Available dataset splits: train_dataloader, val_dataloader, test_dataloader\n",
    "\n",
    "\n",
    "#### PREDICT ON TEST SET ####\n",
    "\n",
    "for i, data in enumerate(____ADD_HERE____): # Loop through entire test set. <------ FILL IN THE DATASET YOU WANT TO TEST ON HERE\n",
    "    with torch.no_grad():\n",
    "        inputs, labels = data['data'].float().squeeze(), data['labels'].float().squeeze()\n",
    "        outputs = FFnet(inputs).squeeze()\n",
    "        loss = criterion(outputs,labels)\n",
    "        #print(inputs, outputs, labels)\n",
    "        preds = np.append(preds, outputs)\n",
    "        true = np.append(true, labels)\n",
    "        losses = np.append(losses, loss)\n",
    "        preds_labels = torch.stack((outputs.squeeze(dim=0), labels), 0)\n",
    "        if i == 0:\n",
    "            results = preds_labels.unsqueeze(dim=0)\n",
    "        else:\n",
    "            results = torch.cat((results, preds_labels.unsqueeze(dim=0)),0)\n",
    "\n",
    "print(f'Mean loss on test set: {np.mean(losses)}')\n",
    "print(f'Mean prediction error in degrees on test set: {np.mean(abs(preds-true)*45)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f20ed12e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbfd588c8d0>]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(preds,true)\n",
    "#reference: predictions should be equal to true, i.e. make a line\n",
    "x=np.linspace(-1,1,50)\n",
    "plt.plot(x,x,'g')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47b8f987",
   "metadata": {},
   "source": [
    "The plot above shows you the prediction versus the true label, but we are still using the normalized values. In the next cell, translate the values back into degrees and re-plot the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "745a26ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fbfd588c5c0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Translate back into degrees, from the normalized range [-1,1]. Original degree range was [-45,45].\n",
    "\n",
    "_ = # <---- add your multiplication factor here\n",
    "\n",
    "preds_deg = np.array(preds)*_ \n",
    "true_deg = np.array(true)* _\n",
    "\n",
    "\n",
    "# Some plotting code.\n",
    "plt.scatter(preds_deg,true_deg, label='Pred vs True')\n",
    "#reference: predictions should be equal to true, i.e. make a line\n",
    "x=np.linspace(-45,45,50)\n",
    "plt.plot(x,x,'g',label='Reference, pred=true')\n",
    "plt.xlabel('Predicted phase offset')\n",
    "plt.ylabel('True phase offset')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "plt.scatter(true_deg,true_deg-pred_deg, label='true vs Pred error')\n",
    "#reference: predictions should be equal to true, i.e. make a line\n",
    "\n",
    "plt.xlabel('True offset')\n",
    "plt.ylabel('True phase offset - predicted phase offset')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceb1db41",
   "metadata": {},
   "source": [
    "# Final note: How good is the simple network?\n",
    "\n",
    "Now you have defined, trained, and tested a simple neural network and with the figures above we can evaluate its performance. If the model had not learned anything, the blue dots in the figure above would be spread out randomly. If the model was perfect, the blue dots in the figure above would all be exactly on the green reference line. We see that this is not the case, but the models do seem to line up relatively well, and we have an average prediction error of ~1.9 degrees on the test set.\n",
    "\n",
    "If you would like to do some more tests, you could try to:\n",
    "\n",
    "- Evaluate your performance on the train/validation sets by changing the code above. Are they the same as on the test set?\n",
    "- Change the number of nodes in your linear layers in the network definition, to see if you can get different results. (May take some time, consider it optional)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38f25f55",
   "metadata": {},
   "source": [
    "# Optional: Can we get this model to overfit a model by reducing the training set?\n",
    "\n",
    "We have seen that the model can be trained to perform relatively well, and seems to perform equally on its validation and training sets. But can we get it to overfit as an experiment? Reduce the training set size below and see how the training behaviour changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "0a53a7e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split into training (9 samples), validation (176 samples) and test (176) sets\n"
     ]
    }
   ],
   "source": [
    "# Split our dataset into training and validation sets\n",
    "\n",
    "length = dataloader_bls.__len__() # Total number of samples\n",
    "\n",
    "train_len = int(length * __ADD HERE___) # <------ Fill in some small amount between [0, 1] to be the part of the dataset to use for training.\n",
    " \n",
    "val_len = length - train_len # The rest validation\n",
    "\n",
    "train, val = torch.utils.data.random_split(dataloader_bls, [train_len, val_len], generator=torch.Generator().manual_seed(42))\n",
    "\n",
    "val, test = torch.utils.data.random_split(val, [int(val_len/2), val_len-int(val_len/2)], generator=torch.Generator().manual_seed(42))\n",
    "print(f'Dataset split into training ({train.__len__()} samples), validation ({val.__len__()} samples) and test ({test.__len__()}) sets')\n",
    "\n",
    "# Finally, wrap your datasets in pyTorch dataloader classes\n",
    "train_dataloader = DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "val_dataloader = DataLoader(val, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "test_dataloader = DataLoader(test, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "\n",
    "\n",
    "# The values below are used to estimate time remaining during training\n",
    "steps_per_epoch = int(train.__len__()/batch_size) \n",
    "val_steps_per_epoch = int(val.__len__()/batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "64c3d6eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished Training\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Re-initialize your optimizer and network, and train the network again but now just by calling train_model() with it as input\n",
    "\n",
    "overfitted_FFnet = SimpleFeedForwardNet()\n",
    "overfitted_optimizer = optim.Adam(overfitted_FFnet.parameters()) # Using default learning rates and Beta coefficients\n",
    "\n",
    "start_epoch = 0\n",
    "epochs_to_run = 100\n",
    "overfitted_FFnet.train() # Set your network in train mode\n",
    "train_loss, val_loss = train_model(overfitted_FFnet, \n",
    "                                  start_epoch, \n",
    "                                  epochs_to_run, \n",
    "                                  train_dataloader, \n",
    "                                  val_dataloader, \n",
    "                                  criterion, \n",
    "                                  overfitted_optimizer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc137bc1",
   "metadata": {},
   "source": [
    "Most likely, it did not end up overfitting, but the model required many more epochs to reach similar performance (if it even does within the 100 epochs). Do you have any guesses as to why this is the case? If you set the training set fraction low enough, say = 0.1, you will finally be able to see some overfitting.\n",
    "\n",
    "- Why does this model not seem to overfit despite only using few samples (as few as 18)?\n",
    "\n",
    "[comment]: # (Because the model complexity is low: the network is still very simple, and is therefore robust w.r.t. overfitting, and because of the simplicity of the problem. The lack of model complexity does however also impact the final performance, as we will see later models reach higher predictive accuracy.)\n",
    "- Why does the the number of required training epochs increase?\n",
    "\n",
    "[comment]: # (Because each epoch is now much smaller. An epoch is defined as one training pass over the entire train/validation sets, and since we have reduced the training set we have in effect reduced the number of training steps performed per epoch. Since we also reduce the number of available training samples this could also have impacted the training speed and final model performance, but depending on what size of datasets you chose this may not have been the case. This could be because of the simplicity of this problem, where even just a few samples may be enough to model the underlying structure.)\n",
    "\n",
    "- Can you get the model to show a clear overfitting behaviour by lowering the dataset size further?\n",
    "\n",
    "[comment]: # (Try 0.01 and you should see clear overfitting happening, with the training loss being lowered while the validation loss starts increasing.)\n",
    "\n",
    "Some answers are proposed as markdown comments if you double click this text.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35249425",
   "metadata": {},
   "source": [
    "# Part 2\n",
    "\n",
    "## More advanced input: the entire final profile (or trace)\n",
    "\n",
    "So we have seen that a rather simple model can be used to predict the phase offset given only the bunch lengths. But what if our problem was more difficult, and the bunch lenghts alone were not enough to deterministically state what the offset was? This is for example the case for two double splittings following each other, which leads to a quadruple splitting. Here you can end up with several bunches of equal lengths but different intensities, for example. It is even more apparent in a triple splitting.\n",
    "\n",
    "One can attempt to solve this in different ways, but the most straight forward one is to design the input to our model to contain all the necessary information, and hope that the model will be able to recognize the important features of the input through training with enough samples. Continuing on the classic thought of performing analysis first we could compute both bunch lengths and bunch intensities and pass these along to our model. But what if we completely skip the human analysis, and simply send the entire final profile (which we would otherwise use to compute bunch lengths and intensities) to the network and let it figure out what is important and what is not?\n",
    "\n",
    "There are downsides and upsides to both methods, as a smaller input will lead to a smaller network and shorter training time, but also a reliance that the data you provide is actually enough to solve your problem.\n",
    "\n",
    "We will now attempt to create a new network that takes an entire profile as input and outputs the phase offset. You can see an example of a typical normalized profile that we will use below. \n",
    "\n",
    "<img src=\"./images/example_input.png\" alt=\"profile_input\" width=\"800\"/>\n",
    "\n",
    "\n",
    "### Create a class for our profile-input network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "53fb9706",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need to create a class for our new network. A similar structure as in the bunch length case can be used,\n",
    "# but it is necessary to change the input size to match the profile.\n",
    "\n",
    "# profile input: [1,200] numpy array of values, normalized to the range [0,1]\n",
    "\n",
    "class FeedForwardNetProfile(torch.nn.Module):\n",
    "    def __init__(self, input_features = 200, output_features=1):\n",
    "        super(FeedForwardNetProfile, self).__init__()\n",
    "\n",
    "        self.network = nn.Sequential(# \n",
    "            torch.nn.Linear(200, 100),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Linear(100, output_features),\n",
    "            #torch.nn.ReLU(),\n",
    "            #torch.nn.Linear(64,output_features),\n",
    "            torch.nn.Tanh()\n",
    "        )\n",
    "\n",
    "\n",
    "    def forward(self, x):    # Define forward pass.                                      \n",
    "        x = x.float()                                              \n",
    "        out = self.network(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8df44d9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset of profiles\n",
    "dataloader_profiles = DoublesplitDataset(type = 'profile', \n",
    "                                         csv_file = './double/dataset_profiles.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "92c0bced",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split into training (288 samples), validation (36 samples) and test (37) sets\n"
     ]
    }
   ],
   "source": [
    "# Split our dataset into training and validation sets\n",
    "\n",
    "length = dataloader_profiles.__len__() # Total number of samples\n",
    "\n",
    "train_len = int(length * 0.8) # 80% training set\n",
    " \n",
    "val_len = length - train_len # The rest validation\n",
    "\n",
    "train, val = torch.utils.data.random_split(dataloader_profiles, [train_len, val_len], generator=torch.Generator().manual_seed(42))\n",
    "\n",
    "val, test = torch.utils.data.random_split(val, [int(val_len/2), val_len-int(val_len/2)], generator=torch.Generator().manual_seed(42))\n",
    "print(f'Dataset split into training ({train.__len__()} samples), validation ({val.__len__()} samples) and test ({test.__len__()}) sets')\n",
    "\n",
    "# Finally, wrap your datasets in pyTorch dataloader classes\n",
    "train_dataloader = DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "val_dataloader = DataLoader(val, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "test_dataloader = DataLoader(test, batch_size=batch_size, shuffle=True, num_workers=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9b45b78c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fbfd536feb8>]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check an example from the dataset to make sure it is a profile as intended.\n",
    "\n",
    "sample = next(iter(train_dataloader))\n",
    "sample['data'].squeeze()\n",
    "plt.plot(sample['data'].squeeze())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6e0fe297",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FeedForwardNetProfile(\n",
      "  (network): Sequential(\n",
      "    (0): Linear(in_features=200, out_features=100, bias=True)\n",
      "    (1): ReLU()\n",
      "    (2): Linear(in_features=100, out_features=1, bias=True)\n",
      "    (3): Tanh()\n",
      "  )\n",
      ")\n",
      "Number of trainable parameters: 20201\n"
     ]
    }
   ],
   "source": [
    "# Instantiate the network and print its structure. \n",
    "\n",
    "model_profile = FeedForwardNetProfile()\n",
    "print(model_profile)\n",
    "nbr_params = count_parameters(model_profile)\n",
    "print(f'Number of trainable parameters: {nbr_params}')\n",
    "\n",
    "# Notice how we went from only 65 trainable parameters in the bunch length input model to 20201 parameters with the entire profile as input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "5edbe4e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished Training\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Re-initialize your optimizer\n",
    "\n",
    "optimizer_profile = optim.Adam(model_profile.parameters()) # Using default learning rates and Beta coefficients\n",
    "\n",
    "# And call the previously defined train_model() function with our new model, dataloaders, and optimizers as input.\n",
    "\n",
    "start_epoch = 0\n",
    "epochs_to_run = 10\n",
    "\n",
    "train_loss, val_loss = train_model(model_profile, \n",
    "                                          start_epoch, \n",
    "                                          epochs_to_run, \n",
    "                                          train_dataloader, \n",
    "                                          val_dataloader, \n",
    "                                          criterion, \n",
    "                                          optimizer_profile,\n",
    "                                          name='FFnetProfile_test')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0726b306",
   "metadata": {},
   "source": [
    "You will notice that with this network, training is much slower: this is due to the increased complexity of the network and therefore the increase in computations required both during the forward and backward passes. You can also see that we however need much fewer epochs of training to reach good performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "81774eb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fbfdb4dd7b8>"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We can plot the training curves after the fact as well.\n",
    "\n",
    "plt.plot(train_loss, label='train')\n",
    "plt.plot(val_loss, label='val')\n",
    "plt.legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "614ee5f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean loss on test set: 0.0009715626218941317\n",
      "Mean prediction error in degrees on test set: 1.2483341881778796\n"
     ]
    }
   ],
   "source": [
    "# testing\n",
    "model_profile.eval()\n",
    "preds=np.array([])\n",
    "true=np.array([])\n",
    "losses = np.array([])\n",
    "results = torch.empty(2,1)\n",
    "for i, data in enumerate(test_dataloader):\n",
    "    with torch.no_grad():\n",
    "        inputs, labels = data['data'].float().squeeze(), data['labels'].float().squeeze()\n",
    "        outputs = model_profile(inputs).squeeze()\n",
    "        loss = criterion(outputs,labels)\n",
    "        #print(inputs, outputs, labels)\n",
    "        losses = np.append(losses, loss)\n",
    "        preds= np.append(preds, outputs)\n",
    "        true = np.append(true, labels)\n",
    "        preds_labels = torch.stack((outputs.squeeze(dim=0), labels), 0)\n",
    "        if i == 0:\n",
    "            results = preds_labels.unsqueeze(dim=0)\n",
    "        else:\n",
    "            results = torch.cat((results, preds_labels.unsqueeze(dim=0)),0)\n",
    "            \n",
    "print(f'Mean loss on test set: {np.mean(losses)}')\n",
    "print(f'Mean prediction error in degrees on test set: {np.mean(abs(preds-true)*45)}')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "b6a6dbd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x198b3abc4c0>"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Translate back into degrees,\n",
    "preds_deg = preds*45\n",
    "true_deg = true*45\n",
    "plt.scatter(preds_deg,true_deg, label='Pred vs True')\n",
    "#reference: predictions should be equal to true, i.e. make a line\n",
    "x=np.linspace(-45,45,50)\n",
    "plt.plot(x,x,'g',label='Reference, pred=true')\n",
    "plt.xlabel('Predicted phase offset')\n",
    "plt.ylabel('True phase offset')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5b7e003",
   "metadata": {},
   "source": [
    "# How good is the profile network?\n",
    "\n",
    "Now you have defined, trained, and tested both a simple neural network with only 65 parameters and a network with 20201 parameters using the full profile as input. How do they compare? We can see that the profile-based model reaches better final prediction accuracy, with an average prediction error of ~1.25 degrees on the test set compared to the simple networks ~1.9. It also reaches a lower average loss. In the figure above, we see that the blue predictions line up relatively well with the green reference line. It seems, at least in this little experiment, that increasing the information given to the model did indeed lead to increased performance.\n",
    "\n",
    "If you would like to do some more tests, you could try to:\n",
    "\n",
    "- Evaluate your performance on the train/validation sets by changing the code above. Are they the same as on the test set?\n",
    "- Change the network definition, to see if you can get different results. (May take some time, consider it optional)\n",
    "- Again test overfitting in the following section."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b77e051c",
   "metadata": {},
   "source": [
    "# Optional: Can we get the profile model to overfit by reducing the training set?\n",
    "\n",
    "The profile-based model has many more trainable parameters than the simple network we started with, and should therefore be much more prone to overfitting. Can we get it to overfit as an experiment? Reduce the training set size below and see how the training behaviour changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "8c416b66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split into training (36 samples), validation (162 samples) and test (163) sets\n"
     ]
    }
   ],
   "source": [
    "# Split our dataset into training and validation sets\n",
    "\n",
    "length = dataloader_profiles.__len__() # Total number of samples\n",
    "\n",
    "train_len = int(length * ___ADD_HERE____) # <------ Choose the fraction of the dataset to use for training. TIP: Use something around 0.01 to see the overfitting clearly.\n",
    " \n",
    "val_len = length - train_len # The rest validation\n",
    "\n",
    "train, val = torch.utils.data.random_split(dataloader_profiles, [train_len, val_len], generator=torch.Generator().manual_seed(42))\n",
    "\n",
    "val, test = torch.utils.data.random_split(val, [int(val_len/2), val_len-int(val_len/2)], generator=torch.Generator().manual_seed(42))\n",
    "print(f'Dataset split into training ({train.__len__()} samples), validation ({val.__len__()} samples) and test ({test.__len__()}) sets')\n",
    "\n",
    "# Finally, wrap your datasets in pyTorch dataloader classes\n",
    "train_dataloader = DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "val_dataloader = DataLoader(val, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "test_dataloader = DataLoader(test, batch_size=batch_size, shuffle=True, num_workers=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4b3b941d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12/50,    10/36] loss: 0.00072064, Est. epoch time left: 0:00:15.072479 s\n",
      "[12/50,    20/36] loss: 0.00098755, Est. epoch time left: 0:00:11.441723 s\n",
      "[12/50,    30/36] loss: 0.00092489, Est. epoch time left: 0:00:04.100181 s\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-92-5e888f024010>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m                                           \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                                           \u001b[0moptimizer_profile_overfit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m                                           name='FFnetProfile_test')\n\u001b[0m",
      "\u001b[0;32m<ipython-input-76-f5511ebe110f>\u001b[0m in \u001b[0;36mtrain_model\u001b[0;34m(model, start_epoch, epochs_to_run, train_dataloader, val_dataloader, criterion, optimizer, name)\u001b[0m\n\u001b[1;32m     30\u001b[0m             \u001b[0;31m#print(outputs, labels, loss)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m             \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Backward pass: Compute the gradients of your network through backpropagation.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# Optimize weights and biases: Update your network using your optimizer.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/home-j/jwulff/SWAN_projects/Hands-on_Supervised_learning/hansOn-venv/lib/python3.6/site-packages/torch/_tensor.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    305\u001b[0m                 \u001b[0mcreate_graph\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m                 inputs=inputs)\n\u001b[0;32m--> 307\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mregister_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/eos/home-j/jwulff/SWAN_projects/Hands-on_Supervised_learning/hansOn-venv/lib/python3.6/site-packages/torch/autograd/__init__.py\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    154\u001b[0m     Variable._execution_engine.run_backward(\n\u001b[1;32m    155\u001b[0m         \u001b[0mtensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrad_tensors_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mretain_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_graph\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m         allow_unreachable=True, accumulate_grad=True)  # allow_unreachable flag\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Re-initialize your optimizer and model and retrain using your new datasplit.\n",
    "\n",
    "model_profile_overfit = FeedForwardNetProfile()\n",
    "\n",
    "start_epoch = 0\n",
    "epochs_to_run = 50\n",
    "\n",
    "optimizer_profile_overfit = optim.Adam(model_profile_overfit.parameters()) # Using default learning rates and Beta coefficients\n",
    "\n",
    "# And call the previously defined train_model() function with our new model, dataloaders, and optimizers as input.\n",
    "train_loss, val_loss = train_model(model_profile_overfit, \n",
    "                                          start_epoch, \n",
    "                                          epochs_to_run, \n",
    "                                          train_dataloader, \n",
    "                                          val_dataloader, \n",
    "                                          criterion, \n",
    "                                          optimizer_profile_overfit,\n",
    "                                          name='FFnetProfile_overfit')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b54722cd",
   "metadata": {},
   "source": [
    "Even here you may notice the model is not particularly prone to overfitting, despite its increased complexity. This may again point to the fact that this example is quite simple, and despite only training on a few examples the model can generalize to the rest of the datapoints.\n",
    "\n",
    "For some more experimentaion you can try to: \n",
    "    \n",
    "- Get the model to show a clear overfitting behaviour by lowering the dataset size."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2739268a",
   "metadata": {},
   "source": [
    "# Part 3\n",
    "\n",
    "## Even more input: Using several profiles to create a bunch evolution image\n",
    "\n",
    "If we wish we can go even further than just providing one profile to our network, we could provide several profiles, acquired over many turns in the PS, allowing for the bunch evolution to be taken into account by the model. We can also start leveraging a very powerful and popular neural network structure in the from of so called Convolutional Neural Networks (CNNs), which have seen great success in solving computer vision based tasks. The main operation of these networks is the convolution. Given an input matrix A, a convolution is performed as follows: first, one defines a kernel matrix K (sometimes called a filter) of a certain size with certain weights. This matrix will then be slid across the input matrix A, computing a matrix multiplication between the filter and the input for every visited position.\n",
    "\n",
    "When the input matrix A represents an image, the convolution can be interpreted as sliding a window over the image, collecting the view through the window and combining it into a representative *feature*. In classical image processing, convolutions are often used for tasks such as edge detection, sharpening, or blurring of images. In these cases the values, or weights, of the filter are hand-engineered before application to achieve a specific purpose. In CNNs, the weights of the kernel are not pre-determined, but are instead learned through back-propagation and minimization of the loss function. \n",
    "\n",
    "<img src=\"./images/conv_ex.png\" alt=\"loss\" height=\"600\"/>\n",
    "\n",
    "In the figure above you can see an example of a 3x3 convolutional filter (or kernel) being applied to an image to create a feature map. Convolutions are especially effective at analyzing images as they are capable of catching local dependencies between pixels. The dependencies caught by the filter depends on its size; a bigger filter takes more pixels into account for each computed feature, giving it a larger receptive field.  In addtion to the filter size and weights there are a few more components that affect a convolutional layer. When initializing the layer, one can define the number of filters to use, creating the depth of the layer. More filters means more feature maps, and potentially more extracted information. The input data can also be zero-padded around its boundaries, to preserve information around the edges of the image and to maintain the same spatial dimensions between the feature maps and the original input image. One can also introduce stride, which decides the step-size of the sliding kernel over the input: stride = 1 means the kernel is slid one pixel at a time, stride = 2 means the kernel is slid two pixels, etc.. A larger stride is sometimes desired to reduce overlapping, and since fewer features are computed the number of parameters is also reduced.\n",
    "\n",
    "\n",
    "The new input to our network would then be the matrix of several bunch profiles gathered during different turns in the machine (as seen on the tomoscope in the CCC):\n",
    "\n",
    "<img src=\"./images/dm_input.png\" alt=\"loss\" height=\"200\"/>\n",
    "\n",
    "To use this image as input, we again need to load a new dataset of these images and redefine a neural network that can handle data of its dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "b15c387b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset with datamatrices\n",
    "dataloader_datamatrix = DoublesplitDataset(type = 'datamatrix', \n",
    "                                         csv_file = r'./double/dataset.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "fdf01cd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split into training (288 samples), validation (36 samples) and test (37) sets\n"
     ]
    }
   ],
   "source": [
    "# Split our dataset into training and validation sets\n",
    "\n",
    "length = dataloader_datamatrix.__len__() # Total number of samples\n",
    "\n",
    "train_len = int(length * 0.8) # 80% training set\n",
    " \n",
    "val_len = length - train_len # The rest validation/test 10% each\n",
    "\n",
    "train, val = torch.utils.data.random_split(dataloader_datamatrix, [train_len, val_len], generator=torch.Generator().manual_seed(42))\n",
    "\n",
    "val, test = torch.utils.data.random_split(val, [int(val_len/2), val_len-int(val_len/2)], generator=torch.Generator().manual_seed(42))\n",
    "print(f'Dataset split into training ({train.__len__()} samples), validation ({val.__len__()} samples) and test ({test.__len__()}) sets')\n",
    "\n",
    "# Finally, wrap your datasets in pyTorch dataloader classes\n",
    "train_dataloader = DataLoader(train, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "val_dataloader = DataLoader(val, batch_size=batch_size, shuffle=True, num_workers=0)\n",
    "test_dataloader = DataLoader(test, batch_size=batch_size, shuffle=True, num_workers=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "aeeee787",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([120, 200])\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample = next(iter(train_dataloader))\n",
    "sample['data'].squeeze()\n",
    "plt.imshow(sample['data'].squeeze())\n",
    "print(sample['data'].squeeze().size())\n",
    "\n",
    "# Images contain 120 profiles taken at intervals of 400 turns in the PS with 200 bins. Each bin represents a time resolution of \n",
    "# 0.5 ns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "4cc35056",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create CNN-model. CNNs are built up of several convolutional layers, that learn sets of convolutional filters to apply to the image for feature extraction.\n",
    "# Convolutional layers are dimension agnostic: you can input images of any size into a purely convolutional network. In this example, however, we use some linear layers at the\n",
    "# end to compress all of our features into a single output value, which will be our predicted phase offset. These linear layers must be defined to strictly to fit the output\n",
    "# of the previous layer or an error would appear.\n",
    "\n",
    "class CNN(torch.nn.Module):\n",
    "    def __init__(self, num_features=1):\n",
    "        super(CNN, self).__init__()\n",
    "\n",
    "        self.FeedForwardLayers = nn.Sequential(# \n",
    "            torch.nn.Conv2d(1,64,3,stride=1), # Conv2d(input_filters,output_filters,kernel_size,stride=1). Kernel size 3 = 3x3 kernel, if you want a non-square kernel you can define it using a tuple (3x4).\n",
    "            torch.nn.BatchNorm2d(64),         # Batch normalization layer. Increases training efficiency when training deep networks. Provides some regularization. Is sometimes replaced by dropout layers.\n",
    "            torch.nn.ReLU(),                  # Activation function: Rectified Linear Unit is being used. Allows for non-linear modeling but with linear activation for positive numbers.\n",
    "                                              # ReLU function f(x) = x if x > 0, otherwise = 0.\n",
    "            torch.nn.Conv2d(64,32,3,2), # \n",
    "            torch.nn.BatchNorm2d(32),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Conv2d(32,16,3,2), #\n",
    "            torch.nn.BatchNorm2d(16),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Conv2d(16,8,3,2), #\n",
    "            torch.nn.BatchNorm2d(8),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Conv2d(8,8,3,2), # \n",
    "            torch.nn.BatchNorm2d(8),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Flatten(),\n",
    "            torch.nn.Linear(528,256),\n",
    "            torch.nn.ReLU(),\n",
    "            torch.nn.Linear(256, num_features),\n",
    "            torch.nn.Tanh()                    # Activation function tanh: squashes the outputs to be between [-1,1] to fit our normalized dataset. Not necessary to use, \n",
    "                                               # and may in fact sometimes impair generalization ability as it limits the models prediction area to the specified range\n",
    "                                               # of values within [-1,1] during training. Here, where -1 = 45 degrees, the model could for example never predict an offset\n",
    "                                               # of -46 degrees, it is outside its prediction range. Using it can however decrease training time, as you reduce the search space.\n",
    "        )\n",
    "\n",
    "\n",
    "    def forward(self, x):                                           \n",
    "        x = x.float()                                              \n",
    "        out = self.FeedForwardLayers(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "d1bc023a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CNN(\n",
      "  (FeedForwardLayers): Sequential(\n",
      "    (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1))\n",
      "    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (2): ReLU()\n",
      "    (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2))\n",
      "    (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (5): ReLU()\n",
      "    (6): Conv2d(32, 16, kernel_size=(3, 3), stride=(2, 2))\n",
      "    (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (8): ReLU()\n",
      "    (9): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2))\n",
      "    (10): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (11): ReLU()\n",
      "    (12): Conv2d(8, 8, kernel_size=(3, 3), stride=(2, 2))\n",
      "    (13): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "    (14): ReLU()\n",
      "    (15): Flatten(start_dim=1, end_dim=-1)\n",
      "    (16): Linear(in_features=528, out_features=256, bias=True)\n",
      "    (17): ReLU()\n",
      "    (18): Linear(in_features=256, out_features=1, bias=True)\n",
      "    (19): Tanh()\n",
      "  )\n",
      ")\n",
      "Number of trainable parameters: 161409\n"
     ]
    }
   ],
   "source": [
    "# Lets view our model structure and number of trainable parameters.\n",
    "\n",
    "model_dm = CNN()\n",
    "print(model_dm)\n",
    "\n",
    "nbr_params = count_parameters(model_dm)\n",
    "print(f'Number of trainable parameters: {nbr_params}') # Again, notice the increase in number of trainable parameters.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd0fbaac",
   "metadata": {},
   "source": [
    "## Train the datamatrix model\n",
    "\n",
    "You will notice that training this model is much more time intensive. This shows that for simple problems, more complexity is not always better: it takes longer to train and may not even reach better performance, in fact, it may even perform worse. If your problem is simple, and data is limited, you may benefit from using a simpler model as well. Large CNNs reach their true potential when operating on complex tasks with large datasets, such as image classification on ImageNet.\n",
    "\n",
    "Training of large CNNs can be accelerated greatly by running on GPUs rather than CPUs, and training a model of this size on a normal SWAN server is probably not the best idea.\n",
    "\n",
    "If you don't have time to wait for the training of the CNN model (each epoch takes about ~10 min), a pre-trained one is provided that you can load below to use for evaluation. It was trained for 6 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "7a58a715",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished Training\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "start_epoch = 0\n",
    "epochs_to_run = 10\n",
    "\n",
    "model_dm = CNN()\n",
    "model_dm.train() # Set your network in train mode\n",
    "optimizer_dm = optim.Adam(model_dm.parameters()) # Using default learning rates and Beta coefficients\n",
    "\n",
    "train_loss, val_loss = train_model(model_dm, \n",
    "                                   start_epoch, \n",
    "                                   epochs_to_run, \n",
    "                                   train_dataloader, \n",
    "                                   val_dataloader, \n",
    "                                   criterion, \n",
    "                                   optimizer_dm, \n",
    "                                   name='model_datamatrix',\n",
    "                                   save_each_epoch=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "2bb43f99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetching model from ./saved_models/pretrained_model_datamatrix_e9.pth...\n",
      "Weights loaded...\n"
     ]
    }
   ],
   "source": [
    "# If you don't want to load a model, skip this section.\n",
    "model_dm = CNN()\n",
    "path='./saved_models/pretrained_model_datamatrix_e9.pth'\n",
    "print(f'Fetching model from {path}...')\n",
    "checkpoint = torch.load(path)\n",
    "model_dm.load_state_dict(checkpoint['model_state_dict'])\n",
    "#optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n",
    "criterion = checkpoint['loss']\n",
    "print(f'Weights loaded...')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "a32e168f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean loss on test set: 0.00046374671964983735\n",
      "Mean absolute prediction error in degrees on test set: 0.7423118063928308\n"
     ]
    }
   ],
   "source": [
    "# testing\n",
    "\n",
    "model_dm.eval()\n",
    "preds=np.array([])\n",
    "true=np.array([])\n",
    "losses = np.array([])\n",
    "results = torch.empty(2,1)\n",
    "for i, data in enumerate(test_dataloader, 0):\n",
    "    with torch.no_grad():\n",
    "        inputs, labels = data['data'].float(), data['labels'].float()\n",
    "        outputs = model_dm(inputs)\n",
    "        loss = criterion(outputs,labels)\n",
    "        #print(inputs, outputs, labels)\n",
    "        losses = np.append(losses, loss)\n",
    "        preds= np.append(preds, outputs)\n",
    "        true = np.append(true, labels)\n",
    "        preds_labels = torch.stack((outputs, labels), 0)\n",
    "        if i == 0:\n",
    "            results = preds_labels.unsqueeze(dim=0)\n",
    "        else:\n",
    "            results = torch.cat((results, preds_labels.unsqueeze(dim=0)),0)\n",
    "print(f'Mean loss on test set: {np.mean(losses)}')\n",
    "print(f'Mean absolute prediction error in degrees on test set: {np.mean(abs(preds-true)*45)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa037ace",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Translate back into degrees,\n",
    "preds_deg = preds*45\n",
    "true_deg = true*45\n",
    "plt.scatter(preds_deg,true_deg, label='Pred vs True')\n",
    "#reference: predictions should be equal to true, i.e. make a line\n",
    "x=np.linspace(-45,45,50)\n",
    "plt.plot(x,x,'g',label='Reference, pred=true')\n",
    "plt.xlabel('Predicted phase offset')\n",
    "plt.ylabel('True phase offset')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3941fb90",
   "metadata": {},
   "source": [
    "# How good is the datamatrix network?\n",
    "\n",
    "The more advanced CNN based model performs even better than the profile-based one, giving a final prediction error on the test set of ~0.43 degrees. However, as you probably noticed, the training took much longer: each epoch lasting about 10 minutes, while the profile model only required a few seconds per epoch.\n",
    "\n",
    "Some things you can think about and discuss:\n",
    "\n",
    "- The CNN network is much more complex and has many more parameters than the previous models. Why does the model not overfit, being so complex?\n",
    "\n",
    "[comment]: # (A potential reason could be that we also increased the complexity of the data by including several profiles in our input. This increased information can in essence be likened to increasing our dataset: even if we have the same number of samples as before each sample now contains more information.)\n",
    "- Which network formulation do you think best suits this problem? What are the specific downsides or upsides to the different formulations?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdafa308",
   "metadata": {},
   "source": [
    "# Want to learn more?\n",
    "\n",
    "If you want to learn more about the theory of supervised learning and machine learning there are many articles and tutorials available online.\n",
    "\n",
    "During writing of this excercise, I took a lot of texts from chapters 2.1-2.5 of my own master thesis, which you can look at here: https://lup.lub.lu.se/student-papers/search/publication/9074363\n",
    "\n",
    "Other websites with lots of information are:\n",
    "\n",
    "- https://fast.ai : by the developers of the fastai library for pytorch, they provide several free online courses to get practical experience with deep learning.\n",
    "- https://machinelearningmastery.com/ : a blog about machine learning with many basic tutorials for both deep learning like CNNs and LSTMs but also classical machine learning like logistic regression and SVMs with explanations and code.\n",
    "- https://udemy.com courses: Udemy provides many courses on machine learning topics, for all levels.\n",
    "- https://www.deeplearningbook.org/ : On this site you can read a now classic deep learning textbook online for free, written in part by the inventor of Generative Adversarial Networks.\n",
    "\n",
    "If you google whatever machine learning topic you are interested in, you are also likely to find many articles about it sites such as medium or towardsdatascience.\n",
    "\n",
    "I hope you enjoyed this small hands-on and if you have any further questions let me know!\n",
    "\n",
    "/ Joel"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
